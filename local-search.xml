<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用 ESP32-S3 的 LED PWM 控制器控制 LED 亮度</title>
    <link href="/posts/11756890.html"/>
    <url>/posts/11756890.html</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在物联网（IoT）设备中，LED 控制是一个常见的应用场景。ESP32-S3 开发板提供了强大的 LED PWM 控制器（LEDC），可以用来控制 LED 的亮度以及其他需要 PWM 信号的应用。本文将详细介绍如何使用 ESP-IDF 框架中的 LEDC 驱动程序来控制 LED 的亮度。</p><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始之前，请确保你已经安装了 ESP-IDF 开发环境，并且熟悉基本的 ESP32 项目构建流程。如果你还没有安装 ESP-IDF，可以从 <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html">Espressif 官网</a> 获取安装指南。</p><h2 id="LED-PWM-控制器概述"><a href="#LED-PWM-控制器概述" class="headerlink" title="LED PWM 控制器概述"></a>LED PWM 控制器概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>LED 控制器 (LEDC) 主要用于控制 LED，也可产生 PWM 信号用于其他设备的控制。该控制器有 8 路通道，可以产生独立的波形，驱动 RGB LED 等设备。LEDC PWM 控制器可在无需 CPU 干预的情况下自动改变占空比，实现亮度和颜色渐变。</p><h3 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h3><ol><li><p><strong>设置 LEDC 通道</strong>：</p><ul><li>定时器配置：指定 PWM 信号的频率和占空比分辨率。</li><li>通道配置：绑定定时器和输出 PWM 信号的 GPIO。</li><li>改变 PWM 信号：输出 PWM 信号来驱动 LED。可通过软件控制或使用硬件渐变功能来改变 LED 的亮度。</li></ul></li><li><p><strong>电源管理</strong>：</p><ul><li>LEDC 驱动不使用电源管理锁来防止系统进入 Light-sleep。可以通过配置<code>ledc_channel_config_t::sleep_mode</code>来选择 LEDC 外设电源域状态和 PWM 信号在睡眠期间的输出行为。</li></ul></li><li><p><strong>频率和占空比分辨率支持范围</strong>：</p><ul><li>LED PWM 控制器主要用于驱动 LED。该控制器 PWM 占空比设置的分辨率范围较广。例如，PWM 频率为 5 kHz 时，占空比分辨率最大可为 13 位。然而，这些参数取决于为 LEDC 定时器计时的时钟信号。</li></ul></li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我们将使用 ESP-IDF 提供的示例代码来演示如何使用 LEDC 驱动程序控制 LED 的亮度。以下是完整的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/ledc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><br><span class="hljs-comment">// LEDC 通道配置</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_TIMER              LEDC_TIMER_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_MODE               LEDC_LOW_SPEED_MODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_OUTPUT_IO          (2)       <span class="hljs-comment">// 根据你的硬件连接修改 GPIO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_CHANNEL            LEDC_CHANNEL_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_DUTY_RESOLUTION    10        <span class="hljs-comment">// 占空比分辨率</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_FREQUENCY          (5000)    <span class="hljs-comment">// PWM 频率 (Hz)</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 配置 LEDC 定时器</span><br>    <span class="hljs-type">ledc_timer_config_t</span> ledc_timer = &#123;<br>        .speed_mode       = LEDC_MODE,<br>        .timer_num        = LEDC_TIMER,<br>        .duty_resolution  = LEDC_DUTY_RESOLUTION,<br>        .freq_hz          = LEDC_FREQUENCY,<br>        .clk_cfg          = LEDC_AUTO_CLK,<br>    &#125;;<br>    ESP_ERROR_CHECK(ledc_timer_config(&amp;ledc_timer));<br><br>    <span class="hljs-comment">// 配置 LEDC 通道</span><br>    <span class="hljs-type">ledc_channel_config_t</span> ledc_channel = &#123;<br>        .speed_mode     = LEDC_MODE,<br>        .channel        = LEDC_CHANNEL,<br>        .timer_sel      = LEDC_TIMER,<br>        .intr_type      = LEDC_INTR_DISABLE,<br>        .gpio_num       = LEDC_OUTPUT_IO,<br>        .duty           = <span class="hljs-number">0</span>, <span class="hljs-comment">// 初始占空比</span><br>        .hpoint         = <span class="hljs-number">0</span>,<br>        .flags          = <span class="hljs-number">0</span>,<br>    &#125;;<br>    ESP_ERROR_CHECK(ledc_channel_config(&amp;ledc_channel));<br><br>    <span class="hljs-comment">// 循环改变 LED 亮度</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> duty = <span class="hljs-number">0</span>; duty &lt;= <span class="hljs-number">1023</span>; duty++) &#123;<br>            ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty));<br>            ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));<br>            vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> duty = <span class="hljs-number">1023</span>; duty &gt;= <span class="hljs-number">0</span>; duty--) &#123;<br>            ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty));<br>            ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));<br>            vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="1-包含头文件"><a href="#1-包含头文件" class="headerlink" title="1. 包含头文件"></a>1. 包含头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/ledc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br></code></pre></td></tr></table></figure><ul><li><code>driver/ledc.h</code>：包含 LEDC 驱动程序的 API 声明。</li><li><code>esp_log.h</code>：包含日志记录功能。</li><li><code>freertos/FreeRTOS.h</code> 和 <code>freertos/task.h</code>：包含 FreeRTOS 任务管理功能。</li></ul><h3 id="2-定义日志标签"><a href="#2-定义日志标签" class="headerlink" title="2. 定义日志标签"></a>2. 定义日志标签</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* TAG = <span class="hljs-string">&quot;example&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>定义了一个日志标签，用于标识日志信息的来源。</li></ul><h3 id="3-定义-LEDC-配置参数"><a href="#3-定义-LEDC-配置参数" class="headerlink" title="3. 定义 LEDC 配置参数"></a>3. 定义 LEDC 配置参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_TIMER              LEDC_TIMER_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_MODE               LEDC_LOW_SPEED_MODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_OUTPUT_IO          (2)       <span class="hljs-comment">// 根据你的硬件连接修改 GPIO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_CHANNEL            LEDC_CHANNEL_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_DUTY_RESOLUTION    10        <span class="hljs-comment">// 占空比分辨率</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_FREQUENCY          (5000)    <span class="hljs-comment">// PWM 频率 (Hz)</span></span><br></code></pre></td></tr></table></figure><ul><li><code>LEDC_TIMER</code>：使用的定时器编号。</li><li><code>LEDC_MODE</code>：速度模式，ESP32-S3 仅支持低速模式。</li><li><code>LEDC_OUTPUT_IO</code>：输出 PWM 信号的 GPIO 编号。</li><li><code>LEDC_CHANNEL</code>：使用的通道编号。</li><li><code>LEDC_DUTY_RESOLUTION</code>：占空比分辨率。</li><li><code>LEDC_FREQUENCY</code>：PWM 信号的频率。</li></ul><h3 id="4-配置-LEDC-定时器"><a href="#4-配置-LEDC-定时器" class="headerlink" title="4. 配置 LEDC 定时器"></a>4. 配置 LEDC 定时器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ledc_timer_config_t</span> ledc_timer = &#123;<br>    .speed_mode       = LEDC_MODE,<br>    .timer_num        = LEDC_TIMER,<br>    .duty_resolution  = LEDC_DUTY_RESOLUTION,<br>    .freq_hz          = LEDC_FREQUENCY,<br>    .clk_cfg          = LEDC_AUTO_CLK,<br>&#125;;<br>ESP_ERROR_CHECK(ledc_timer_config(&amp;ledc_timer));<br></code></pre></td></tr></table></figure><ul><li>创建一个<code>ledc_timer_config_t</code>结构体，并设置定时器参数。</li><li>使用<code>ledc_timer_config</code>函数配置定时器。</li></ul><h3 id="5-配置-LEDC-通道"><a href="#5-配置-LEDC-通道" class="headerlink" title="5. 配置 LEDC 通道"></a>5. 配置 LEDC 通道</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ledc_channel_config_t</span> ledc_channel = &#123;<br>    .speed_mode     = LEDC_MODE,<br>    .channel        = LEDC_CHANNEL,<br>    .timer_sel      = LEDC_TIMER,<br>    .intr_type      = LEDC_INTR_DISABLE,<br>    .gpio_num       = LEDC_OUTPUT_IO,<br>    .duty           = <span class="hljs-number">0</span>, <span class="hljs-comment">// 初始占空比</span><br>    .hpoint         = <span class="hljs-number">0</span>,<br>    .flags          = <span class="hljs-number">0</span>,<br>&#125;;<br>ESP_ERROR_CHECK(ledc_channel_config(&amp;ledc_channel));<br></code></pre></td></tr></table></figure><ul><li>创建一个<code>ledc_channel_config_t</code>结构体，并设置通道参数。</li><li>使用<code>ledc_channel_config</code>函数配置通道。</li></ul><h3 id="6-循环改变-LED-亮度"><a href="#6-循环改变-LED-亮度" class="headerlink" title="6. 循环改变 LED 亮度"></a>6. 循环改变 LED 亮度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> duty = <span class="hljs-number">0</span>; duty &lt;= <span class="hljs-number">1023</span>; duty++) &#123;<br>        ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty));<br>        ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));<br>        vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> duty = <span class="hljs-number">1023</span>; duty &gt;= <span class="hljs-number">0</span>; duty--) &#123;<br>        ESP_ERROR_CHECK(ledc_set_duty(LEDC_MODE, LEDC_CHANNEL, duty));<br>        ESP_ERROR_CHECK(ledc_update_duty(LEDC_MODE, LEDC_CHANNEL));<br>        vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在一个无限循环中，逐步增加和减少占空比，从而实现 LED 亮度的渐变。</li><li>使用<code>ledc_set_duty</code>设置新的占空比，并使用<code>ledc_update_duty</code>使新配置生效。</li><li>使用<code>vTaskDelay</code>设置任务延迟，控制亮度变化的速度。</li></ul><h2 id="使用中断"><a href="#使用中断" class="headerlink" title="使用中断"></a>使用中断</h2><p>LEDC 驱动还可以配置中断，在渐变完成时触发中断。以下是一个简单的示例，展示如何注册中断处理程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> IRAM_ATTR <span class="hljs-title function_">ledc_fade_isr</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br>    BaseType_t xHigherPriorityTaskWoken = pdFALSE;<br>    <span class="hljs-comment">// 处理中断事件</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Fade complete&quot;</span>);<br>    portYIELD_FROM_ISR();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 配置 LEDC 定时器和通道（同上）</span><br><br>    <span class="hljs-comment">// 注册中断处理程序</span><br>    ledc_isr_register(ledc_fade_isr, <span class="hljs-literal">NULL</span>, ESP_INTR_FLAG_IRAM, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-comment">// 启用渐变功能</span><br>    ledc_fade_func_install(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 设置渐变参数并启动渐变</span><br>    ledc_set_fade_with_time(LEDC_MODE, LEDC_CHANNEL, <span class="hljs-number">1023</span>, <span class="hljs-number">1000</span>);<br>    ledc_fade_start(LEDC_MODE, LEDC_CHANNEL, LEDC_FADE_NO_WAIT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-注册中断处理程序"><a href="#7-注册中断处理程序" class="headerlink" title="7. 注册中断处理程序"></a>7. 注册中断处理程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ledc_isr_register(ledc_fade_isr, <span class="hljs-literal">NULL</span>, ESP_INTR_FLAG_IRAM, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><ul><li>使用<code>ledc_isr_register</code>函数注册中断处理程序。</li><li><code>ledc_fade_isr</code>：中断处理函数。</li><li><code>ESP_INTR_FLAG_IRAM</code>：确保中断处理函数在 IRAM 中执行。</li></ul><h3 id="8-启用渐变功能"><a href="#8-启用渐变功能" class="headerlink" title="8. 启用渐变功能"></a>8. 启用渐变功能</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ledc_fade_func_install(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><ul><li>使用<code>ledc_fade_func_install</code>函数启用渐变功能。</li></ul><h3 id="9-设置渐变参数并启动渐变"><a href="#9-设置渐变参数并启动渐变" class="headerlink" title="9. 设置渐变参数并启动渐变"></a>9. 设置渐变参数并启动渐变</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">ledc_set_fade_with_time(LEDC_MODE, LEDC_CHANNEL, <span class="hljs-number">1023</span>, <span class="hljs-number">1000</span>);<br>ledc_fade_start(LEDC_MODE, LEDC_CHANNEL, LEDC_FADE_NO_WAIT);<br></code></pre></td></tr></table></figure><ul><li>使用<code>ledc_set_fade_with_time</code>函数设置渐变参数。</li><li>使用<code>ledc_fade_start</code>函数启动渐变。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述代码，我们可以轻松地在 ESP32-S3 上实现对 LED 的 PWM 控制，从而控制 LED 的亮度。这个示例展示了如何使用 ESP-IDF 提供的 LEDC 驱动程序进行基本的操作，包括定时器配置、通道配置和改变 PWM 信号。你可以根据实际需求，进一步扩展这个示例，比如控制多个 LED 或实现更复杂的渐变效果。</p><p>希望这篇博客笔记对你有所帮助！如果你有任何问题或建议，欢迎在评论区留言。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32s3/api-reference/peripherals/ledc.html">LED PWM 控制器 - ESP32-S3 - — ESP-IDF 编程指南 v5.4.1 文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esp32</tag>
      
      <tag>esp-idf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 ESP32 内置温度传感器读取温度值</title>
    <link href="/posts/c55d1163.html"/>
    <url>/posts/c55d1163.html</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在物联网（IoT）设备中，环境温度监测是一个常见的需求。ESP32 开发板集成了一个内部温度传感器，可以方便地用于温度监测应用。了解如何使用 ESP-IDF 框架中的<code>temperature_sensor</code>驱动程序来读取 ESP32 的内部温度传感器数据。</p><span id="more"></span><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我们将使用 ESP-IDF 提供的示例代码来演示如何读取 ESP32 的内部温度传感器数据。以下是完整的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/temperature_sensor.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">// 初始化温度传感器，设置预期的温度范围为 10~50℃</span><br>  ESP_LOGI(TAG, <span class="hljs-string">&quot;Install temperature sensor, expected temp range: 10~50 ℃&quot;</span>);<br>  <span class="hljs-type">temperature_sensor_handle_t</span> temp_sensor = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-type">temperature_sensor_config_t</span> temp_sensor_config = TEMPERATURE_SENSOR_CONFIG_DEFAULT(<span class="hljs-number">10</span>, <span class="hljs-number">50</span>);<br>  ESP_ERROR_CHECK(temperature_sensor_install(&amp;temp_sensor_config, &amp;temp_sensor));<br><br>  <span class="hljs-comment">// 启用温度传感器</span><br>  ESP_LOGI(TAG, <span class="hljs-string">&quot;Enable temperature sensor&quot;</span>);<br>  ESP_ERROR_CHECK(temperature_sensor_enable(temp_sensor));<br><br>  <span class="hljs-comment">// 读取温度值并打印</span><br>  ESP_LOGI(TAG, <span class="hljs-string">&quot;Read temperature&quot;</span>);<br>  <span class="hljs-type">float</span> tsens_value;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 官网这里只循环了 20 次</span><br>      ESP_ERROR_CHECK(temperature_sensor_get_celsius(temp_sensor, &amp;tsens_value));<br>      ESP_LOGI(TAG, <span class="hljs-string">&quot;Temperature value %.02f ℃&quot;</span>, tsens_value);<br>      vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">1000</span>)); <span class="hljs-comment">// 每秒读取一次</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="1-包含头文件"><a href="#1-包含头文件" class="headerlink" title="1. 包含头文件"></a>1. 包含头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/temperature_sensor.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br></code></pre></td></tr></table></figure><p><code>driver/temperature_sensor.h</code>：包含温度传感器驱动程序的 API 声明。</p><p><code>esp_log.h</code>：包含日志记录功能。</p><p><code>freertos/FreeRTOS.h</code> 和 <code>freertos/task.h</code>：包含 FreeRTOS 任务管理功能。</p><h3 id="2-定义日志标签"><a href="#2-定义日志标签" class="headerlink" title="2. 定义日志标签"></a>2. 定义日志标签</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* TAG = <span class="hljs-string">&quot;example&quot;</span>;<br></code></pre></td></tr></table></figure><p>定义了一个日志标签，用于标识日志信息的来源。</p><h3 id="3-初始化温度传感器"><a href="#3-初始化温度传感器" class="headerlink" title="3. 初始化温度传感器"></a>3. 初始化温度传感器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Install temperature sensor, expected temp range: 10~50 ℃&quot;</span>);<br><span class="hljs-type">temperature_sensor_handle_t</span> temp_sensor = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">temperature_sensor_config_t</span> temp_sensor_config = TEMPERATURE_SENSOR_CONFIG_DEFAULT(<span class="hljs-number">10</span>, <span class="hljs-number">50</span>);<br>ESP_ERROR_CHECK(temperature_sensor_install(&amp;temp_sensor_config, &amp;temp_sensor));<br></code></pre></td></tr></table></figure><p><code>temperature_sensor_config_t temp_sensor_config = TEMPERATURE_SENSOR_CONFIG_DEFAULT(10, 50);</code>：创建一个默认的温度传感器配置结构体，并设置预期的温度范围为 10 到 50 摄氏度。</p><p><code>temperature_sensor_install(&amp;temp_sensor_config, &amp;temp_sensor);</code>：根据配置初始化温度传感器，并获取传感器句柄。</p><h3 id="4-启用温度传感器"><a href="#4-启用温度传感器" class="headerlink" title="4. 启用温度传感器"></a>4. 启用温度传感器</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Enable temperature sensor&quot;</span>);<br>ESP_ERROR_CHECK(temperature_sensor_enable(temp_sensor));<br></code></pre></td></tr></table></figure><p><code>temperature_sensor_enable(temp_sensor);</code>：启用已初始化的温度传感器。</p><h3 id="5-读取温度值"><a href="#5-读取温度值" class="headerlink" title="5. 读取温度值"></a>5. 读取温度值</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Read temperature&quot;</span>);<br><span class="hljs-type">float</span> tsens_value;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>  ESP_ERROR_CHECK(temperature_sensor_get_celsius(temp_sensor, &amp;tsens_value));<br>  ESP_LOGI(TAG, <span class="hljs-string">&quot;Temperature value %.02f ℃&quot;</span>, tsens_value);<br>  vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">1000</span>)); <span class="hljs-comment">// 每秒读取一次</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在一个无限循环中，使用<code>temperature_sensor_get_celsius</code>函数读取当前温度值，并通过<code>ESP_LOGI</code>打印出来。</p><p><code>vTaskDelay(pdMS_TO_TICKS(1000));</code>：设置任务延迟 1 秒，以便每秒读取一次温度。</p><h2 id="温度传感器概述"><a href="#温度传感器概述" class="headerlink" title="温度传感器概述"></a>温度传感器概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ESP32 内置传感器，用于测量芯片内部的温度。该温度传感器模组包含一个 8 位 Sigma-Delta 模拟-数字转换器（ADC）和一个数字-模拟转换器（DAC），可以补偿测量结果，减少温度测量的误差。</p><h3 id="预定义测量范围及误差"><a href="#预定义测量范围及误差" class="headerlink" title="预定义测量范围及误差"></a>预定义测量范围及误差</h3><table><thead><tr><th>预定义测量范围 (°C)</th><th>测量误差 (°C)</th></tr></thead><tbody><tr><td>50 ~ 125</td><td>&lt; 3</td></tr><tr><td>20 ~ 100</td><td>&lt; 2</td></tr><tr><td>-10 ~ 80</td><td>&lt; 1</td></tr><tr><td>-30 ~ 50</td><td>&lt; 2</td></tr><tr><td>-40 ~ 20</td><td>&lt; 3</td></tr></tbody></table><h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><ol><li>资源分配：</li></ol><p>通过<code>temperature_sensor_config_t</code>结构体设置温度范围。</p><p>使用<code>temperature_sensor_install</code>函数安装温度传感器，并获取传感器句柄。</p><ol start="2"><li>启用及禁用温度传感器：</li></ol><p>使用<code>temperature_sensor_enable</code>启用温度传感器。</p><p>使用<code>temperature_sensor_disable</code>禁用温度传感器。</p><ol start="3"><li>获取测量的温度值：</li></ol><p>使用<code>temperature_sensor_get_celsius</code>获取实时温度值。</p><ol start="4"><li>电源管理：</li></ol><p>温度传感器不使用 APB 时钟，无论是否激活电源管理，温度传感器仍可以继续工作。</p><ol start="5"><li>线程安全：</li></ol><p>温度传感器驱动程序通常只在一个任务中调用，如果要在不同任务中使用，需要设置额外的锁进行保护。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>温度传感器测量的是芯片内部的温度，而不是环境温度。</p><p>安装温度传感器失败时，可能会出现错误信息<code>the boundary you gave cannot meet the range of internal temperature sensor</code>，这通常是由于配置的温度范围超出了预定义的测量范围。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述代码，我们可以轻松地在 ESP32 上实现对内部温度传感器的读取。这个示例展示了如何使用 ESP-IDF 提供的温度传感器驱动程序进行基本的操作，包括初始化、启用和读取温度值。你可以根据实际需求，进一步扩展这个示例，比如将温度数据发送到云端或触发特定的动作。</p><p>希望这篇博客笔记对你有所帮助！如果你有任何问题或建议，欢迎在评论区留言。</p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32s3/api-reference/peripherals/temp_sensor.html">温度传感器</a></li><li><a href="https://github.com/espressif/esp-idf/blob/v5.4.1/examples/peripherals/temperature_sensor/temp_sensor/main/temp_sensor_main.c"><strong>temp_sensor_main.c</strong></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esp32</tag>
      
      <tag>esp-idf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>28BYJ-48 步进电机</title>
    <link href="/posts/b82a2466.html"/>
    <url>/posts/b82a2466.html</url>
    
    <content type="html"><![CDATA[<p>28BYJ-48 是一款常见的五线四相小型步进电机，广泛应用于 Arduino 、 STM32 等微控制器平台的教学和实验项目中。以下是对该电机的详细讲解，包括其结构、工作原理、控制方式以及控制原理图。</p><span id="more"></span><h2 id="一、28BYJ-48-步进电机简介"><a href="#一、28BYJ-48-步进电机简介" class="headerlink" title="一、28BYJ-48 步进电机简介"></a>一、28BYJ-48 步进电机简介</h2><table><thead><tr><th>型号</th><th>28BYJ48</th></tr></thead><tbody><tr><td>工作电压</td><td>5V</td></tr><tr><td>直径</td><td>28mm</td></tr><tr><td>减速比</td><td>1:64</td></tr><tr><td>驱动方式</td><td>ULN2003</td></tr><tr><td>相电阻</td><td>50±10%</td></tr><tr><td>步进角度</td><td>5.625°&#x2F;64</td></tr></tbody></table><p>型号含义：</p><ul><li>28：电机的最大外径为 28 毫米</li><li>B：表示步进电机（Stepper Motor）</li><li>Y：表示永磁式（Permanent Magnet）</li><li>J：表示减速型（Geared）</li><li>48：表示四相八拍</li></ul><p>主要参数：</p><ul><li>工作电压：5V</li><li>步进角度：5.625°&#x2F;步（未减速）</li><li>减速比：1:64</li><li>每圈步数：512 步（8 拍模式）</li></ul><h2 id="二、结构与工作原理"><a href="#二、结构与工作原理" class="headerlink" title="二、结构与工作原理"></a>二、结构与工作原理</h2><p>28BYJ-48 是一种单极性五线四相步进电机，内部包含四个绕组（A、B、C、D），通过 ULN2003 驱动模块控制。电机的五根引线分别为：</p><ul><li>红色：公共电源线（VCC）</li><li>蓝色、粉色、黄色、橙色：对应四个相位的控制线</li></ul><p>电机内部通过齿轮减速机构实现高扭矩输出，适合低速精密控制。每次通电一个相位，电机转子会转动一个固定的角度，称为“步距角”。通过控制通电的相位顺序，可以实现电机的正转和反转。</p><h2 id="三、控制方式"><a href="#三、控制方式" class="headerlink" title="三、控制方式"></a>三、控制方式</h2><p>28BYJ-48 步进电机常用的控制方式有：</p><ul><li>单相激励（Single-Coil Excitation）：每次仅通电一个相位，功耗低，但扭矩小。</li><li>双相激励（Dual-Coil Excitation）：每次同时通电两个相位，扭矩大，功耗高。</li><li>混合激励（Half-Step Excitation）：交替进行单相和双相激励，步进角度减半，运行更平稳。</li></ul><p>控制电机的转向只需改变相位的通电顺序。例如，顺时针顺序为 A→B→C→D，逆时针则为 D→C→B→A。</p><h2 id="四、应用与注意事项"><a href="#四、应用与注意事项" class="headerlink" title="四、应用与注意事项"></a>四、应用与注意事项</h2><p>应用领域：</p><ul><li>自动控制系统</li><li>打印机、绘图仪</li><li>机器人</li><li>摄像头云台</li><li>智能家居设备</li></ul><p>注意事项：</p><ol><li>确保电源电压稳定在 5V，防止电压波动影响电机性能。</li><li>控制信号的频率不宜过高，避免电机失步或过热。</li><li>在使用 ULN2003 驱动模块时，注意其最大电流限制，避免过载。</li></ol><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p><a href="https://github.com/bubao/esp32-step-motor">esp32-step-motor</a></p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EC11 编码器</title>
    <link href="/posts/97e1f1a5.html"/>
    <url>/posts/97e1f1a5.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>EC11 编码器 是一种常用的旋转式机械编码器，广泛用于嵌入式系统、电子产品中的人机交互（如音量调节、菜单选择等）。</p><ul><li>类型：增量式旋转编码器</li><li>输出：双路脉冲信号（A 相和 B 相），带按键（开关）功能</li><li>常见型号：EC11E15244G1、EC11E18244A8 等</li></ul><span id="more"></span><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>EC11 是一种机械式增量编码器，主要通过内部触点的通断组合来产生 A 相与 B 相信号：</p><p>顺时针旋转：A 相先于 B 相变化</p><p>逆时针旋转：B 相先于 A 相变化</p><h3 id="相位波形"><a href="#相位波形" class="headerlink" title="相位波形"></a>相位波形</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">顺时针 (CW)：<br>A: ──▁▁────▁▁────<br>B: ─▁▁────▁▁─────<br><br>逆时针 (CCW)：<br>A: ─▁▁────▁▁─────<br>B: ──▁▁────▁▁────<br></code></pre></td></tr></table></figure><p>每一次完整的点击（”咔哒”声）通常包含多个跳变（例如 2 个或 4 个脉冲），取决于内部结构。</p><h2 id="引脚说明"><a href="#引脚说明" class="headerlink" title="引脚说明"></a>引脚说明</h2><p>标准 EC11 编码器共有 5 个引脚，分布如下：</p><table><thead><tr><th>引脚编号</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>SW（按键）</td><td>下压后闭合</td></tr><tr><td>2</td><td>GND（地）</td><td>通常与 MCU 的 GND 相接</td></tr><tr><td>3</td><td>DT（B 相）</td><td>编码器信号输出</td></tr><tr><td>4</td><td>CLK（A 相）</td><td>编码器信号输出</td></tr><tr><td>5</td><td>+ 按键公共端</td><td>通常接上拉电阻或 VCC</td></tr></tbody></table><blockquote><p>注意：有的模块使用 SW、CLK、DT 标记，有的用 A、B 表示信号输出线。</p></blockquote><h2 id="接线示例（以-Arduino-为例）"><a href="#接线示例（以-Arduino-为例）" class="headerlink" title="接线示例（以 Arduino 为例）"></a>接线示例（以 Arduino 为例）</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">EC11 编码器引脚  -&gt; Arduino<br>CLK（A 相）      -&gt; D2<br>DT（B 相）       -&gt; D3<br>SW（按键）       -&gt; D4<br>GND              -&gt; GND<br>+                -&gt; 5V（或通过上拉）<br></code></pre></td></tr></table></figure><h2 id="代码示例（Arduino）"><a href="#代码示例（Arduino）" class="headerlink" title="代码示例（Arduino）"></a>代码示例（Arduino）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLK 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DT 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SW 4</span><br><br><span class="hljs-type">int</span> lastStateCLK;<br><span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">pinMode</span>(CLK, INPUT);<br><span class="hljs-built_in">pinMode</span>(DT, INPUT);<br><span class="hljs-built_in">pinMode</span>(SW, INPUT_PULLUP);<br><br>lastStateCLK = <span class="hljs-built_in">digitalRead</span>(CLK);<br>Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> currentStateCLK = <span class="hljs-built_in">digitalRead</span>(CLK);<br><br><span class="hljs-keyword">if</span> (currentStateCLK != lastStateCLK) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">digitalRead</span>(DT) != currentStateCLK) &#123;<br>    counter++;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    counter--;<br>  &#125;<br>  Serial.<span class="hljs-built_in">println</span>(counter);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">digitalRead</span>(SW) == LOW) &#123;<br>  Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Button Pressed&quot;</span>);<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">200</span>); <span class="hljs-comment">// 防抖</span><br>&#125;<br><br>lastStateCLK = currentStateCLK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>音量旋钮</p><p>菜单滚动与选择</p><p>数值调节器（如电源电压设定）</p><p>机械设备输入控制器</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>防抖动：EC11 是机械接触式，需软硬件防抖处理</p><p>解析精度：依据脉冲数可提升旋转解析度</p><p>按键寿命：机械按键部分磨损较快，一般寿命约 3 万次</p><p>旋转寿命：通常 EC11 的旋转寿命为 3~10 万圈</p><h2 id="附加资料"><a href="#附加资料" class="headerlink" title="附加资料"></a>附加资料</h2><p><a href="https://github.com/bubao/esp32-ec11-encoder">esp32-ec11-encoder</a></p><p>可搭配 <code>Encoder</code> 库（Arduino）或直接读取 GPIO 实现</p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置 ESP-IDF 开发环境</title>
    <link href="/posts/8e2f2a51.html"/>
    <url>/posts/8e2f2a51.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将详细介绍如何在 VSCode 中配置 ESP-IDF 开发环境，适用于 ESP32 系列芯片的开发者。通过本教程，您将学会如何安装必要工具、获取 ESP-IDF、配置环境变量以及设置 VSCode 开发环境。</p><span id="more"></span><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装必要工具"><a href="#安装必要工具" class="headerlink" title="安装必要工具"></a>安装必要工具</h3><p>首先，安装 CMake、Ninja 编译工具以及 Python：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install cmake ninja dfu-util python3<br></code></pre></td></tr></table></figure><p>为了加速编译，建议安装 <code>ccache</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install ccache<br></code></pre></td></tr></table></figure><hr><h3 id="获取-ESP-IDF"><a href="#获取-ESP-IDF" class="headerlink" title="获取 ESP-IDF"></a>获取 ESP-IDF</h3><p>在开始开发之前，需要获取乐鑫提供的 ESP-IDF 软件库。</p><ol><li>打开终端，切换到您希望保存 ESP-IDF 的工作目录：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/esp<br>cd ~/esp<br></code></pre></td></tr></table></figure><ol start="2"><li>克隆 ESP-IDF 仓库：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone -b v5.3.1 --recursive https://github.com/espressif/esp-idf.git<br></code></pre></td></tr></table></figure><ol start="3"><li>如果下载中断，可以使用以下命令继续下载：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule update --init --recursive<br></code></pre></td></tr></table></figure><hr><h3 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h3><p>ESP-IDF 需要一系列工具支持开发。以下是安装步骤：</p><ol><li>切换到 ESP-IDF 目录：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/esp/esp-idf<br></code></pre></td></tr></table></figure><ol start="2"><li>设置 GitHub 资源镜像地址（可选）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export IDF_GITHUB_ASSETS=&quot;dl.espressif.com/github_assets&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>安装工具链：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./install.sh esp32,esp32s3<br></code></pre></td></tr></table></figure><hr><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>为了方便使用 ESP-IDF，需要配置环境变量。</p><ol><li>在 shell 配置文件（如 <code>.profile</code>、<code>.bashrc</code> 或 <code>.zprofile</code>）中添加以下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias get_idf=&#x27;. $HOME/esp/esp-idf/export.sh&#x27;<br></code></pre></td></tr></table></figure><ol start="2"><li>刷新配置文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source ~/.bashrc  # 根据实际文件路径替换<br></code></pre></td></tr></table></figure><ol start="3"><li>使用 <code>get_idf</code> 命令快速激活 ESP-IDF 环境：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">get_idf<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：不建议直接将 <code>export.sh</code> 添加到 shell 配置文件中，以免影响其他终端会话。</p><hr><h2 id="配置-VSCode-开发-ESP32"><a href="#配置-VSCode-开发-ESP32" class="headerlink" title="配置 VSCode 开发 ESP32"></a>配置 VSCode 开发 ESP32</h2><h3 id="安装-Clangd-插件"><a href="#安装-Clangd-插件" class="headerlink" title="安装 Clangd 插件"></a>安装 Clangd 插件</h3><p>在 VSCode 中安装 <code>clangd</code> 插件以支持代码补全和语法检查。</p><h3 id="安装-ESP-专用-Clangd"><a href="#安装-ESP-专用-Clangd" class="headerlink" title="安装 ESP 专用 Clangd"></a>安装 ESP 专用 Clangd</h3><ol><li>使用以下命令安装 ESP 专用的 <code>clangd</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">idf_tools.py install esp-clang<br></code></pre></td></tr></table></figure><ol start="2"><li>查找 <code>clangd</code> 的完整路径：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree ~/.espressif -f | grep &#x27;clangd&#x27;<br></code></pre></td></tr></table></figure><ol start="3"><li>将路径添加到项目的 <code>.vscode/settings.json</code> 文件中：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;--enable-config&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-log=verbose&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;-pretty&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;--background-index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;--compile-commands-dir=build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;--query-driver=**&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clangd.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Users/bubao/.espressif/tools/esp-clang/16.0.1-fe4f10a809/esp-clang/bin/clangd&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h3 id="配置-clangd"><a href="#配置-clangd" class="headerlink" title="配置 .clangd"></a>配置 <code>.clangd</code></h3><p>在项目根目录下创建 <code>.clangd</code> 文件，添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">CompileFlags:</span><br>  <span class="hljs-attr">Remove:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-fno-tree-switch-conversion</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-fno-shrink-wrap</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-mtext-section-literals</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-mlongcalls</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-fstrict-volatile-bitfields</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">-march=rv32imac_zicsr_zifencei</span><br></code></pre></td></tr></table></figure><p>如果不想在项目中创建 <code>.clangd</code> 文件，可以在全局配置文件中添加上述内容：</p><ul><li>macOS: <code>~/Library/Preferences/clangd/config.yaml</code></li><li>Windows: <code>C:\Users\Bob\AppData\Local\clangd\config.yaml</code></li><li>Linux: <code>$XDG_CONFIG_HOME/clangd/config.yaml</code> 或 <code>~/.config/clangd/config.yaml</code></li></ul><hr><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32s3/get-started/linux-macos-setup.html">Linux 和 macOS 平台工具链的标准设置</a></li><li><a href="https://github.com/espressif/esp-idf/issues/6721#issuecomment-2231830343">ESP-IDF 官方问题讨论</a></li><li><a href="https://clangd.llvm.org/config.html#files">Clangd 配置文档</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>esp32</tag>
      
      <tag>esp-idf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 配置 K230 的开发环境</title>
    <link href="/posts/4d3ec22c.html"/>
    <url>/posts/4d3ec22c.html</url>
    
    <content type="html"><![CDATA[<p>在开发立创庐山派 CanMV-K230 项目时，使用 VSCode 作为开发环境可以大大提高效率。本文将介绍如何在 VSCode 中配置 CanMV-K230 的开发环境，以便更好地进行 MicroPython 开发。</p><span id="more"></span><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先，我们需要安装 <a href="https://marketplace.visualstudio.com/items?itemName=RT-Thread.rt-thread-micropython">rt-thread-micropython</a> 插件。这个插件提供了对 MicroPython 的支持，使我们能够在 VSCode 中编写和调试 MicroPython 代码。</p><h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><p>接下来，我们需要获取相关的源码。打开终端并执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir mpy<br>cd mpy<br>git clone https://github.com/micropython/micropython.git<br>git clone https://github.com/openmv/openmv.git<br>git clone https://github.com/canmv-k230/canmv.git<br></code></pre></td></tr></table></figure><p>上述命令将会克隆 MicroPython、OpenMV 和 CanMV-K230 的源码到本地。</p><h2 id="配置-VSCode"><a href="#配置-VSCode" class="headerlink" title="配置 VSCode"></a>配置 VSCode</h2><p>为了使 VSCode 能够正确地识别和补全 MicroPython 代码，我们需要进行一些配置。打开 VSCode 的设置文件（<code>settings.json</code>），并添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// ...existing code...</span><br>    <span class="hljs-attr">&quot;python.autoComplete.extraPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;你的位置/mpy/micropython-1.24.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/mpy/canmv/resources&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/mpy/openmv/scripts/libraries&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/.vscode/extensions/rt-thread.rt-thread-micropython-1.0.11/microExamples/code-completion&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;python.linting.pylintArgs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;--init-hook&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;sys.path.append(&#x27;你的位置/mpy/micropython-1.24.1/lib/micropython-lib/micropython&#x27;)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;import sys; sys.path.append(&#x27;你的位置/.vscode/extensions/rt-thread.rt-thread-micropython-1.0.11/microExamples/code-completion&#x27;)&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;python.analysis.extraPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;你的位置/mpy/micropython-1.24.1/lib/micropython-lib/micropython&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/mpy/canmv/resources&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/mpy/openmv/scripts/libraries&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;你的位置/.vscode/extensions/rt-thread.rt-thread-micropython-1.0.11/microExamples/code-completion&quot;</span>    <br>    <span class="hljs-punctuation">]</span><br>    <span class="hljs-comment">// ...existing code...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这些配置将会告诉 VSCode 在代码补全和分析时，额外包含这些路径。</p><h2 id="重启-VSCode"><a href="#重启-VSCode" class="headerlink" title="重启 VSCode"></a>重启 VSCode</h2><p>完成上述配置后，重启 VSCode 使配置生效。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>在配置和使用过程中，可能会遇到一些常见问题。以下是一些可能的解决方案：</p><ol><li><strong>无法识别 MicroPython 库</strong>：确保 <code>settings.json</code> 中的路径配置正确，并且这些路径下确实存在相应的库文件。</li><li><strong>代码补全不工作</strong>：尝试重启 VSCode，并确保已安装最新版本的 rt-thread-micropython 插件。</li><li><strong>Linting 报错</strong>：检查 <code>pylintArgs</code> 配置是否正确，并确保路径中包含所需的库。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上步骤，我们已经成功配置了 VSCode 以支持 CanMV-K230 的 MicroPython 开发环境。这样可以大大提高开发效率，并且能够利用 VSCode 强大的编辑和调试功能。</p><blockquote><p>注意：由于 MicroPython 和 OpenMV 的版本较新，可能会出现提示中存在的 API，CanMV-K230 不支持的情况。请等待嘉楠官方更新可用的依赖。</p></blockquote><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://blog.csdn.net/2301_80476876/article/details/144949977">VScode 开发 MicroPython 的配置（部分详细过程）</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K230</tag>
      
      <tag>MicroPython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在立创庐山派上运行 YOLOv8 物体检测系统</title>
    <link href="/posts/75038298.html"/>
    <url>/posts/75038298.html</url>
    
    <content type="html"><![CDATA[<p>最近入手了一块立创庐山派，想测试一下视觉检测的效果。由于我只买了板子，没有购买屏幕，而 CanMV-IDE 又没有 macOS 版本，用 OpenMv-IDE 也不能下发文件到板子上，我又不想拔卡插到电脑上。</p><p>所以我决定直接通过命令行工具与庐山派通信，并使用 Wi-Fi 和 MQTT 通信将识别结果发送到服务器。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，请确保已经完成以下准备工作：</p><p><strong>获取代码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/bubao/CanMV-K230-Demo.git<br></code></pre></td></tr></table></figure><p><strong>安装 Python 3.x</strong>：可以从 <a href="https://www.python.org/downloads/">Python 官网</a> 下载并安装 Python 3.x。</p><p><strong>配置虚拟环境</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd CanMV-K230-Demo<br>python3.9 -m venv venv<br>source venv/bin/activate<br></code></pre></td></tr></table></figure><p><strong>安装必要的工具</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install adafruit-ampy mpremote<br><span class="hljs-built_in">sudo</span> apt-get install screen  <span class="hljs-comment"># 对于 Debian/Ubuntu 系统</span><br>brew install screen          <span class="hljs-comment"># 对于 macOS 系统</span><br></code></pre></td></tr></table></figure><h2 id="连接庐山派-CanMV-K230"><a href="#连接庐山派-CanMV-K230" class="headerlink" title="连接庐山派 CanMV-K230"></a>连接庐山派 CanMV-K230</h2><p>首先，通过 USB 线将庐山派 CanMV-K230 连接到电脑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">lsusb</span><br>Bus 001 Device 009: ID 1209:abd1 1209 CanMV  Serial: 001000000<br></code></pre></td></tr></table></figure><p>使用以下命令查看挂载位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /dev/tty* | grep <span class="hljs-string">&#x27;001000000&#x27;</span></span><br>/dev/tty.usbmodem0010000001<br></code></pre></td></tr></table></figure><p>在项目文件夹下创建 <code>.ampy</code> 文件，并加入以下内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">AMPY_PORT=/dev/tty.usbmodem0010000001<br>AMPY_BAUD=115200<br>AMPY_DELAY=0.5<br></code></pre></td></tr></table></figure><p>使用 <code>ampy</code> 测试一下是否能正常连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy <span class="hljs-built_in">ls</span> /sdcard<br></code></pre></td></tr></table></figure><p>如果能正常显示 <code>sdcard</code> 分区下的文件和文件夹，则说明连接成功。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>复制配置文件模板并进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> .config.example.json .config.json<br></code></pre></td></tr></table></figure><p>配置文件包含 WiFi、YOLO、MQTT 和 NTP 的配置信息。根据实际情况修改配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;wifi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否开启 WiFi</span><br>    <span class="hljs-attr">&quot;networks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ssid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;passwd1&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ssid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;passwd1&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;yolo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否开启 YOLO</span><br>    <span class="hljs-attr">&quot;task_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;detect&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;image&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;bicycle&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;car&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;motorcycle&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...existing labels...</span><br>      <span class="hljs-string">&quot;toothbrush&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rgb888p_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1920</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1080</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;kmodel_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/sdcard/examples/kmodel/yolov8n_320.kmodel&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;model_input_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">320</span><span class="hljs-punctuation">,</span> <span class="hljs-number">320</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;display_size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1920</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1080</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;display_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hdmi&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;conf_thresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nms_thresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.45</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mask_thresh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_boxes_num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;debug_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mqtt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否开启 MQTT</span><br>    <span class="hljs-attr">&quot;broker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.0.3&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1883</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;topic_detection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/yolo/detection&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;client_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CanMV_k230_yolo_001&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;who&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;me&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ntptime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 是否开启对时</span><br>    <span class="hljs-attr">&quot;ntp_delta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3155644800</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ntp6.aliyun.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>主函数执行以下步骤：</p><ol><li>加载配置。</li><li>检查所需的配置（WiFi、YOLO、MQTT）是否存在并启用，这个项目里必须开启这三项。</li><li>测试 WiFi 连接。</li><li>如果启用了 NTP 时间同步，则同步时间。NTP 不启动也不会影响后续的操作。</li><li>初始化 MQTT 客户端并连接到 MQTT 代理。</li><li>初始化 YOLO 模型和处理管道。</li><li>每秒处理帧，进行目标检测，并将结果发送到 MQTT 代理。</li><li>处理异常并释放掉处理管道、MQTT 和 YOLO 的资源。</li></ol><blockquote><p>请注意，不要在 JSON 文件里加注释，可能会导致解析失败。</p></blockquote><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>立创庐山派固件缺少 <code>ntptime</code>和<code>umqtt.simple</code>，需要使用<code>mpremote</code>手动安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mpremote connect /dev/tty.usbmodem0010000001 mip install ntptime<br>mpremote connect /dev/tty.usbmodem0010000001 mip install umqtt.simple<br></code></pre></td></tr></table></figure><h2 id="上传文件到庐山派-CanMV-K230"><a href="#上传文件到庐山派-CanMV-K230" class="headerlink" title="上传文件到庐山派 CanMV-K230"></a>上传文件到庐山派 CanMV-K230</h2><p>使用 <code>ampy</code> 工具可以方便地将文件上传到庐山派 CanMV-K230。使用以下命令将文件上传到板子上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy put src /sdcard/src <span class="hljs-comment"># 这个会有一点久</span><br>ampy put .config.json /sdcard/.config.json<br>ampy put main.py /sdcard/main.py<br>ampy put boot.py /sdcard/boot.py <span class="hljs-comment"># 空文件，不传也行</span><br></code></pre></td></tr></table></figure><h2 id="使用-screen-查看日志"><a href="#使用-screen-查看日志" class="headerlink" title="使用 screen 查看日志"></a>使用 screen 查看日志</h2><p>可以使用 screen 工具连接到庐山派 CanMV-K230 并查看日志输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S K230 /dev/cu.usbmodem0010000001 115200<br></code></pre></td></tr></table></figure><p>要退出 screen 会话，可以按 <code>Ctrl+A</code>，然后按 <code>K</code>，最后按 <code>Y</code> 确认退出。</p><blockquote><p>每次进入都会 soft reset，可以按 <code>Ctrl+D</code> 手动 soft reset，如果正在运行，也可以用 <code>Ctrl+C</code> 终止运行</p></blockquote><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>将准备好的文件都拷贝到庐山派上，项目就能正常启动了。只要板子能正常连接到 Wi-Fi 和 MQTT，就能从同样连接到 MQTT 服务器并订阅了对应 topic 的 MQTTX 上看到输出。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// Topic: /yolo/detectionQoS: 0</span><br><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;fps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;confidence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.5664063</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;bbox&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">896.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1277.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">701.0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment">// Topic: /yolo/detectionQoS: 0</span><br><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;fps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18.51852</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;confidence&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.8510742</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;bbox&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">261.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1911.0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1042.0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;person&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>通过以上步骤，可以在立创庐山派上运行基于 YOLOv8 的物体检测系统，并通过 MQTT 协议将检测结果发布到指定的主题。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K230</tag>
      
      <tag>MicroPython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用命令行连接开发 K230 教程</title>
    <link href="/posts/228fa1ed.html"/>
    <url>/posts/228fa1ed.html</url>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在命令行连接庐山派 CanMV-K230，并实现上传、下载、使用 mip 安装第三方包以及使用 screen 连接查看日志等操作。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在开始之前，请确保你已经完成以下准备工作：</p><p><strong>安装 Python 3.x</strong>：</p><p>你可以从 <a href="https://www.python.org/downloads/">Python 官网</a> 下载并安装 Python 3.x。</p><p>配置 venv 环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd project # 假设这是项目目录<br>python3.9 -m venv venv # 假设使用的是 python3.9，创建 venv 环境<br>source venv/bin/activate # 每次使用这个项目都需要进入项目执行这一句<br></code></pre></td></tr></table></figure><p>安装<code>ampy</code>,<code>mpremote</code>,<code>screen</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install adafruit-ampy<br>pip install mpremote<br><span class="hljs-built_in">sudo</span> apt-get install screen  <span class="hljs-comment"># 对于 Debian/Ubuntu 系统</span><br>brew install screen          <span class="hljs-comment"># 对于 macOS 系统</span><br></code></pre></td></tr></table></figure><p><code>ampy</code>,<code>mpremote</code>,<code>screen</code>的功能：</p><ul><li>ampy 用于上传下载的命令行工具</li><li>screen 是一个终端多路复用器，可以让你在一个终端窗口中运行多个会话。</li><li>mpremote 是一个用于与 MicroPython 设备交互的命令行工具，主要是用来安装<code>mip</code></li></ul><h2 id="配置连接庐山派-CanMV-K230"><a href="#配置连接庐山派-CanMV-K230" class="headerlink" title="配置连接庐山派 CanMV-K230"></a>配置连接庐山派 CanMV-K230</h2><p>首先，通过 USB 线将庐山派 CanMV-K230 连接到电脑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">lsusb</span><br>Bus 001 Device 002: ID 2109:0822 VIA Labs, Inc. USB3.1 Hub<br>Bus 001 Device 004: ID 05e3:0626 Genesys Logic, Inc. USB3.1 Hub<br>Bus 001 Device 006: ID 0b95:1790 ASIX Electronics Corporation AX88179A  Serial: 000000000066F0<br>Bus 001 Device 007: ID 05e3:0749 Genesys Logic, Inc. USB3.0 Card Reader  Serial: 000000001536<br>Bus 001 Device 001: ID 2109:2822 VIA Labs, Inc. USB2.0 Hub<br>Bus 001 Device 009: ID 1209:abd1 1209 CanMV  Serial: 001000000<br>Bus 001 Device 005: ID 048d:5212 Integrated Technology Express, Inc. ITE BillBoard<br>Bus 001 Device 003: ID 05e3:0610 Genesys Logic, Inc. USB2.1 Hub<br>Bus 001 Device 008: ID 2109:8822 VIA Labs, Inc. USB Billboard Device  Serial: 0000000000000001<br>Bus 000 Device 000: ID 2109:0822 VIA Labs, Inc. USB 3.1 Bus<br>Bus 000 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub<br></code></pre></td></tr></table></figure><p>发现<code>ID 1209:abd1 1209 CanMV  Serial: 001000000</code>，可以使用<code>lsusb -v</code>查看详细信息，但是有<code>001000000</code>就够了，使用下面的命令查看挂载位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /dev/tty* | grep <span class="hljs-string">&#x27;001000000&#x27;</span></span><br>/dev/tty.usbmodem0010000001<br></code></pre></td></tr></table></figure><p><code>/dev/tty.usbmodem0010000001</code>在后面连接 CanMV-K230 会用到。</p><h2 id="上传文件到庐山派-CanMV-K230"><a href="#上传文件到庐山派-CanMV-K230" class="headerlink" title="上传文件到庐山派 CanMV-K230"></a>上传文件到庐山派 CanMV-K230</h2><p>使用 ampy 工具可以方便地将文件上传到庐山派 CanMV-K230。首先安装 ampy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install adafruit-ampy<br></code></pre></td></tr></table></figure><p>为了方便使用，建议在项目文件夹下创建<code>.ampy</code>文件，并加入以下内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">AMPY_PORT=/dev/tty.usbmodem0010000001<br>AMPY_BAUD=115200<br>AMPY_DELAY=0.5<br></code></pre></td></tr></table></figure><p>然后使用以下命令将文件上传到板子上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy put &lt;文件名&gt; [目标路径]<br></code></pre></td></tr></table></figure><p>同样地，可以使用 ampy 工具从板子上下载文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy get &lt;文件名&gt; &gt; &lt;本地文件名&gt;<br></code></pre></td></tr></table></figure><h2 id="使用-mip-安装第三方包"><a href="#使用-mip-安装第三方包" class="headerlink" title="使用 mip 安装第三方包"></a>使用 mip 安装第三方包</h2><p>目前庐山派 CanMV-K230 固件并没有支持 mip，需要自己手动安装<code>mpremote</code>，再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install mpremote<br>mpremote connect /dev/tty.usbmodem0010000001 mip --target=<span class="hljs-string">&quot;/sdcard/libs&quot;</span> install mip<br></code></pre></td></tr></table></figure><h2 id="使用-screen-查看日志"><a href="#使用-screen-查看日志" class="headerlink" title="使用 screen 查看日志"></a>使用 screen 查看日志</h2><p>可以使用 screen 工具连接到庐山派 CanMV-K230 并查看日志输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S K230 /dev/cu.usbmodem0010000001 115200<br></code></pre></td></tr></table></figure><p>要退出 screen 会话，可以按<code>Ctrl+A</code>，然后按<code>K</code>，最后按<code>Y</code>确认退出。</p><blockquote><p>每次进入都会 soft reset，可以按<code>Ctrl+D</code>手动 soft reset，如果正在运行，也可以用<code>Ctrl+D</code>终止运行</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>以下是一些常用的命令，帮助你更好地使用庐山派 CanMV-K230：</p><p><strong>上传文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy put &lt;文件名&gt;<br></code></pre></td></tr></table></figure><p><strong>下载文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy get &lt;文件名&gt; &gt; &lt;本地文件名&gt;<br></code></pre></td></tr></table></figure><p><strong>列出文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy <span class="hljs-built_in">ls</span> [目标路径]<br></code></pre></td></tr></table></figure><p><strong>删除文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy <span class="hljs-built_in">rm</span> &lt;文件名&gt;<br></code></pre></td></tr></table></figure><p><strong>运行脚本</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ampy run &lt;脚本名&gt;<br></code></pre></td></tr></table></figure><p><strong>安装 mip 包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mpremote connect /dev/tty.usbmodem0010000001 mip --target=<span class="hljs-string">&quot;/sdcard/libs&quot;</span> install mip<br></code></pre></td></tr></table></figure><p><strong>连接 REPL</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S K230 /dev/cu.usbmodem0010000001 115200<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以在命令行中方便地连接庐山派 CanMV-K230，实现文件的上传、下载，安装第三方包以及查看日志等操作。希望本文对你有所帮助。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>K230</tag>
      
      <tag>MicroPython</tag>
      
      <tag>命令行工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 tauri 手搓一个 Foliate 阅读器</title>
    <link href="/posts/a5355860.html"/>
    <url>/posts/a5355860.html</url>
    
    <content type="html"><![CDATA[<p>自从换了 Mac 电脑之后，一直找不到合适的电子书阅读器，好不容易找到一个支持多格式的 <a href="https://github.com/johnfactotum/foliate">Foliate</a>，却不支持 Mac。没办法只好自己手搓一个了。</p><span id="more"></span><p>在 tauri 的项目地下拉 Foliate</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add https://github.com/johnfactotum/foliate-js src/foliate-js<br></code></pre></td></tr></table></figure><p>修改<code>src-tauri/tauri.conf.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;devPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../src/foliate-js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;distDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../src/foliate-js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;withGlobalTauri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tauri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;reader.html&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run tauri build<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自用笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑白照片修复</title>
    <link href="/posts/a2fe09d4.html"/>
    <url>/posts/a2fe09d4.html</url>
    
    <content type="html"><![CDATA[<p>最近在小🍠上面看到好多手调黑白照片修复的笔记，恰巧之前看过一些 AI 模型也支持黑白照片上色和清晰度修复。</p><span id="more"></span><h2 id="简单方案"><a href="#简单方案" class="headerlink" title="简单方案"></a>简单方案</h2><p>在 <strong>hugging face</strong> 上可以直接使用使用 <a href="https://huggingface.co/spaces/Xintao/GFPGAN">Xintao&#x2F;GFPGAN</a> 和 <a href="https://huggingface.co/spaces/leonelhs/deoldify">leonelhs&#x2F;deoldify</a> 两个 Spaces 在线修复。</p><p>使用技巧如下：</p><ol><li>先使用 <strong>deoldify</strong> 给图片上色</li><li>使用 <strong>GFPGAN</strong> 的 v1.4 模型进行清晰度修复</li></ol><p>颠倒过来依然可行，但是效果不如上面的方式好。</p><h2 id="复杂方案"><a href="#复杂方案" class="headerlink" title="复杂方案"></a>复杂方案</h2><p>还有一种方式是：把上面两个 spaces 的代码抄下来，自己写成命令行工具来使用。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://github.com/jantic/DeOldify">jantic&#x2F;DeOldify</a> : DeOldify github 地址</li><li><a href="https://huggingface.co/spaces/leonelhs/deoldify">leonelhs&#x2F;deoldify</a> : deoldify 的 spaces</li><li><a href="https://github.com/TencentARC/GFPGAN">TencentARC&#x2F;GFPGAN</a> : GFPGAN github 地址</li><li><a href="https://huggingface.co/spaces/Xintao/GFPGAN">GFPGAN: Practical Face Restoration Algorithm</a> : GFPGAN spaces</li><li><a href="https://github.com/piddnad/DDColor">piddnad&#x2F;DDColor</a> : 阿里的上色模型</li><li><a href="https://github.com/leonelhs/face-shine">leonelhs&#x2F;face-shine</a> : 破损照片修复模型的UI</li><li><a href="https://github.com/leonelhs/SuperFace">leonelhs&#x2F;SuperFace</a> : 破损照片修复模型</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次 mysql 升级导致无法连接数据库</title>
    <link href="/posts/34c89562.html"/>
    <url>/posts/34c89562.html</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">SQLSTATE[HY000] [1524] Plugin &#x27;mysql_native_password&#x27; is not loaded<br>mysqli_sql_exception  Plugin &#x27;mysql_native_password&#x27; is not loaded.<br></code></pre></td></tr></table></figure><span id="more"></span><p>上面的报错是因为我权利更新了 archlinux，mysql 顺带更新到最新。</p><p>原因是因为 9 后，mysql 把<code>mysql_native_password</code>从默认配置移除，我们只需要在配置文件中打开即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf"># Enable mysql_native_password plugin<br>[mysqld]<br>mysql_native_password=ON<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端使用 fetch 调用 SSE 服务</title>
    <link href="/posts/3e0444b9.html"/>
    <url>/posts/3e0444b9.html</url>
    
    <content type="html"><![CDATA[<p>最近接触了一些和 chatGPT 类似的模型服务，基本上都和 GPT API 一样使用 SSE 通信。</p><span id="more"></span><p>默认前端的 API 调用 SSE 只能是 GET 请求，当需要使用 body 传递数据时就不太方便，这里使用<code>fetch</code>实现<code>POST</code>请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://192.168.1.11:7860/chat&quot;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-string">&quot;prompt&quot;</span>: <span class="hljs-string">&quot;用小孩子能听懂的话讲清楚什么是微积分&quot;</span>, <span class="hljs-string">&quot;history&quot;</span>: [] &#125;), <span class="hljs-comment">// 将数据作为请求体发送</span><br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> reader = response.<span class="hljs-property">body</span>.<span class="hljs-title function_">getReader</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadableStream</span>(&#123;<br>    <span class="hljs-title function_">start</span>(<span class="hljs-params">controller</span>) &#123;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params"></span>) &#123;<br>        reader.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; value, done &#125;</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (done) &#123;<br>            controller.<span class="hljs-title function_">close</span>();<br>            <span class="hljs-keyword">return</span>;<br>          &#125;<br>          controller.<span class="hljs-title function_">enqueue</span>(value);<br>          <span class="hljs-title function_">push</span>();<br>        &#125;);<br>      &#125;<br>      <span class="hljs-title function_">push</span>();<br>    &#125;,<br>  &#125;);<br>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">stream</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> textDecoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextDecoder</span>();<br>  <span class="hljs-keyword">const</span> readableStreamDefaultReader = stream.<span class="hljs-title function_">getReader</span>();<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">processStream</span>(<span class="hljs-params"></span>) &#123;<br>    readableStreamDefaultReader.<span class="hljs-title function_">read</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; value, done &#125;</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (done) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;End of stream&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(textDecoder.<span class="hljs-title function_">decode</span>(value));<br>      <span class="hljs-title function_">processStream</span>();<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">processStream</span>();<br>&#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地部署中文版 llama.cpp</title>
    <link href="/posts/b2c0ba32.html"/>
    <url>/posts/b2c0ba32.html</url>
    
    <content type="html"><![CDATA[<p>模型：<a href="https://huggingface.co/johnlui/chinese-alpaca-7b-and-13b-quantized">johnlui&#x2F;chinese-alpaca-7b-and-13b-quantized</a></p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/ggerganov/llama.cpp<br><span class="hljs-built_in">cd</span> llama.cpp<br>make<br></code></pre></td></tr></table></figure><p>修改  <code>llama.cpp</code> <code>examples/alpaca.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">./main -m ./models/llama-7b-hf/ggml-model-q4_0.bin \<br> --color  -f prompts/alpaca.txt -ins \<br> -c 2048 --temp 0.2 -t 7 -n 2048 --repeat_penalty 1.3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crontab-ui 管理 crontab</title>
    <link href="/posts/9f836ddb.html"/>
    <url>/posts/9f836ddb.html</url>
    
    <content type="html"><![CDATA[<p>以前在做定时任务的时候，都需要上网查一下怎么配置 crontab。</p><span id="more"></span><p><a href="https://www.npmjs.com/package/crontab-ui">crontab-ui</a> 是一个用 Node.js 编写的 Web 前端 UI 的定时任务管理工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm 可直接安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install crontab-ui -g<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为我喜欢直接使用命令启动，一般不会在命令后加参数，所以一般都是在启动脚本里重命名命令，配置好参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">alias</span> crontabui=<span class="hljs-string">&#x27;CRON_DB_PATH=~/.crontab-ui PORT=39000 crontab-ui&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 12. 连接 Redis</title>
    <link href="/posts/bab8ad7e.html"/>
    <url>/posts/bab8ad7e.html</url>
    
    <content type="html"><![CDATA[<p>和连接 SQLite 一样，这里也使用单例模式和引入模块的方式让 Express 使用 Redis</p><span id="more"></span><h2 id="ioredis"><a href="#ioredis" class="headerlink" title="ioredis"></a>ioredis</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/db/redis.js</span><br><span class="hljs-keyword">const</span> ioredis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ioredis&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Redis</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-title class_">Redis</span>.<span class="hljs-title function_">init</span>(options);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>&#125;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">ioredis</span>(options);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Redis</span>;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// info 数据库单例</span><br><span class="hljs-keyword">const</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../db/redis&quot;</span>).<span class="hljs-title function_">init</span>();<br><br><span class="hljs-comment">// info 数据校验</span><br><span class="hljs-keyword">const</span> &#123; login &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../joi/v1/auth.joi&quot;</span>);<br><br><span class="hljs-comment">// info 通用方法</span><br><span class="hljs-keyword">const</span> &#123; errcode &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../../utils/index&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 安全退出</span><br><span class="hljs-comment"> */</span><br>router.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_">async</span> (req, res, next) =&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> decodeToken = req.<span class="hljs-property">decodeToken</span>;<br><span class="hljs-keyword">await</span> redis.<span class="hljs-title function_">del</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;decodeToken.id&#125;</span>#refresh_token`</span>);<br><span class="hljs-keyword">await</span> redis.<span class="hljs-title function_">del</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;decodeToken.id&#125;</span>#access_token`</span>);<br><span class="hljs-keyword">const</span> &#123; status, body &#125; = <span class="hljs-title function_">errcode</span>(<span class="hljs-number">0</span>);<br>res.<span class="hljs-title function_">status</span>(status).<span class="hljs-title function_">send</span>(body);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">next</span>(error);<br>&#125;<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 11. 连接 Sqlite</title>
    <link href="/posts/a5dc76f1.html"/>
    <url>/posts/a5dc76f1.html</url>
    
    <content type="html"><![CDATA[<p>Express 有第三方链接数据库的中间件，但是因为中间件使用的是依赖注入，就没有编辑器提示，所以更好的方式是使用单例模式，引入模块的方式来实现 Express 连接数据库。</p><p>Node.js 有很多 ORM 模块方便我们操作数据库</p><p>这里我们使用 Prisma 来连接 SQLite</p><span id="more"></span><h2 id="Prisma"><a href="#Prisma" class="headerlink" title="Prisma"></a>Prisma</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i --save prisma@latest<br>npm i --save @prisma/client@latest<br></code></pre></td></tr></table></figure><p>初始化 prisma 项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npx prisma init<br></code></pre></td></tr></table></figure><p>运行后将会在根目录下生成一个<code>prisma/schema.prisma</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs prisma">// This is your Prisma schema file,<br>// learn more about it in the docs: https://pris.ly/d/prisma-schema<br><br>generator client &#123;<br>    provider = &quot;prisma-client-js&quot;<br>    output   = &quot;../.prisma-client&quot; // 将客户端代码生成到根目录下并在 git 中忽略<br>&#125;<br><br>datasource db &#123;<br>    provider = &quot;sqlite&quot;<br>    url      = &quot;file:db/database.db&quot; // 当前文件夹下的 db/database.db<br>&#125;<br><br>/// 用户表<br>model user &#123;<br>    /// The ID of the user<br>    id        String   @id @default(cuid())<br>    /// The name of the user<br>    nickname  String?<br>    /// The email of the user<br>    email     String?<br>    /// The password of the user<br>    password  String?<br>    /// The phone number of the user<br>    phone     String?<br>    /// The account of the user<br>    account   String?<br>    /// createdAt<br>    createdAt DateTime @default(now())<br>    /// updatedAt<br>    updatedAt DateTime @default(now()) @updatedAt()<br><br>    @@unique([email])<br>    @@unique([phone])<br>    @@unique([account])<br>    @@index([email, password])<br>    @@index([phone, password])<br>    @@index([account, password])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/db/prisma.js</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../.prisma-client&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prisma</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrismaClient</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Prisma</span>.<span class="hljs-title function_">init</span>();<br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/routes/v1/auth.js</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// info 数据库单例</span><br><span class="hljs-keyword">const</span> prisma = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../../utils/prisma&quot;</span>);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> &#123; email, password &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-comment">// info 查找用户</span><br><span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">users</span>.<span class="hljs-title function_">findFirst</span>(&#123;<br><span class="hljs-attr">where</span>: &#123;<br>email,<br><span class="hljs-attr">password</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">md5Slat</span>(password)<br>&#125;,<br><span class="hljs-attr">select</span>: &#123;<br><span class="hljs-attr">id</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">email</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">create_time</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">next</span>(error);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="npm-脚本配置"><a href="#npm-脚本配置" class="headerlink" title="npm 脚本配置"></a>npm 脚本配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./bin/www&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 正式环境</span><br><span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run pgs &amp;&amp; nodemon ./bin/www&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 开发环境</span><br><span class="hljs-attr">&quot;p.gs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prisma generate&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 重新生成客户端代码</span><br><span class="hljs-attr">&quot;p.updb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prisma migrate dev&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 同步数据库</span><br><span class="hljs-attr">&quot;p.s&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prisma studio&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// stuido</span><br><span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix .&quot;</span> <span class="hljs-comment">// 格式化</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="gitignore-配置"><a href="#gitignore-配置" class="headerlink" title="gitignore 配置"></a>gitignore 配置</h2><p>因为使用的是 SQLite ，数据库在本地，所以想忽略掉本地数据库。且客户端代码也不提交代 git 中，运行前生成就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs .gitignore"># prisma<br>.prisma-client<br>prisma/db<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 10. 资源上传</title>
    <link href="/posts/5f60f93e.html"/>
    <url>/posts/5f60f93e.html</url>
    
    <content type="html"><![CDATA[<p>数据校验是为了对请求的数据进行数据类型限制，以保证程序能正常运行。原因是如果请求的数据类型不限制，例如，js 中对非数字类型的字段进行数值运算，就会得到 <code>NaN</code>。</p><p>Node.js 数据校验有很多，这里我们使用<code>joi</code></p><span id="more"></span><h2 id="joi"><a href="#joi" class="headerlink" title="joi"></a>joi</h2><h3 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h3><p>我们把所有校验规则按路由源码对应的路径分文件，每个路由文件一个校验文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/joi/v1/auth.joi.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Joi</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;joi&quot;</span>);<br><br><span class="hljs-keyword">const</span> login = <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">object</span>(&#123;<br><span class="hljs-attr">email</span>: <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">string</span>()<br>.<span class="hljs-title function_">email</span>(&#123;<br><span class="hljs-comment">// minDomainSegments: 2,</span><br><span class="hljs-attr">tlds</span>: &#123; <span class="hljs-attr">allow</span>: [<span class="hljs-string">&quot;com&quot;</span>, <span class="hljs-string">&quot;net&quot;</span>] &#125;<br>&#125;).<span class="hljs-title function_">required</span>(),<br>    <span class="hljs-attr">password</span>: <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">string</span>()<br>.<span class="hljs-title function_">length</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">alphanum</span>().<span class="hljs-title function_">required</span>()<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; login &#125;;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// info 数据校验</span><br><span class="hljs-keyword">const</span> &#123; login &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../joi/v1/auth.joi&quot;</span>);<br><br><span class="hljs-comment">// info 通用方法</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">MyError</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../../utils/index&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录</span><br><span class="hljs-comment"> */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// info 检验参数</span><br><span class="hljs-keyword">await</span> login.<span class="hljs-title function_">validateAsync</span>(req.<span class="hljs-property">body</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-number">40001</span>, err);<br>&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">next</span>(error);<br>    &#125;<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 9. 数据校验</title>
    <link href="/posts/ad75c428.html"/>
    <url>/posts/ad75c428.html</url>
    
    <content type="html"><![CDATA[<p>数据校验是为了对请求的数据进行数据类型限制，以保证程序能正常运行。原因是如果请求的数据类型不限制，例如，js 中对非数字类型的字段进行数值运算，就会得到 <code>NaN</code>。</p><p>Node.js 数据校验有很多，这里我们使用<code>joi</code></p><span id="more"></span><h2 id="joi"><a href="#joi" class="headerlink" title="joi"></a>joi</h2><h3 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h3><p>我们把所有校验规则按路由源码对应的路径分文件，每个路由文件一个校验文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/joi/v1/auth.joi.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Joi</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;joi&quot;</span>);<br><br><span class="hljs-keyword">const</span> login = <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">object</span>(&#123;<br><span class="hljs-attr">email</span>: <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">string</span>()<br>.<span class="hljs-title function_">email</span>(&#123;<br><span class="hljs-comment">// minDomainSegments: 2,</span><br><span class="hljs-attr">tlds</span>: &#123; <span class="hljs-attr">allow</span>: [<span class="hljs-string">&quot;com&quot;</span>, <span class="hljs-string">&quot;net&quot;</span>] &#125;<br>&#125;).<span class="hljs-title function_">required</span>(),<br>    <span class="hljs-attr">password</span>: <span class="hljs-title class_">Joi</span>.<span class="hljs-title function_">string</span>()<br>.<span class="hljs-title function_">length</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">alphanum</span>().<span class="hljs-title function_">required</span>()<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; login &#125;;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// info 数据校验</span><br><span class="hljs-keyword">const</span> &#123; login &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../joi/v1/auth.joi&quot;</span>);<br><br><span class="hljs-comment">// info 通用方法</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">MyError</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../../utils/index&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录</span><br><span class="hljs-comment"> */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// info 检验参数</span><br><span class="hljs-keyword">await</span> login.<span class="hljs-title function_">validateAsync</span>(req.<span class="hljs-property">body</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-number">40001</span>, err);<br>&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">next</span>(error);<br>    &#125;<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 8. 权限校验中间件</title>
    <link href="/posts/fcdc8fbe.html"/>
    <url>/posts/fcdc8fbe.html</url>
    
    <content type="html"><![CDATA[<p>权限校验对一个后端服务来说是一个躲不开的环节，使用中间件的方式实现 Express 的权限校验。</p><span id="more"></span><h2 id="解析-文件"><a href="#解析-文件" class="headerlink" title="解析.文件"></a>解析<code>.</code>文件</h2><p>其实有第三方模块解析<code>.env</code>文件的模块，但是还是想自己解析一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/doFile</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; promisify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;util&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReadFilePromise</span> = <span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">let</span> config = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 获取。env 文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-01-24 19:01:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; [force=false] 强制刷新</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">config</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ReadDotFile</span>(<span class="hljs-params">force = <span class="hljs-literal">false</span></span>) &#123;<br><span class="hljs-keyword">if</span> (config &amp;&amp; !force) &#123;<br><span class="hljs-keyword">return</span> config;<br>&#125;<br><span class="hljs-keyword">const</span> dotData = <span class="hljs-keyword">await</span> <span class="hljs-title class_">ReadFilePromise</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;../.env&quot;</span>));<br><span class="hljs-keyword">const</span> item = dotData.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v, index</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> v.<span class="hljs-property">length</span>;<br>&#125;);<br>config = &#123;&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>item.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v, i</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> [key, value] = v.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;|&#x27;/g</span>, <span class="hljs-string">&quot;&quot;</span>));<br>config[key] = value;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;config&quot;</span>, config);<br><span class="hljs-keyword">return</span> config;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">ReadDotFile</span>;<br></code></pre></td></tr></table></figure><h2 id="token-生成与校验解析"><a href="#token-生成与校验解析" class="headerlink" title="token 生成与校验解析"></a>token 生成与校验解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/token</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Redis</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../src/db/redis&quot;</span>);<br><span class="hljs-keyword">const</span> dotFile = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./dotFile&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyError</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./MyError&quot;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateToken</span>(<span class="hljs-params">paylod, expiresIn = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">2</span></span>) &#123;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">JWT_TOKEN</span> &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">dotFile</span>();<br><span class="hljs-keyword">return</span> jwt.<span class="hljs-title function_">sign</span>(paylod, <span class="hljs-variable constant_">JWT_TOKEN</span>, &#123;<br>expiresIn<br>&#125;);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 验证 token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022-01-24 13:01:06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; token token</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; [type=1] 1: accessToken 2:refreshToken</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyToken</span>(<span class="hljs-params">token, type = <span class="hljs-number">1</span></span>) &#123;<br><span class="hljs-keyword">let</span> res;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-variable constant_">JWT_TOKEN</span> &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">dotFile</span>();<br>res = jwt.<span class="hljs-title function_">verify</span>(token, <span class="hljs-variable constant_">JWT_TOKEN</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-comment">// info token 超时或者无效 token</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-number">40003</span>);<br>&#125;<br><span class="hljs-keyword">const</span> redis = <span class="hljs-title class_">Redis</span>.<span class="hljs-title function_">init</span>();<br><span class="hljs-keyword">const</span> redisToken = <span class="hljs-keyword">await</span> redis.<span class="hljs-title function_">get</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;res.id&#125;</span>#<span class="hljs-subst">$&#123;type === <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;access_token&quot;</span> : <span class="hljs-string">&quot;refresh_token&quot;</span>&#125;</span>`</span>);<br><span class="hljs-keyword">if</span> (redisToken !== token) &#123;<br><span class="hljs-comment">// info 用户重新登录，旧 token 失效</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-number">40003</span>);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; generateToken, verifyToken &#125;;<br></code></pre></td></tr></table></figure><h2 id="鉴权中间件"><a href="#鉴权中间件" class="headerlink" title="鉴权中间件"></a>鉴权中间件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/middleware/auth.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Path2Regexp</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path-to-regexp&quot;</span>); <span class="hljs-comment">// 正则匹配路径</span><br><span class="hljs-keyword">const</span> &#123; errcode, verifyToken &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../utils/index&quot;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">AuthenticationMiddleWare</span>(<span class="hljs-params">pathObj = &#123; &#125;</span>) &#123;<br><span class="hljs-keyword">const</span> includes = pathObj.<span class="hljs-property">includes</span>;<br><span class="hljs-keyword">const</span> excludes = pathObj.<span class="hljs-property">excludes</span>;<br><span class="hljs-keyword">const</span> [pathIncludesMap, pathExcludesMap] = [<br>&#123; <span class="hljs-attr">GET</span>: &#123;&#125;, <span class="hljs-attr">POST</span>: &#123;&#125;, <span class="hljs-attr">PUT</span>: &#123;&#125;, <span class="hljs-attr">DELETE</span>: &#123;&#125;, <span class="hljs-attr">OPTIONS</span>: &#123;&#125; &#125;,<br>&#123; <span class="hljs-attr">GET</span>: &#123;&#125;, <span class="hljs-attr">POST</span>: &#123;&#125;, <span class="hljs-attr">PUT</span>: &#123;&#125;, <span class="hljs-attr">DELETE</span>: &#123;&#125;, <span class="hljs-attr">OPTIONS</span>: &#123;&#125; &#125;<br>];<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(includes)<br>? includes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; method, path &#125; = item;<br>pathIncludesMap[method][<span class="hljs-title class_">Path2Regexp</span>.<span class="hljs-title function_">pathToRegexp</span>(path)] = <span class="hljs-title class_">Path2Regexp</span>.<span class="hljs-title function_">pathToRegexp</span>(path);<br>&#125;)<br>: excludes &amp;&amp;<br>excludes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; method, path &#125; = item;<br>pathExcludesMap[method][<span class="hljs-title class_">Path2Regexp</span>.<span class="hljs-title function_">pathToRegexp</span>(path)] = <span class="hljs-title class_">Path2Regexp</span>.<span class="hljs-title function_">pathToRegexp</span>(path);<br>&#125;)<br>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">f</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br><span class="hljs-comment">// 如果 excludes 为空</span><br><span class="hljs-keyword">let</span> needAuth = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (!pathExcludesMap &amp;&amp; !pathIncludesMap) &#123;<br>            <span class="hljs-comment">// 都为空则对所有的路由检验 </span><br>needAuth = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathExcludesMap) &#123;<br>            <span class="hljs-comment">// 有 excludes</span><br><span class="hljs-keyword">const</span> pathList = pathExcludesMap[req.<span class="hljs-property">method</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> element <span class="hljs-keyword">in</span> pathList) &#123;<br><span class="hljs-keyword">if</span> (pathList[element].<span class="hljs-title function_">test</span>(req.<span class="hljs-property">url</span>)) &#123;<br>needAuth = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 有 excludes</span><br>needAuth = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">const</span> pathList = pathIncludesMap[req.<span class="hljs-property">method</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> element <span class="hljs-keyword">in</span> pathList) &#123;<br><span class="hljs-keyword">if</span> (element.<span class="hljs-title function_">test</span>(req.<span class="hljs-property">url</span>)) &#123;<br>needAuth = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (needAuth) &#123;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Authorization</span> = req.<span class="hljs-property">headers</span>.<span class="hljs-property">authorization</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Authorization</span>) &#123;<br><span class="hljs-keyword">const</span> token = <span class="hljs-title class_">Authorization</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^Bearer /</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> decodeToken = <span class="hljs-keyword">await</span> <span class="hljs-title function_">verifyToken</span>(token);<br>req.<span class="hljs-property">decodeToken</span> = decodeToken;<br><span class="hljs-title function_">next</span>();<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-keyword">const</span> &#123; status, body &#125; = <span class="hljs-title function_">errcode</span>(<span class="hljs-number">40003</span>);<br>res.<span class="hljs-title function_">status</span>(status);<br>res.<span class="hljs-title function_">send</span>(body);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> &#123; status, body &#125; = <span class="hljs-title function_">errcode</span>(<span class="hljs-number">40002</span>);<br>res.<span class="hljs-title function_">status</span>(status);<br>res.<span class="hljs-title function_">send</span>(body);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">next</span>();<br>&#125;<br>&#125;;<br><span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">AuthenticationMiddleWare</span>;<br></code></pre></td></tr></table></figure><h2 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h2><p>在<code>app.js</code>中添加中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> authMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./src/middleware/auth&quot;</span>);<br><br>app.<span class="hljs-title function_">use</span>(<br><span class="hljs-title function_">authMiddleware</span>(&#123;<br><span class="hljs-attr">excludes</span>: [&#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/api/v1/auth&quot;</span><br>&#125;, &#123;<br><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/api/v1/register&quot;</span><br>&#125;]<br>&#125;)<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 7. 错误处理中间件</title>
    <link href="/posts/590703af.html"/>
    <url>/posts/590703af.html</url>
    
    <content type="html"><![CDATA[<p>在开发过程中，我们会遇到各种不符合要求的请求，需要将这种请求拦截下来，并告知请求方明确的错误信息，且要保证程序在运行过程中不会被未知的错误导致崩溃，错误错误处理就尤为重要了。</p><span id="more"></span><h2 id="定义准确的错误信息"><a href="#定义准确的错误信息" class="headerlink" title="定义准确的错误信息"></a>定义准确的错误信息</h2><p>我们可以创建一个文件来定义一系列错误信息，在需要的时候只要传入错误码（甚至一些自定义的错误信息），就能得到想要错误信息结构，方便返回，而不再需要每次都构建一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// utils/errcode.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ERRCODE</span> = &#123;<br><span class="hljs-number">0</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;0&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;ok&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-number">40001</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">400</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;40001&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;参数错误&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-number">40002</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">400</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;40002&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;无权访问&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-number">40003</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">400</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;40003&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;无效 token&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-number">40004</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">400</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;40004&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;请求太频繁，请稍后重试&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-number">50000</span>: &#123;<br><span class="hljs-attr">status</span>: <span class="hljs-number">500</span>,<br><span class="hljs-attr">body</span>: &#123;<br><span class="hljs-attr">errcode</span>: <span class="hljs-string">&quot;50000&quot;</span>,<br><span class="hljs-attr">errmsg</span>: <span class="hljs-string">&quot;服务端错误&quot;</span><br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">errcode</span>(<span class="hljs-params">code, res = &#123;&#125;</span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br>...(<span class="hljs-variable constant_">ERRCODE</span>[code] || <span class="hljs-variable constant_">ERRCODE</span>[<span class="hljs-number">50000</span>]),<br><span class="hljs-attr">body</span>: &#123;<br>...(<span class="hljs-variable constant_">ERRCODE</span>[code] || <span class="hljs-variable constant_">ERRCODE</span>[<span class="hljs-number">50000</span>]).<span class="hljs-property">body</span>, ...res<br>&#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = errcode;<br></code></pre></td></tr></table></figure><p><code>errcode</code> 对错误的错误码，在文件中查找对应的对象，并封装成下面这种格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;errcode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;errmsg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ok&quot;</span><br>    ...<br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>调用者就能得到统一的返回数据。</p><h2 id="拦截请求并抛出错误信息"><a href="#拦截请求并抛出错误信息" class="headerlink" title="拦截请求并抛出错误信息"></a>拦截请求并抛出错误信息</h2><p>为了能自定义错误，还需要对 Error 对象重新处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// utils/MyError.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyError</span>(<span class="hljs-params">errcode = <span class="hljs-number">50000</span>, message = &#123; &#125;</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;MyError&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">errcode</span> = errcode;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">resBody</span> = message;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">stack</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>()).<span class="hljs-property">stack</span>;<br>&#125;<br><span class="hljs-title class_">MyError</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Error</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">MyError</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">MyError</span>;<br><span class="hljs-comment">// global.MyError = MyError;</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">MyError</span>;<br></code></pre></td></tr></table></figure><p>使用自定义错误对象抛出错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">MyError</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../../utils/index&quot;</span>);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-number">40001</span>, &#123;<span class="hljs-attr">data</span>:&#123;&#125;&#125;);<br>    &#125; <span class="hljs-keyword">catch</span>(err) &#123;<br>        <span class="hljs-title function_">next</span>(err);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="兜底所有因请求问题导致的错误"><a href="#兜底所有因请求问题导致的错误" class="headerlink" title="兜底所有因请求问题导致的错误"></a>兜底所有因请求问题导致的错误</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-comment">// require(&quot;./utils/MyError&quot;);</span><br><br><span class="hljs-comment">// 文件最后调用</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">ErrorHandler</span>(<span class="hljs-params">err, req, res, next</span>) &#123;<br><span class="hljs-keyword">const</span> error = <span class="hljs-title function_">errcode</span>(err.<span class="hljs-property">errcode</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>res.<span class="hljs-title function_">status</span>(error.<span class="hljs-property">status</span>).<span class="hljs-title function_">send</span>(&#123; ...error.<span class="hljs-property">body</span>, ...(err.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;MyError&quot;</span> ? err.<span class="hljs-property">resBody</span> : &#123;&#125;) &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 6. 代理静态资源</title>
    <link href="/posts/9c59903e.html"/>
    <url>/posts/9c59903e.html</url>
    
    <content type="html"><![CDATA[<p>Express 可以通过中间件的方式将某一个路径代理静态资源</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;public&quot;</span>)));<br></code></pre></td></tr></table></figure><p>虽然 Express 是可以作为静态资源服务使用，但是并不推荐，更好的方式是使用 Nginx 来实现<strong>动静分离的方式</strong>，这样能让 Express 有更多的资源专心处理请求。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 5. 解析 url 参数</title>
    <link href="/posts/19797a33.html"/>
    <url>/posts/19797a33.html</url>
    
    <content type="html"><![CDATA[<p>Express 自身也不处理 URL 上面的 query 参数，以中间件的形式提供引入</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;));<br></code></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-comment">// Cookies that have not been signed</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Cookies: &#x27;</span>, req.<span class="hljs-property">cookies</span>)<br><br>  <span class="hljs-comment">// Cookies that have been signed</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Signed Cookies: &#x27;</span>, req.<span class="hljs-property">signedCookies</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 4. 解析 cookie</title>
    <link href="/posts/f6a05e0f.html"/>
    <url>/posts/f6a05e0f.html</url>
    
    <content type="html"><![CDATA[<p>Express 自身也不解析 cookie，毕竟 cookie 这种东西也就浏览器才用，Express 官方包甚至连 cookie 处理的中间件都给剥离出来，以第三方模块的方式引入</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cookie-parser&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br></code></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-comment">// Cookies that have not been signed</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Cookies: &#x27;</span>, req.<span class="hljs-property">cookies</span>)<br><br>  <span class="hljs-comment">// Cookies that have been signed</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Signed Cookies: &#x27;</span>, req.<span class="hljs-property">signedCookies</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 3. 解析 json 请求</title>
    <link href="/posts/c18e4cf6.html"/>
    <url>/posts/c18e4cf6.html</url>
    
    <content type="html"><![CDATA[<p>在浏览器调用 Express 实现的 HTTP 服务时，经常会出现跨域问题，这个是浏览器为了安全做的限制。 但是很多时候，前端页面可能就是与 http api 服务并非同一个域名下的。这时候就要对 http 的 response 中的 headers 进行处理</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-comment">// 设置允许跨域的域名，*代表允许任意域名跨域</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  <span class="hljs-comment">// 允许的 header 类型</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;content-type&quot;</span>);<br>  <span class="hljs-comment">// 跨域允许的请求方式</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;options&quot;</span>) &#123;<br>  <span class="hljs-comment">// 让 options 尝试请求快速结束</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-number">200</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-title function_">next</span>(); &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>为什么只要加这处理，浏览器的跨域报错就没了呢？</p><p>跨域问题只有浏览器才会存在，如果是非浏览器调用接口，其实并不会有什么跨域这种说法，毕竟不同域名下的服务调用也不会有像浏览器那样的跨域报错。</p><p>浏览器判断是否跨域，以及是否运行跨域，是判断服务给的响应体的 header 中<code>Access-Control-Allow-Origin</code>，<code>Access-Control-Allow-Headers</code>，<code>Access-Control-Allow-Methods</code>是否符合当前的请求。<br>如果前置存在 <code>Nginx</code> 实现了添加 header 参数，则不需要在 Express 中再设置。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 2. 跨域配置</title>
    <link href="/posts/b1d008e8.html"/>
    <url>/posts/b1d008e8.html</url>
    
    <content type="html"><![CDATA[<p>在浏览器调用 Express 实现的 HTTP 服务时，经常会出现跨域问题，这个是浏览器为了安全做的限制。 但是很多时候，前端页面可能就是与 http api 服务并非同一个域名下的。这时候就要对 http 的 response 中的 headers 进行处理</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-comment">// 设置允许跨域的域名，*代表允许任意域名跨域</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>  <span class="hljs-comment">// 允许的 header 类型</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;content-type&quot;</span>);<br>  <span class="hljs-comment">// 跨域允许的请求方式</span><br>  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&quot;options&quot;</span>) &#123;<br>  <span class="hljs-comment">// 让 options 尝试请求快速结束</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-number">200</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-title function_">next</span>(); &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>为什么只要加这处理，浏览器的跨域报错就没了呢？</p><p>跨域问题只有浏览器才会存在，如果是非浏览器调用接口，其实并不会有什么跨域这种说法，毕竟不同域名下的服务调用也不会有像浏览器那样的跨域报错。</p><p>浏览器判断是否跨域，以及是否运行跨域，是判断服务给的响应体的 header 中<code>Access-Control-Allow-Origin</code>，<code>Access-Control-Allow-Headers</code>，<code>Access-Control-Allow-Methods</code>是否符合当前的请求。<br>如果前置存在 <code>Nginx</code> 实现了添加 header 参数，则不需要在 Express 中再设置。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express 项目环境搭建 -- 1. 初始化项目</title>
    <link href="/posts/9acac579.html"/>
    <url>/posts/9acac579.html</url>
    
    <content type="html"><![CDATA[<p>Express 提供了生成器创建项目，</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g express-generator<br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span><br><span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span><br>express --no-view<br></code></pre></td></tr></table></figure><h2 id="配置-Eslint"><a href="#配置-Eslint" class="headerlink" title="配置 Eslint"></a>配置 Eslint</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Eslint 是一个格式化 JavaScript 的工具</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>这里使用的是 v8 版本的 eslint</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm init @eslint/config<br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Eslint 的配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// eslintrc.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">commonjs</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-string">&quot;standard&quot;</span>,<br>    <span class="hljs-string">&quot;plugin:node/recommended&quot;</span><br>  ],<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-string">&quot;node&quot;</span><br>  ],<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-string">&quot;latest&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-attr">semi</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      <span class="hljs-string">&quot;always&quot;</span><br>    ],<br>    <span class="hljs-attr">quotes</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      <span class="hljs-string">&quot;double&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;comma-dangle&quot;</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">arrays</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">objects</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">imports</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">exports</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">functions</span>: <span class="hljs-string">&quot;never&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;newline-per-chained-call&quot;</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">ignoreChainWithDepth</span>: <span class="hljs-number">1</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;array-bracket-spacing&quot;</span>: [<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;never&quot;</span>],<br>    <span class="hljs-string">&quot;node/no-missing-import&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-multiple-empty-lines&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>    <span class="hljs-string">&quot;no-var&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>    <span class="hljs-string">&quot;no-template-curly-in-string&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;node/no-deprecated-api&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-attr">camelcase</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-bitwise&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-case-declarations&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-new&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;new-cap&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-unmodified-loop-condition&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-loop-func&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;prefer-promise-reject-errors&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;node/no-unsupported-features/es-syntax&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;standard/no-callback-literal&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-string">&quot;no-tabs&quot;</span>: <span class="hljs-string">&quot;off&quot;</span>,<br>    <span class="hljs-attr">indent</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      <span class="hljs-string">&quot;tab&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;space-before-function-paren&quot;</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">anonymous</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">named</span>: <span class="hljs-string">&quot;never&quot;</span>,<br>        <span class="hljs-attr">asyncArrow</span>: <span class="hljs-string">&quot;always&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;arrow-parens&quot;</span>: [<br>      <span class="hljs-string">&quot;error&quot;</span>,<br>      <span class="hljs-string">&quot;as-needed&quot;</span><br>    ]<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>vscode 的配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// .vscode/settings.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;eslint.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 静态资源鉴权访问</title>
    <link href="/posts/15f703f2.html"/>
    <url>/posts/15f703f2.html</url>
    
    <content type="html"><![CDATA[<p>Nginx 能实现静态资源文件服务器，然而并不是所有静态资源都希望开放给访问者，有些资源只想让部分访问者可访问。</p><span id="more"></span><h2 id="auth-request"><a href="#auth-request" class="headerlink" title="auth_request"></a>auth_request</h2><p>这个 Nginx 模块可以让请求先经过一个子请求，如果子请求返回状态码为 200，则可以继续访问后面的请求，否则直接返回子请求的响应结果。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen 18001;<br><br>    location / &#123;<br>        proxy_pass http://localhost:18000;<br>    &#125;<br><br>    location /upload &#123;<br>        auth_request /auth;<br><br>        alias /var/xxx/upload;<br>        #root /var/xxx;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl http://localhost:18001/upload/xxx.jpg<br></code></pre></td></tr></table></figure><p>如果没有符合<code>http://localhost:18000/auth</code>的验证要求，<code>/auth</code>将返回非<code>200</code>的响应。否则就会去<code>/var/xxx/upload</code>中获取静态资源</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端基础：节流和防抖</title>
    <link href="/posts/193371a7.html"/>
    <url>/posts/193371a7.html</url>
    
    <content type="html"><![CDATA[<p>在前端面试中，节流防抖几乎是必问的问题。这两者有些许差异。</p><span id="more"></span><p>在 loadsh 中也有对应的函数：<a href="https://www.lodashjs.com/docs/lodash.throttle#throttle"><code>_.throttle</code></a> 与 <a href="https://www.lodashjs.com/docs/lodash.throttle#debounce"><code>_.debounce</code></a>，而官方也给了一份博客讲解节流和防抖的区别：<a href="https://css-tricks.com/debouncing-throttling-explained-examples/">debouncing-throttling-explained-examples</a>。</p><h2 id="debounce（防抖）"><a href="#debounce（防抖）" class="headerlink" title="debounce（防抖）"></a>debounce（防抖）</h2><p>在 debouncing-throttling-explained-examples<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[debouncing-throttling-explained-examples](https://css-tricks.com/debouncing-throttling-explained-examples/)">[1]</span></a></sup> 中举了个很贴切的例子，即乘坐电梯，电梯门打开后一段时间会关闭，并将乘客运送到对应楼层，当电梯门打开的这段时间只要要有人按下电梯门外的按键，电梯门将重新计时。</p><p>而 <strong>debounce（防抖）</strong>可分为前沿 (Leading edge) 和延迟，前沿防抖即为第一次触发则立即触发，延迟则为等到最后触发结束后触发。而 <strong>throttle （节流）</strong>同样也有这样的两种方式。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/202112171752063.png" alt="延迟防抖"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/202112171754714.png" alt="前沿防抖"></p><h2 id="throttle-（节流）"><a href="#throttle-（节流）" class="headerlink" title="throttle （节流）"></a>throttle （节流）</h2><p>节流与防抖很像，但是差异在于，节流防止事件在某段固定时间内触发一次以上，即在某段固定的时间内只允许触发一次。比如用户点击按钮后，一段时间内不允许再触发点击按钮的事件。看图理解如下</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/202112171756061.png" alt="延迟节流"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/202112171756101.png" alt="前沿节流"></p><p>在实际应用中，防止用户在短时间内点击某个按钮，如发送短信验证码按钮，就是用的前沿节流实现的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>debounce: Grouping a sudden burst of events (like keystrokes) into a single one.<br>throttle: Guaranteeing a constant flow of executions every X milliseconds. Like checking every 200ms your scroll position to trigger a CSS animation.<br><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">debouncing-throttling-explained-examples</a></p></blockquote><blockquote><p><strong>防抖</strong>：将突然爆发的事件（如击键）分组为一个。<br><strong>节流</strong>：保证每 X 毫秒有一个恒定的执行流。就像每 200 毫秒检查一次滚动位置以触发 CSS 动画。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/hupian1989/article/details/80920324">防抖 (debounce) 和 节流 (throttling)</a></li><li><a href="https://www.lodashjs.com/docs/lodash.throttle">lodash.throttle</a></li><li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">debouncing-throttling-explained-examples</a></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">debouncing-throttling-explained-examples</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>升级 egg-socket.io 到 4.4.0</title>
    <link href="/posts/4fcb03ef.html"/>
    <url>/posts/4fcb03ef.html</url>
    
    <content type="html"><![CDATA[<p>阿里这个框架已经很久没更新了，连插件模块都没有人维护。本来想着用 2.1.1 写就行了，但是很多 api 都用不了，于是有了自己重写的想法。</p><span id="more"></span><p>说是重写，其实也就升级一下一下包，重写一下配置。</p><h2 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm uninstall socket.io redis-adapter redis<br>npm install socket.io@4.4.0 @socket.io/redis-adapter@7.1.0 ioredis --save<br></code></pre></td></tr></table></figure><p>就这么简单，因为从 redis 的适配器更名了，既然用最新版本，也都跟上吧，不过 redis 最新的 4 测试好像有问题，懒得折腾，直接上 ioredis。</p><h2 id="改配置"><a href="#改配置" class="headerlink" title="改配置"></a>改配置</h2><p>因为我们更换了包，所以需要到对应的文件夹把包换一下</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- const redis = require(&#x27;socket.io-redis&#x27;);</span><br><span class="hljs-addition">+ const &#123; createAdapter &#125; = require(&#x27;@socket.io/redis-adapter&#x27;);</span><br><span class="hljs-addition">+ const Redis = require(&#x27;ioredis&#x27;);</span><br></code></pre></td></tr></table></figure><p>然后找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (config.<span class="hljs-property">redis</span>) &#123;<br></code></pre></td></tr></table></figure><p>在里面改一下</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-    const adapter = redis(config.redis);</span><br><span class="hljs-deletion">-    // https://github.com/socketio/socket.io-redis/issues/21</span><br><span class="hljs-deletion">-    adapter.prototype.on(&#x27;error&#x27;, err =&gt; &#123;</span><br><span class="hljs-deletion">-      app.coreLogger.error(err);</span><br><span class="hljs-deletion">-    &#125;);</span><br><span class="hljs-deletion">-    app.io.adapter(adapter);</span><br><span class="hljs-addition">+    const pubClient = new Redis(config.redis);</span><br><span class="hljs-addition">+    const subClient = pubClient.duplicate();</span><br><span class="hljs-addition">+    pubClient.on(&#x27;error&#x27;, err =&gt; &#123;</span><br><span class="hljs-addition">+      app.coreLogger.error(err);</span><br><span class="hljs-addition">+    &#125;);</span><br><span class="hljs-addition">+    subClient.on(&#x27;error&#x27;, err =&gt; &#123;</span><br><span class="hljs-addition">+      app.coreLogger.error(err);</span><br><span class="hljs-addition">+    &#125;);</span><br><span class="hljs-addition">+    config.adapter = &#123;</span><br><span class="hljs-addition">+      key: config.adapter?config.adapter.key:undefined,</span><br><span class="hljs-addition">+      requestsTimeout: config.adapter?config.adapter.requestsTimeout:5000,</span><br><span class="hljs-addition">+      publishOnSpecificResponseChannel: config.adapter?config.adapter.requpublishOnSpecificResponseChannel: false</span><br><span class="hljs-addition">+    &#125;</span><br><span class="hljs-addition">+    app.io.adapter(createAdapter(pubClient, subClient,config.adapter));</span><br></code></pre></td></tr></table></figure><p>这里加了一个 adapter 的参数，这是为了可以定制适配器。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>因为我没有把代码发成包，所以我直接把代码拷贝到项目底下</p><p>在项目根目录中新建一个<code>plugins</code>文件夹，把插件拷贝到该目录下，然后修改<code>app/config/plugin.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">io</span>:&#123;<br>    <span class="hljs-attr">enable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">package</span>: <span class="hljs-string">&quot;../../plugins/egg-socket.io&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样子就能愉快地使用 4.4.0 了。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>egg.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PM2 优雅退出</title>
    <link href="/posts/84550d96.html"/>
    <url>/posts/84550d96.html</url>
    
    <content type="html"><![CDATA[<p>在日常开发过程中，经常会用到 pm2 来起到服务，甚至会用 watch 来实现热更新。</p><span id="more"></span><p>但上面这种模式并不适合用在生产环境中，因为 pm2 零延时重启，会导致正在处理的请求直接被销毁，如果数据库没加事务，直接就会导致数据库的数据不完整。</p><p>处理方法是延时 kill，参数是<code>--kill-timeout</code>。</p><p>在启动的<code>app.js</code>中添加<code>SIGINT</code>的监听，并在回调中用剩余的<code>timeout</code>时间处理数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;SIGINT&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>   db.<span class="hljs-title function_">stop</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>     process.<span class="hljs-title function_">exit</span>(err ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>)<br>   &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>启动方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pm2 start app.js --kill-timeout 3000<br></code></pre></td></tr></table></figure><p>重载就会触发。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pm2 reload<br></code></pre></td></tr></table></figure><h2 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h2><p>一般使用 pm2，我们是希望 pm2 给我们提供负载均衡，每次 pull 好代码，reload 一下就能升级到最新的服务，而不需要从 Nginx 上下手。但是默认情况下 pm2 直接重启会导致正在处理的请求丢失。所以我们希望 PM2 在重启前，可以先通知 App，并给足够的时间让 App 处理完正在处理的请求，并且不再接收新的请求，然后再重启服务。</p><p>我们可以把上面的例子改成这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;SIGINT&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">global</span>.<span class="hljs-property">app</span>.<span class="hljs-property">running</span> = <span class="hljs-literal">false</span>;<br>    db.<span class="hljs-title function_">stop</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>        process.<span class="hljs-title function_">exit</span>(err ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>)<br>   &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>global.app.running</code>为整个服务的全局变量，只要服务启动就赋值为<code>true</code>，并且在所有理由拦截器中增加判断逻辑：只要<code>true</code>时才接收请求，这样就能保证当<code>global.app.running</code>为<code>false</code>时，正在处理的请求不会被销毁，所有后来进入的请求都失败，从而保证数据库完整性。</p><p>但是这种拦截方式太过于粗暴，只是保证数据库完整，但是依然达不到<strong>平滑</strong>，<strong>平滑升级</strong>还有很多路要走。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pm2.keymetrics.io/docs/usage/signals-clean-restart/">Graceful Stop</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs 中的同步与异步、阻塞与非阻塞</title>
    <link href="/posts/1a87a4b.html"/>
    <url>/posts/1a87a4b.html</url>
    
    <content type="html"><![CDATA[<p>最近在微信读书上读一本国内讲Nginx的书，里面提到异步，同步，阻塞和非阻塞，然后里面的用户笔记乱解释，还一大堆人给他点爱心，所以现在连辩解错误的能力都没有了么？</p><span id="more"></span><p>在学习Nodejs的过程中，经常会听到同步异步，阻塞和非阻塞。那什么是异步什么是同步呢？什么是阻塞和非阻塞？</p><p>Nodejs是单线程的异步事件驱动的Js运行时，使用<a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/">事件循环</a>的方式，将操作交给系统内核处理，当操作完成后内核通知Nodejs讲合适的回调函数添加到轮询队列中等待回调执行。而<a href="https://nodejs.org/zh-cn/docs/guides/blocking-vs-non-blocking/"><strong>阻塞</strong></a>，在官方教程中也有说明</p><blockquote><p><strong>阻塞</strong> 是指在 Node.js 程序中，其它 JavaScript 语句的执行，必须等待一个<strong>非 JavaScript 操作</strong>完成。这是因为当 <strong>阻塞</strong> 发生时，事件循环无法继续运行 JavaScript。</p><p>在 Node.js 中，JavaScript 由于执行 CPU 密集型操作，而不是等待一个非 JavaScript 操作（例如 I&#x2F;O）而表现不佳，通常不被称为 阻塞。在 Node.js 标准库中使用 libuv 的同步方法是最常用的 <strong>阻塞</strong> 操作。原生模块中也有 <strong>阻塞</strong> 方法。</p><p>在 Node.js 标准库中的所有 I&#x2F;O 方法都提供异步版本，非阻塞，并且接受回调函数。某些方法也有对应的 阻塞 版本，名字以 <code>Sync</code> 结尾。</p><p>–<a href="https://nodejs.org/zh-cn/docs/guides/blocking-vs-non-blocking/">阻塞对比非阻塞一览</a></p></blockquote><p>很明显可以看出，所谓的<strong>非 JavaScript 操作</strong>既不是ES中规定的API操作。所以像for循环，数值计算，这种并不算是阻塞。而标准库中所有的<code>Sync</code>方法是<strong>非 JavaScript 操作</strong>操作，会阻塞主线程的JS代码运行。</p><p>在Nodejs中，我们常听到<strong>异步回调</strong>，到底什么是异步回调？在js中，回调是通过执行传入的方法，既等到操作执行完，会通过回调方法通知。既然有异步回调也会有同步回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">num, callbacll = result =&gt; result</span>) &#123;<br>    <span class="hljs-title function_">callbacll</span>(num ** <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br><span class="hljs-title function_">func1</span>(<span class="hljs-number">2</span>, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br><span class="hljs-comment">// start</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// end</span><br></code></pre></td></tr></table></figure><p><strong>同步</strong>既执行顺序与代码编写顺序相符的。而<strong>异步</strong>则是执行顺序与代码编写顺序不符。但是同步回调可直接写成下面这样子，所以一般同步回调使用的场景几乎没有。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func1</span>(<span class="hljs-params">num</span>) &#123;<br>    <span class="hljs-keyword">return</span> num ** <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">func1</span>(<span class="hljs-number">2</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br><span class="hljs-comment">// start</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// end</span><br></code></pre></td></tr></table></figure><p>那看看异步回调是怎么样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start&quot;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./1.js&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-keyword">throw</span> err;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;data&quot;</span>);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;end&quot;</span>);<br><span class="hljs-comment">// start</span><br><span class="hljs-comment">// end</span><br><span class="hljs-comment">// data</span><br></code></pre></td></tr></table></figure><p>其中<code>readFile</code>的第二个参数就是异步回调方法。虽然叫异步回调方法，但是也是在主线程执行的，毕竟事件轮询调用这个回调方法是用来通知主线程的。</p><p><strong>非阻塞</strong>方法需要<strong>异步回调</strong>方法通知主线程，<strong>阻塞</strong>方法直接阻塞Js主线程。<strong>阻塞</strong>和<strong>非阻塞</strong>都为<strong>非 JavaScript 操作</strong>，<strong>JavaScript 操作</strong>不能成为<strong>阻塞</strong>和<strong>非阻塞</strong>。</p><p>因为非阻塞需要异步回调函数通知主线程，当一个操作流程需要一连串的IO和网络操作，并且这些IO和网络操作都需要严格按照一定执行时，就会出现回调地狱。为了解决这个问题，人们给异步回调披上<code>Promise</code>的外衣，实现了链式调用，把异步回调用<code>then</code>的方式执行，把多行代码压成一行。但是依然不如同步代码一样看起来直观，所以人们有给<code>Promise</code>装一个箱子，就是<code>async</code>和<code>await</code>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://nodejs.org/zh-cn/docs/guides/blocking-vs-non-blocking/">阻塞对比非阻塞一览</a></li><li><a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/">Node.js 事件循环，定时器和 <code>process.nextTick()</code></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs 中的异步执行顺序</title>
    <link href="/posts/f05aaded.html"/>
    <url>/posts/f05aaded.html</url>
    
    <content type="html"><![CDATA[<p>前段时间无聊，给朋友讲 Node.js 的异步执行的问题，今天翻到代码和解释，做个记录</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// js 事件循环中的异步队列有两种：</span><br><span class="hljs-comment">// - macro（宏任务）队列，比如： setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。</span><br><span class="hljs-comment">// - micro（微任务）队列，比如：process.nextTick、Promise、MutationObserver 等。</span><br><span class="hljs-comment">// 完整的 Event Loop 过程。</span><br><span class="hljs-comment">// 初始状态：micro 队列空，macro 队列里有且只有一个 script 脚本（整体代码为宏任务）；</span><br><span class="hljs-comment">// 执行 script 代码，创建的宏任务推到宏任务调用栈中，创建的微任务推到微任务调用栈中；【宏任务阶段】</span><br><span class="hljs-comment">// 执行微任务，调出当前微任务栈的所有微任务，一次执行，其中如果有宏任务推到宏任务栈中【微任务阶段】</span><br><span class="hljs-comment">// 执行宏任务，调出当前宏任务栈中的第一个宏任务，其中创建的微任务推到微任务栈中【宏任务阶段】</span><br><span class="hljs-comment">// 如果代码未结束，循环执行 3,4 步骤</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">timeout</span> = cb =&gt; <span class="hljs-built_in">setTimeout</span>(cb ,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">f</span> = flag =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;start &#x27;</span>, flag)<br>    <span class="hljs-title function_">resolve</span>(flag)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">flag</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p-&#x27;</span> + flag)<br>    <span class="hljs-comment">// &gt;&gt;&gt;??</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">__inner__</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner &#x27;</span> + flag)<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">flag</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p-debug&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 宏任务</span><br><span class="hljs-title function_">timeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">__hello__</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-comment">// 微任务</span><br>    <span class="hljs-title function_">f</span>(<span class="hljs-number">3</span>)<br>&#125;)<br><span class="hljs-comment">// 宏任务 </span><br><span class="hljs-title function_">timeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">__world__</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;world&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 微任务</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">f</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>代码都是从上往下执行，执行完后，会从微任务队列把所有微任务执行完，再从宏任务队列取出一个宏任务执行，再从微任务队列中取出所有微任务并执行。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs txt">27 行，注册__hello__宏任务<br>宏任务：[__hello__]<br>微任务：[]<br><br>33 行注册__world__宏任务<br>宏任务：[__hello__，__world__]<br>微任务：[]<br><br>37 行调用一个 Promise，执行<br><br>start 1<br><br>并注册一个微任务 then1.1<br><br>宏任务：[__hello__，__world__]<br>微任务：[then1.1]<br><br>38 行调用一个 Promise，执行<br><br>start 2<br><br>并注册一个微任务 then2.1<br><br>宏任务：[__hello__，__world__]<br>微任务：[then1.1，then2.1]<br></code></pre></td></tr></table></figure><p>同步执行完毕</p><hr><p>从微任务中将所有的微任务取出并执行</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs txt">宏任务：[__hello__，__world__]<br>微任务：[then2.1]<br>run: then1.1<br><br>打印 p-1<br><br>注册一个__inner 1__ <br><br>宏任务：[__hello__，__world__，__inner 1__]<br>微任务：[]<br>run: then1.1 then2.1<br><br>then1.1 执行完毕，注册一个 then1.2，执行微任务队列中的下一个任务 then2.1<br><br>宏任务：[__hello__，__world__，__inner 1__]<br>微任务：[then1.2]<br>run: then2.1<br><br>打印 p-2<br><br>注册一个__inner 2__ <br><br>宏任务：[__hello__，__world__，__inner 1__，__inner 2__ ]<br>微任务：[then1.2]<br>run: then2.1<br><br>then2.1 执行完毕，注册一个 then2.2<br><br>宏任务：[__hello__，__world__，__inner 1__，__inner 2__ ]<br>微任务：[then1.2，then2.2]<br>run: <br><br>取出微任务队列 <br>宏任务：[__hello__，__world__，__inner 1__，__inner 2__ ]<br>微任务：[]<br>run: then1.2，then2.2<br><br>分别打印 p-debug * 2<br><br>微任务队列为空，取出一个宏任务__hello__<br><br>宏任务：[__world__，__inner 1__，__inner 2__ ]<br>微任务：[]<br>run: __hello__<br><br>打印 hello <br><br>遇到一个 f3，得到<br><br>start 3<br><br>并将 then3.1 加入微任务队列，__hello__执行完毕<br><br>宏任务：[__world__，__inner 1__，__inner 2__ ]<br>微任务：[then3.1]<br>run: <br><br>取出所有微任务执行 :then3.1<br><br>打印 p-3<br><br>将__inner 3__加入宏任务队列<br><br>宏任务：[__world__，__inner 1__，__inner 2__，__inner 3__ ]<br>微任务：[]<br>run: then3.1<br><br>then3.1 下面还有微任务，继续执行<br><br>p-debug<br><br>微任务执行完毕，取出一个宏任务<br><br>宏任务：[__inner 1__，__inner 2__，__inner 3__ ]<br>微任务：[]<br>run: __world__<br><br>打印 world<br><br>微任务队列为空，执行下一个宏任务<br><br>宏任务：[__inner 2__，__inner 3__ ]<br>微任务：[]<br>run: __inner 1__<br><br>打印 inner 1<br><br>微任务队列为空，执行下一个宏任务<br><br>宏任务：[__inner 3__ ]<br>微任务：[]<br>run: __inner 2__<br><br>打印 inner 2<br><br>微任务队列为空，执行下一个宏任务<br><br>宏任务：[]<br>微任务：[]<br>run: __inner 3__<br><br>打印 inner 3<br></code></pre></td></tr></table></figure><p>宏任务和微任务队列全部清空，程序结束</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 同时代理资源文件夹和 api 服务</title>
    <link href="/posts/dbc638b7.html"/>
    <url>/posts/dbc638b7.html</url>
    
    <content type="html"><![CDATA[<p>在同一个端口同时支持代理页面静态资源，资源文件和后端 api 接口</p><span id="more"></span><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span>       <span class="hljs-number">7001</span>;<br>  <span class="hljs-attribute">server_name</span>  localhost:<span class="hljs-number">7001</span>;<br>  <span class="hljs-comment"># 前端页面</span><br>  <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">root</span> /xxx/dist;<br>    <span class="hljs-attribute">index</span> index.html;<br>    <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> /index.html;<br>  &#125;<br>  <span class="hljs-comment"># api 服务，服务的前缀都是 api</span><br>  <span class="hljs-section">location</span> /api &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://localhost:1234/api;<br>  &#125;<br><br>  <span class="hljs-comment"># 静态资源，访问的其实是 /var/serverSource/upload，后端保存文件也是这个路径</span><br>  <span class="hljs-section">location</span> /upload &#123;<br>    <span class="hljs-attribute">root</span> /var/serverSource;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一直被误解的get请求</title>
    <link href="/posts/430d91fe.html"/>
    <url>/posts/430d91fe.html</url>
    
    <content type="html"><![CDATA[<p>从开始接触web，就一直看到有人问：“http的get请求和post请求有什么区别”。我一直也说不清楚。毕竟有个地方，我百思不得其解。</p><span id="more"></span><p>不解的地方是，在http报文格式中，GET和POST请求，最大的差别只是在报文主体上。一个有Entity一个没有。甚至有些文章说GET请求的参数因为都是在url上，而url有长度限制。</p><p>但是GET请求真的没有吗？翻一翻rfc1945，也没说GET请求不给传Entity呀？只是说POST必须传<code>content-length</code>。甚至都没提到url长度的事。</p><p>那就试试在GET请求里放 Entity？</p><p>动手</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// client.js</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Data</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br><span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;)<br><span class="hljs-keyword">const</span> request = http.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">hostname</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br><span class="hljs-attr">port</span>: <span class="hljs-string">&quot;8000&quot;</span>,<br><span class="hljs-attr">headers</span>: &#123;<br><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br><span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">byteLength</span>(<span class="hljs-title class_">Data</span>),<br><span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost:8000&#x27;</span>, <br>&#125;,<br><span class="hljs-attr">method</span>:<span class="hljs-string">&quot;GET&quot;</span><br>&#125;, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> data = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// console.log(res)</span><br>res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>data+=chunk<br>&#125;)<br>res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;send data:&quot;</span>,<span class="hljs-title class_">Data</span>)<br>request.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">Data</span>);<br><span class="hljs-comment">// request.on(&quot;connect&quot;)</span><br>request.<span class="hljs-title function_">end</span>();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// server.js</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">const</span> request = http.<span class="hljs-title function_">createServer</span>(&#123; <span class="hljs-attr">insecureHTTPParser</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;&#x27;</span><br>request.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>data += chunk.<span class="hljs-title function_">toString</span>()<br>&#125;)<br><br>request.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>&#125;)<br><br>&#125;);<br>request.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req,</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> x = <span class="hljs-string">&quot;&quot;</span><br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;<br>x+=c.<span class="hljs-title function_">toString</span>()<br>&#125;)<br>req.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;)<br>&#125;)<br><br>request.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;localhost:8000&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ node server.js<br>localhost:8000<br>GET / HTTP/1.1<br>Content-Type: application/json<br>Content-Length: 10<br>host: localhost:8000<br>user-agent: curl/7.64.1<br>accept: */*<br>Connection: close<br><br>&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ node client.js<br>send data: &#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;<br>&#123;&#125;<br></code></pre></td></tr></table></figure><p>server端能接收到client端的GET请求，并成功返回数据。</p><p>所以http的GET请求一样能传body，而且也没有他们说的url长度限制，这种长度限制其实只是在浏览器上才会出现，在http报文结构中，是不对长度进行限制的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件与图片互转</title>
    <link href="/posts/7819d140.html"/>
    <url>/posts/7819d140.html</url>
    
    <content type="html"><![CDATA[<p>最近有个想法，将文本转换成图片像素，会是个什么样子的。</p><p>为什么会有这样的想法？因为很久之前就发现像素图片是由 rgb 或者 rgba 构成像素组成的。每一个色素的范围是 $[0,255]$，刚好是$2^8&#x3D;256$。而 unicode 恰好又是 6 位 16 进制表示的，那么’0xff’刚好又是 255。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;ff&#x27;</span>,<span class="hljs-number">16</span>) <span class="hljs-comment">// 255</span><br></code></pre></td></tr></table></figure><p>所以我们可以将文字转为 unicode 后，平分为三分，分别就是 r，g，b。构成一个像素。</p><p>理论可行，开始操作。</p><h2 id="将文字转为-16-进制"><a href="#将文字转为-16-进制" class="headerlink" title="将文字转为 16 进制"></a>将文字转为 16 进制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;中&#x27;</span>.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-comment">// &#x27;004e2d&#x27;</span><br></code></pre></td></tr></table></figure><p>这样子我们就能切割出 rgb 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>] = [<span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>), <span class="hljs-number">16</span>)];<br></code></pre></td></tr></table></figure><h2 id="保存为-png-文件"><a href="#保存为-png-文件" class="headerlink" title="保存为 png 文件"></a>保存为 png 文件</h2><p>这里使用现成的 <a href="https://www.npmjs.com/package/pngjs">pngjs</a>，新建实例化对象时，需要传入长宽数据。</p><p>最简单的方法是获取到所有字符的个数，开方后，向上取整得到宽和高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> size = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(book.<span class="hljs-property">length</span>));<br></code></pre></td></tr></table></figure><p>初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> png = <span class="hljs-keyword">new</span> <span class="hljs-title function_">PNG</span>(&#123;<br>    <span class="hljs-attr">filterType</span>: -<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">width</span>: size,<br>    <span class="hljs-attr">height</span>: size<br>&#125;);<br></code></pre></td></tr></table></figure><p>因为使用的 png，有 Alpha 通道，即透明度，所以一个像素占用 4 个 byte。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>; x &lt; size; x++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>; y &lt; size; y++) &#123;<br>        <span class="hljs-keyword">const</span> bit16 = book[x * size + y] ? book[x * size + y].<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;0&quot;</span>) : <span class="hljs-string">&quot;000000&quot;</span>;<br>        <span class="hljs-keyword">const</span> [<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>] = [<span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>), <span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), <span class="hljs-number">16</span>), <span class="hljs-built_in">parseInt</span>(bit16.<span class="hljs-title function_">slice</span>(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>), <span class="hljs-number">16</span>)];<br>        <span class="hljs-keyword">const</span> idx = (size * x + y) &lt;&lt; <span class="hljs-number">2</span>;<br>        png.<span class="hljs-property">data</span>[idx] = <span class="hljs-title class_">Red</span>;<br>        png.<span class="hljs-property">data</span>[idx + <span class="hljs-number">1</span>] = <span class="hljs-title class_">Green</span>;<br>        png.<span class="hljs-property">data</span>[idx + <span class="hljs-number">2</span>] = <span class="hljs-title class_">Blue</span>;<br>        png.<span class="hljs-property">data</span>[idx + <span class="hljs-number">3</span>] = (<span class="hljs-title class_">Green</span> === <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Blue</span> === <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">255</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后保存图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">png.<span class="hljs-title function_">pack</span>().<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(pngPath));<br></code></pre></td></tr></table></figure><h2 id="png-转-txt"><a href="#png-转-txt" class="headerlink" title="png 转 txt"></a>png 转 txt</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">createReadStream</span>(pngPath)<br>    .<span class="hljs-title function_">pipe</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_">PNG</span>(&#123;<br>            <span class="hljs-attr">filterType</span>: -<span class="hljs-number">1</span><br>        &#125;)<br>    )<br>    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;parsed&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> bookData = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>; x++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> y = <span class="hljs-number">0</span>; y &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>; y++) &#123;<br>                <span class="hljs-keyword">const</span> idx = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span> * x + y) &lt;&lt; <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[idx + <span class="hljs-number">3</span>] === <span class="hljs-number">0</span>) &#123;<br>                    fs.<span class="hljs-title function_">writeFile</span>(textPath, bookData, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>                        <span class="hljs-keyword">if</span> (err) &#123;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>                        &#125;<br>                        <span class="hljs-title function_">resolve</span>(bookData);<br>                    &#125;);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">const</span> unicode = <span class="hljs-string">`00<span class="hljs-subst">$&#123;(<span class="hljs-variable language_">this</span>.data[idx + <span class="hljs-number">1</span>]).toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)&#125;</span><span class="hljs-subst">$&#123;(<span class="hljs-variable language_">this</span>.data[idx + <span class="hljs-number">2</span>]).toString(<span class="hljs-number">16</span>).padStart(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)&#125;</span>`</span>;<br>                bookData += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-built_in">parseInt</span>(unicode, <span class="hljs-number">16</span>));<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>查一下常用的中文 unicode 编码，高 2 位其实都是”00”，如果确定是存中文和英文，其实一个像素能存下两个字符。</p><p>高 4 位一个字符，低 4 位一个字符。这样图片的宽高就会缩小一倍。不过这样的话，png 转 txt 的模块代码也要做相应的修改。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos自定义motd</title>
    <link href="/posts/c3249d60.html"/>
    <url>/posts/c3249d60.html</url>
    
    <content type="html"><![CDATA[<p>之前在ArchLinux上弄个motd，最近在Centos上按之前的笔记操作一边，发现有很多不一样的地方。</p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，需要有用于显示的脚本文件，放在<code>/etc/update_motd.d</code>文件夹下，然后使用<code>motd-update</code>脚本执行<code>/etc/update_motd.d</code>文件夹下的脚本。最后，在pam中加入<code>motd-update</code>脚本。</p><h2 id="motd-update"><a href="#motd-update" class="headerlink" title="motd-update"></a>motd-update</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># /usr/bin/update-motd</span><br>run-parts-debian --lsbsysinit /etc/update_motd.d<br><span class="hljs-comment">#run-parts /etc/update_motd.d</span><br></code></pre></td></tr></table></figure><p>会发现没有<code>run-parts-debian</code>这个命令，其实这个是我拷贝网上的脚本实现的<code>/usr/bin/run-parts-debian</code>，因为Contos的<code>run-parts</code>没有<code>--lsbsysinit</code>参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /usr/bin/run-parts-debian <br><span class="hljs-comment">#!/usr/bin/env bash</span><br><br><span class="hljs-comment"># run-parts - concept taken from Debian</span><br><span class="hljs-comment"># http://www.unix.com/man-page/linux/8/run-parts/</span><br><span class="hljs-comment"># with extensions from Ubuntu</span><br><span class="hljs-comment"># http://manpages.ubuntu.com/manpages/trusty/man8/run-parts.8.html</span><br><br><span class="hljs-comment"># keep going when something fails</span><br><span class="hljs-built_in">set</span> +e<br><span class="hljs-comment"># pipefail is required for --report support</span><br><span class="hljs-built_in">set</span> -o pipefail<br><br><span class="hljs-function"><span class="hljs-title">usage</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;run-parts  [--test]  [--verbose]  [--report]  [--umask=umask] [--lsbsysinit] [--regex=REGEX]</span><br><span class="hljs-string">           [--arg=argument] [--exit-on-error] [--help] [--list] [--reverse]  [--]  DIRECTORY&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">help</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;</span><br><span class="hljs-string">NAME</span><br><span class="hljs-string">       run-parts - run scripts or programs in a directory</span><br><span class="hljs-string"></span><br><span class="hljs-string">SYNOPSIS</span><br><span class="hljs-string">       run-parts  [--test]  [--verbose]  [--report]  [--umask=umask] [--lsbsysinit] [--regex=REGEX]</span><br><span class="hljs-string">       [--arg=argument] [--exit-on-error] [--help] [--list] [--reverse]  [--]  DIRECTORY</span><br><span class="hljs-string"></span><br><span class="hljs-string">DESCRIPTION</span><br><span class="hljs-string">       run-parts runs all the executable files named within constraints described below, found in</span><br><span class="hljs-string">       directory directory.  Other files and directories are silently ignored.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       If neither the --lsbsysinit option nor the --regex option is given  then  the  names  must</span><br><span class="hljs-string">       consist  entirely of ASCII upper- and lower-case letters, ASCII digits, ASCII underscores,</span><br><span class="hljs-string">       and ASCII minus-hyphens.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       If the --lsbsysinit option is given,  then  the  names  must  not  end  in  .dpkg-old   or</span><br><span class="hljs-string">       .dpkg-dist  or  .dpkg-new  or  .dpkg-tmp,  and must belong to one or more of the following</span><br><span class="hljs-string">       namespaces: the LANANA-assigned namespace (^[a-z0-9]+$); the LSB hierarchical and reserved</span><br><span class="hljs-string">       namespaces  (^_?([a-z0-9_.]+-)+[a-z0-9]+$);  and the Debian cron script namespace (^[a-zA-</span><br><span class="hljs-string">       Z0-9_-]+$).</span><br><span class="hljs-string"></span><br><span class="hljs-string">       If the --regex option  is  given,  the  names  must  match  the  custom  extended  regular</span><br><span class="hljs-string">       expression specified as that option&#x27;s argument.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       Files  are  runin  the  lexical sort order of their names unless the --reverse option is</span><br><span class="hljs-string">       given, in which case they are run in the opposite order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">OPTIONS</span><br><span class="hljs-string">       --test print the names of the scripts which would be run, but don&#x27;t actually run them.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --list print the names of the all matching files (not limited to executables),  but  don&#x27;t</span><br><span class="hljs-string">          actually run them. This option cannot be used with --test.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       -v, --verbose</span><br><span class="hljs-string">          print the name of each script to stderr before running.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --report</span><br><span class="hljs-string">          similar  to  --verbose,  but  only prints the name of scripts which produce output.</span><br><span class="hljs-string">          The script&#x27;s name is printed to whichever of stdout or stderr the script produces</span><br><span class="hljs-string">          output on. The script&#x27;s name is not printed to stderr if --verbose also specified.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --reverse</span><br><span class="hljs-string">          reverse the scripts&#x27; execution order.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --exit-on-error</span><br><span class="hljs-string">          exit as soon as a script returns with a non-zero exit code.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --umask=umask</span><br><span class="hljs-string">          sets  the  umask to umask before running the scripts.  umask should be specified in</span><br><span class="hljs-string">          octal.  By default the umask is set to 022.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --lsbsysinit</span><br><span class="hljs-string">          filename must be in one or more of either the LANANA-assigned namespace, the LSB</span><br><span class="hljs-string">          namespaces - either hierarchical or reserved - or the Debian cron script namespace.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --regex=REGEX</span><br><span class="hljs-string">          validate filenames against custom extended regular expression REGEX</span><br><span class="hljs-string"></span><br><span class="hljs-string">       -a, --arg=argument</span><br><span class="hljs-string">          pass argument to the scripts.  Use --arg once for each argument you want passed.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       --     specifies that this is the end of the options.  Any filename after -- will  be  not</span><br><span class="hljs-string">          be interpreted as an option even if it starts with a hyphen.</span><br><span class="hljs-string"></span><br><span class="hljs-string">       -h, --help</span><br><span class="hljs-string">          display usage information and exit.</span><br><span class="hljs-string">&quot;</span><br>&#125;<br><br>report-and-<span class="hljs-function"><span class="hljs-title">pipe</span></span>() &#123;<br>    rline=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-keyword">while</span> IFS= <span class="hljs-built_in">read</span> -r line; <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;<span class="hljs-variable">$rline</span>&quot;</span> ; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$line</span>&quot;</span>;<br>        <span class="hljs-built_in">unset</span> rline;<br>    <span class="hljs-keyword">done</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]; <span class="hljs-keyword">then</span><br>    usage<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>args=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">dir</span>=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">umask</span>=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;append_arg:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>        args=<span class="hljs-string">&quot;<span class="hljs-variable">$args</span> <span class="hljs-variable">$i</span>&quot;</span><br>        append_arg=0<br>        <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$i</span> <span class="hljs-keyword">in</span><br>        --list)<br>            list=1<br>            ;;<br>        --<span class="hljs-built_in">test</span>)<br>            <span class="hljs-built_in">test</span>=1<br>            ;;<br>        --verbose|-v)<br>            verbose=1<br>            ;;<br>        --report)<br>            report=1<br>            ;;<br>        --reverse)<br>            reverse=1<br>            ;;<br>        --lsbsysinit)<br>            lsbsysinit=1<br>            ;;<br>        --regex)<br>            regex=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#*=&#125;</span>&quot;</span><br>            ;;<br>        --arg=*)<br>            args=<span class="hljs-string">&quot;<span class="hljs-variable">$args</span> <span class="hljs-variable">$&#123;i#*=&#125;</span>&quot;</span><br>            ;;<br>        -a)<br>            append_arg=1<br>            ;;<br>        --<span class="hljs-built_in">umask</span>=*)<br>            <span class="hljs-built_in">umask</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#*=&#125;</span>&quot;</span><br>            ;;<br>        --<span class="hljs-built_in">help</span>|-h)<br>            <span class="hljs-built_in">help</span><br>            <span class="hljs-built_in">exit</span> 0<br>            ;;<br>        --exit-on-error)<br>            exit_on_error=1<br>            ;;<br>        --)<br>            <span class="hljs-comment"># -- end of options</span><br>            ;;<br>        -*)<br>            <span class="hljs-built_in">echo</span> Unknown argument: <span class="hljs-variable">$i</span> &gt; /dev/stderr<br>            <span class="hljs-built_in">echo</span> Rest of arguments: $* &gt; /dev/stderr<br>            usage<br>            <span class="hljs-built_in">exit</span> 1<br>            ;;<br>        *)<br>            <span class="hljs-comment"># directory</span><br>            <span class="hljs-built_in">dir</span>=<span class="hljs-variable">$i</span><br>            <span class="hljs-built_in">break</span><br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;x<span class="hljs-variable">$dir</span>&quot;</span> = <span class="hljs-string">&quot;x&quot;</span> &amp;&amp; ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$dir</span>&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Not a directory: &#x27;<span class="hljs-variable">$dir</span>&#x27;&quot;</span><br>    usage<br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Ignore *~ and *, scripts</span><br>filelist=$(LC_ALL=C; <span class="hljs-built_in">ls</span> -1 <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir&#125;</span>&quot;</span> | grep -vEe <span class="hljs-string">&#x27;[~,]$&#x27;</span>)<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;reverse:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>    filelist=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$filelist</span>&quot;</span> | <span class="hljs-built_in">sort</span> -r)<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$filelist</span>&quot;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> bname ; <span class="hljs-keyword">do</span><br>    fpath=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dir%/&#125;</span>/<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span><br>    [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    <span class="hljs-comment"># Don&#x27;t run *.&#123;disabled,rpmsave,rpmorig,rpmnew,swp,cfsaved&#125; scripts</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.disabled&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.cfsaved&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.rpmsave&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.rpmorig&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.rpmnew&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.swp&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>    [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%,v&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;lsbsysinit:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-comment"># Don&#x27;t run *.&#123;dpkg-old,dpkg-dist,dpkg-new,dpkg-tmp&#125; scripts</span><br>        [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.dpkg-old&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>        [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.dpkg-dist&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>        [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.dpkg-new&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>        [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname%.dpkg-tmp&#125;</span>&quot;</span> != <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> ] &amp;&amp; <span class="hljs-built_in">continue</span><br>        <span class="hljs-comment"># Adhere to LANANA-assigned LSB (hierarchical and reserved) and the Debian cron script namespaces</span><br>        [[ ! <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> =~ ^[a-z0-9]+$ ]] &amp;&amp; \<br>        [[ ! <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> =~ ^_?([a-z0-9_.]+-)+[a-z0-9]+$ ]] &amp;&amp; \<br>        [[ ! <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> =~ ^[a-zA-Z0-9_-]+$ ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$regex</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ]; <span class="hljs-keyword">then</span><br>        [[ ! <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bname&#125;</span>&quot;</span> =~ <span class="hljs-variable">$regex</span> ]] &amp;&amp; <span class="hljs-built_in">continue</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> [ -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> [ -r <span class="hljs-variable">$dir</span>/whitelist ]; <span class="hljs-keyword">then</span><br>            grep -q <span class="hljs-string">&quot;^<span class="hljs-variable">$&#123;bname&#125;</span>$&quot;</span> <span class="hljs-variable">$dir</span>/whitelist &amp;&amp; <span class="hljs-built_in">continue</span><br>        <span class="hljs-keyword">fi</span><br><br>        <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;list:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span>;<br>            <span class="hljs-built_in">continue</span><br>        <span class="hljs-keyword">fi</span><br><br>        <span class="hljs-keyword">if</span> [ -x <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;test:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span>;<br>                <span class="hljs-built_in">continue</span><br>            <span class="hljs-keyword">fi</span><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$RANDOMIZE</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;rtime = <span class="hljs-variable">$RANDOM</span>&quot;</span><br>                <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$RANDOMTIME</span>&quot;</span> != <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;rtime %= <span class="hljs-variable">$RANDOMTIME</span>&quot;</span><br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">let</span> <span class="hljs-string">&quot;rtime %= 300&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                <span class="hljs-built_in">sleep</span> <span class="hljs-variable">$rtime</span><br>            <span class="hljs-keyword">fi</span><br><br>            <span class="hljs-comment"># run executable files</span><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;verbose:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span> &gt; /dev/stderr<br>            <span class="hljs-keyword">fi</span><br><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$umask</span>&quot;</span> != <span class="hljs-string">&quot;x&quot;</span> ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">umask</span> <span class="hljs-variable">$umask</span><br>            <span class="hljs-keyword">fi</span><br><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;report:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                oline=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>\n&quot;</span><br>                <span class="hljs-comment"># do not report script name over stderr in verbose mode</span><br>                <span class="hljs-comment"># no duplicates are needed</span><br>                <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;verbose:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                    eline=<span class="hljs-string">&quot;&quot;</span><br>                <span class="hljs-keyword">else</span><br>                    eline=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>\n&quot;</span><br>                <span class="hljs-keyword">fi</span><br>                &#123; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span> 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;- |<br>                    <span class="hljs-comment"># handle stderr redirected to stdout</span><br>                    report-and-pipe <span class="hljs-string">&quot;<span class="hljs-variable">$eline</span>&quot;</span><br>                &#125; 3&gt;&amp;1 1&gt;&amp;2 |<br>                    <span class="hljs-comment"># handle stdout</span><br>                    report-and-pipe <span class="hljs-string">&quot;<span class="hljs-variable">$oline</span>&quot;</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span><br>            <span class="hljs-keyword">fi</span><br><br>            rc=<span class="hljs-variable">$&#123;PIPESTATUS[0]&#125;</span><br><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;verbose:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;fpath&#125;</span>&quot;</span> <span class="hljs-variable">$args</span> <span class="hljs-built_in">exit</span> status <span class="hljs-variable">$rc</span> &gt; /dev/stderr<br>            <span class="hljs-keyword">fi</span><br><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;rc:-0&#125;</span> != 0 ]; <span class="hljs-keyword">then</span><br>                <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;exit_on_error:-0&#125;</span> = 1 ]; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">exit</span> <span class="hljs-variable">$rc</span><br>                <span class="hljs-keyword">fi</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><h2 id="pam"><a href="#pam" class="headerlink" title="pam"></a>pam</h2><p>在<code>/etc/pam.d/sshd</code>添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">session    optional     pam_exec.so   stdout /usr/bin/update-motd<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#%PAM-1.0</span><br><span class="hljs-comment">#/etc/pam.d/sshd</span><br>auth   requiredpam_sepermit.so<br>auth       substack     password-auth<br>auth       include      postlogin<br><span class="hljs-comment"># Used with polkit to reauthorize users in remote sessions</span><br>-auth      optional     pam_reauthorize.so prepare<br>account    required     pam_nologin.so<br>account    include      password-auth<br>password   include      password-auth<br><span class="hljs-comment"># pam_selinux.so close should be the first session rule</span><br>session    required     pam_selinux.so close<br>session    required     pam_loginuid.so<br><span class="hljs-comment"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span><br>session    required     pam_selinux.so open env_params<br>session    required     pam_namespace.so<br>session    optional     pam_keyinit.so force revoke<br>session    include      password-auth<br>session    include      postlogin<br>session    optional     pam_exec.so   stdout /usr/bin/update-motd<br><span class="hljs-comment"># Used with polkit to reauthorize users in remote sessions</span><br>-session   optional     pam_reauthorize.so prepare<br></code></pre></td></tr></table></figure><h2 id="etc-motd-update-d"><a href="#etc-motd-update-d" class="headerlink" title="&#x2F;etc&#x2F;motd-update.d"></a>&#x2F;etc&#x2F;motd-update.d</h2><p>新建<code>/etc/update_motd.d</code>文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /etc/update_motd.d<br></code></pre></td></tr></table></figure><p>增加脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#/etc/update_motd.d/00-banner</span><br>color=<span class="hljs-string">&quot;\e[1;33m&quot;</span><br>clear=<span class="hljs-string">&quot;\e[m&quot;</span><br><span class="hljs-comment"># figlet  -f chunky &quot;ASRock&quot; </span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;color&#125;</span> ______               __               </span><br><span class="hljs-string">|      |.-----.-----.|  |_.-----.-----.</span><br><span class="hljs-string">|   ---||  -__|     ||   _|  _  |__ --|</span><br><span class="hljs-string">|______||_____|__|__||____|_____|_____|&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-variable">$&#123;clear&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># /etc/update_motd.d/30-body </span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># GREETER SCRIPT FOR ARCHLINUX SRV</span><br><span class="hljs-comment"># https://github.com/Gazeka74/archserver-motd/blob/master/arch-greeter</span><br><br><span class="hljs-comment">#########################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#VARIABLES</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#########################################</span><br><br><span class="hljs-comment"># Kernel information</span><br>kernel=<span class="hljs-string">&quot;<span class="hljs-subst">$(uname -sr)</span>&quot;</span><br><br><span class="hljs-comment"># Uptime</span><br><span class="hljs-built_in">uptime</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$(uptime -p | sed &#x27;s/up //;s/,//g&#x27;)</span>&quot;</span><br><br><span class="hljs-comment"># Numbers of packages installed</span><br><span class="hljs-comment"># packages=&quot;$(pacman -Q | wc -l)&quot;</span><br><br><span class="hljs-comment"># Numbers of updates pending</span><br><span class="hljs-comment"># updates_count=&quot;$(checkupdates | wc -l)&quot;</span><br><br><span class="hljs-comment"># Numbers of IP bannedi</span><br><br><span class="hljs-comment"># f2b=&quot;$(sudo fail2ban-client status sshd | grep &#x27;Currently banned&#x27; | rev | cut -f 1 | rev)&quot;</span><br><span class="hljs-comment"># banned=&quot;$f2b IP banned&quot;</span><br><span class="hljs-comment"># f2b=&quot;$(sudo fail2ban-client status sshd | grep &#x27;Currently banned&#x27; | rev | cut -f 1 | rev)&quot;</span><br><span class="hljs-comment"># banned=&quot;IP banned&quot;</span><br><br><span class="hljs-comment"># Text to be displayed</span><br><span class="hljs-comment"># if (( $updates_count &gt; 0 )); then</span><br><span class="hljs-comment"># updates=&quot;$updates_count updates pending&quot;</span><br><span class="hljs-comment"># else</span><br><span class="hljs-comment"># updates=&quot;$updates_count update pending&quot; </span><br><span class="hljs-comment"># fi</span><br><br><span class="hljs-comment">## Filesystem</span><br><span class="hljs-comment"># Number of &#x27;-&#x27; to be displayed on the filesystem occupation</span><br>number=30<br><br><span class="hljs-comment"># /boot</span><br><span class="hljs-built_in">read</span> boot_a boot_s boot_m boot_pcent &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-subst">$(df -h --output=avail,size,target,pcent /boot | tail -1)</span>&quot;</span><br><br><span class="hljs-comment"># /</span><br><span class="hljs-built_in">read</span> root_a root_s root_m root_pcent&lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-subst">$(df -h --output=avail,size,target,pcent / | tail -1)</span>&quot;</span><br><br><span class="hljs-comment"># /home</span><br><span class="hljs-built_in">read</span> home_a home_s home_m home_pcent&lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-subst">$(df -h --output=avail,size,target,pcent /home | tail -1)</span>&quot;</span><br><br><span class="hljs-comment"># get free memory</span><br><span class="hljs-built_in">read</span> USED FREE TOTAL &lt;&lt;&lt;$(free -htm | grep <span class="hljs-string">&quot;Mem&quot;</span> | awk &#123;<span class="hljs-string">&#x27;print $3,$4,$2&#x27;</span>&#125;)<br><span class="hljs-built_in">read</span> USEDSW FREESW TOTALSW &lt;&lt;&lt;$(free -htm | grep <span class="hljs-string">&quot;Swap&quot;</span> | awk &#123;<span class="hljs-string">&#x27;print $3,$4,$2&#x27;</span>&#125;)<br><br><span class="hljs-comment"># get processes</span><br>PROCESS=`ps -eo user=|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span> -c | awk <span class="hljs-string">&#x27;&#123; print $2 &quot; &quot; $1 &#125;&#x27;</span>`<br>PROCESS_ALL=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PROCESS</span>&quot;</span>| awk &#123;<span class="hljs-string">&#x27;print $2&#x27;</span>&#125; | awk <span class="hljs-string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`<br>PROCESS_ROOT=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PROCESS</span>&quot;</span>| grep root | awk &#123;<span class="hljs-string">&#x27;print $2&#x27;</span>&#125;`<br>PROCESS_USER=`<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PROCESS</span>&quot;</span>| grep -v root | awk &#123;<span class="hljs-string">&#x27;print $2&#x27;</span>&#125; | awk <span class="hljs-string">&#x27;&#123; SUM += $1&#125; END &#123; print SUM &#125;&#x27;</span>`<br><br><span class="hljs-comment">## Colors</span><br>bold=<span class="hljs-string">&quot;\033[01;1m&quot;</span><br>black=<span class="hljs-string">&quot;\033[01;36m&quot;</span><br>red=<span class="hljs-string">&quot;\033[01;31m&quot;</span><br>green=<span class="hljs-string">&quot;\033[01;32m&quot;</span><br>yellow=<span class="hljs-string">&quot;\033[01;33m&quot;</span><br>blue=<span class="hljs-string">&quot;\033[01;34m&quot;</span><br>magenta=<span class="hljs-string">&quot;\033[01;35m&quot;</span><br>cyan=<span class="hljs-string">&quot;\033[01;36m&quot;</span><br>white=<span class="hljs-string">&quot;\033[01;37m&quot;</span><br>reset=<span class="hljs-string">&quot;\033[0m&quot;</span><br><br>beg=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;c1&#125;</span> <span class="hljs-variable">$&#123;c0&#125;</span>&quot;</span><span class="hljs-comment"># in front of information</span><br>c0=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;reset&#125;</span><span class="hljs-variable">$&#123;blue&#125;</span><span class="hljs-variable">$&#123;bold&#125;</span>&quot;</span><span class="hljs-comment"># logo + text 1 color</span><br>c1=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;reset&#125;</span><span class="hljs-variable">$&#123;white&#125;</span><span class="hljs-variable">$&#123;bold&#125;</span>&quot;</span><span class="hljs-comment"># text 2 color</span><br>upd_color=<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># updates based on amount</span><br><br><span class="hljs-comment">#########################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#FUNCTIONS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#########################################</span><br><br><span class="hljs-comment"># Displays a progression bar of the FS depending on the available space and the total space</span><br><span class="hljs-comment"># $PARAM1 = percentage used</span><br><span class="hljs-function"><span class="hljs-title">bar</span></span> () &#123;<br>temp1=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1%?&#125;</span>&quot;</span><span class="hljs-comment"># Remove last character</span><br>temp2=$((<span class="hljs-variable">$temp1</span>*<span class="hljs-variable">$number</span>/<span class="hljs-number">100</span>))<span class="hljs-comment"># Number of #</span><br><br>str=<span class="hljs-string">&quot;[&quot;</span><span class="hljs-comment"># Initiate</span><br><br><span class="hljs-comment"># Add a color to the output</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$temp1</span> &gt; <span class="hljs-number">75</span>)); <span class="hljs-keyword">then</span><br>str+=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;red&#125;</span>&quot;</span><br><span class="hljs-keyword">elif</span> ((<span class="hljs-variable">$temp1</span> &gt; <span class="hljs-number">50</span>)); <span class="hljs-keyword">then</span><br>str+=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;yellow&#125;</span>&quot;</span><br><span class="hljs-keyword">elif</span> ((<span class="hljs-variable">$temp1</span> &gt; <span class="hljs-number">25</span>)); <span class="hljs-keyword">then</span><br>str+=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;green&#125;</span>&quot;</span><br><span class="hljs-keyword">else</span> <br>str+=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;white&#125;</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># Fill with &#x27;#&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 <span class="hljs-variable">$temp2</span>)<br><span class="hljs-keyword">do</span><br>str+=<span class="hljs-string">&quot;=&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># reset the color</span><br>str+=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;white&#125;</span>&quot;</span><br><br><span class="hljs-comment"># Fill with &#x27;-&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> <span class="hljs-variable">$temp2</span> <span class="hljs-variable">$number</span>)<br><span class="hljs-keyword">do</span><br>str+=<span class="hljs-string">&quot;-&quot;</span><br><span class="hljs-keyword">done</span><br>str+=<span class="hljs-string">&quot;]&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$str</span><br>&#125;<br><br>boot_bar=$(bar <span class="hljs-variable">$boot_pcent</span>)<br>root_bar=$(bar <span class="hljs-variable">$root_pcent</span>)<br>home_bar=$(bar <span class="hljs-variable">$home_pcent</span>)<br><br><span class="hljs-comment">## Memory</span><br><br><span class="hljs-keyword">while</span> IFS=<span class="hljs-string">&quot;:&quot;</span> <span class="hljs-built_in">read</span> -r a b; <span class="hljs-keyword">do</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;MemTotal&quot;</span>) ((mem_used+=<span class="hljs-variable">$&#123;b/kB&#125;</span>)); mem_total=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;b/kB&#125;</span>&quot;</span> ;;<br><span class="hljs-string">&quot;Shmem&quot;</span>) ((mem_used+=<span class="hljs-variable">$&#123;b/kB&#125;</span>))  ;;<br><span class="hljs-string">&quot;MemFree&quot;</span> | <span class="hljs-string">&quot;Buffers&quot;</span> | <span class="hljs-string">&quot;Cached&quot;</span> | <span class="hljs-string">&quot;SReclaimable&quot;</span>)<br>mem_used=<span class="hljs-string">&quot;<span class="hljs-subst">$((mem_used-=$&#123;b/kB&#125;)</span>)&quot;</span><br>;;<br><span class="hljs-comment"># Available since Linux 3.14rc (34e431b0ae398fc54ea69ff85ec700722c9da773).</span><br><span class="hljs-comment"># If detected this will be used over the above calculation for mem_used.</span><br><span class="hljs-string">&quot;MemAvailable&quot;</span>)<br>mem_avail=<span class="hljs-variable">$&#123;b/kB&#125;</span><br>;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span> &lt; /proc/meminfo<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$mem_avail</span> ]]; <span class="hljs-keyword">then</span><br>mem_used=$(((mem_total - mem_avail) / <span class="hljs-number">1024</span>))<br><span class="hljs-keyword">else</span><br>mem_used=<span class="hljs-string">&quot;<span class="hljs-subst">$((mem_used / 1024)</span>)&quot;</span><br><span class="hljs-keyword">fi</span><br><br>mem_total=<span class="hljs-string">&quot;<span class="hljs-subst">$((mem_total / 1024)</span>)&quot;</span><br><br>mem_perc=<span class="hljs-string">&quot;<span class="hljs-subst">$((mem_used * 100 / mem_total)</span>)&quot;</span><br><br>mem_used=$(awk <span class="hljs-string">&#x27;&#123;printf &quot;%.2f&quot;, $1 / $2&#125;&#x27;</span> &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$mem_used</span> 1024&quot;</span>)<br>mem_total=$(awk <span class="hljs-string">&#x27;&#123;printf &quot;%.2f&quot;, $1 / $2&#125;&#x27;</span> &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$mem_total</span> 1024&quot;</span>)<br>mem_label=GiB<br><br>memory=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;yellow&#125;</span><span class="hljs-variable">$&#123;mem_used&#125;</span><span class="hljs-variable">$&#123;mem_label:-MiB&#125;</span> <span class="hljs-variable">$&#123;white&#125;</span>/ <span class="hljs-variable">$&#123;blue&#125;</span><span class="hljs-variable">$&#123;mem_total&#125;</span><span class="hljs-variable">$&#123;mem_label:-MiB&#125;</span> <span class="hljs-variable">$&#123;white&#125;</span><span class="hljs-variable">$&#123;mem_perc:+(<span class="hljs-variable">$&#123;mem_perc&#125;</span>%)&#125;</span>&quot;</span><br><br>memory_bar=<span class="hljs-string">&quot;<span class="hljs-subst">$(bar <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;mem_perc&#125;</span>%&quot;</span>)</span>&quot;</span><br><br><br><span class="hljs-comment">#########################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#PROCESSING</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#########################################</span><br><br><span class="hljs-comment"># Setting updates color </span><br><span class="hljs-comment"># if (( $updates_count &gt; 15 )); then</span><br><span class="hljs-comment"># upd_color=&quot;$&#123;reset&#125;$&#123;red&#125;&quot;</span><br><span class="hljs-comment"># elif (( $updates_count &gt; 5 )); then</span><br><span class="hljs-comment"># upd_color=&quot;$&#123;reset&#125;$&#123;yellow&#125;&quot;</span><br><span class="hljs-comment"># else</span><br><span class="hljs-comment"># upd_color=&quot;$&#123;reset&#125;$&#123;white&#125;&quot;</span><br><span class="hljs-comment"># fi</span><br><br>cpu=`<span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;name&quot;</span> | <span class="hljs-built_in">uniq</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f2 | sed <span class="hljs-string">&#x27;s/ //;s/(TM)//g;s/(R)//g;s/CPU//;s/  / /&#x27;</span>`<br>proc=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;yellow&#125;</span>$PROCESS_ROOT<span class="hljs-variable">$&#123;c1&#125;</span> (r), <span class="hljs-variable">$&#123;yellow&#125;</span>$PROCESS_USER<span class="hljs-variable">$&#123;c1&#125;</span> (u) | <span class="hljs-variable">$&#123;yellow&#125;</span>$PROCESS_ALL<span class="hljs-variable">$&#123;c1&#125;</span> (t)&quot;</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;white&#125;</span><span class="hljs-variable">$&#123;bold&#125;</span>--------------------------------------------------------------------------------</span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span>KERNEL:<span class="hljs-variable">$&#123;c1&#125;</span><span class="hljs-variable">$&#123;kernel&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span>UPTIME:<span class="hljs-variable">$&#123;c1&#125;</span><span class="hljs-variable">$&#123;uptime&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span>Proc:<span class="hljs-variable">$&#123;c1&#125;</span><span class="hljs-variable">$&#123;proc&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span>CPU:<span class="hljs-variable">$&#123;c1&#125;</span><span class="hljs-variable">$&#123;cpu&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span>Memory:<span class="hljs-variable">$&#123;memory&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;c0&#125;</span> <span class="hljs-variable">$&#123;beg&#125;</span><span class="hljs-variable">$&#123;c1&#125;</span><span class="hljs-variable">$&#123;memory_bar&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;white&#125;</span><span class="hljs-variable">$&#123;bold&#125;</span>--------------------------------------------------------------------------------</span><br><span class="hljs-string">FILESYSTEMTOTALAVAILUSED</span><br><span class="hljs-string"><span class="hljs-variable">$root_m</span><span class="hljs-variable">$root_s</span><span class="hljs-variable">$root_a</span><span class="hljs-variable">$root_pcent</span><span class="hljs-variable">$&#123;root_bar&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$boot_m</span><span class="hljs-variable">$boot_s</span><span class="hljs-variable">$boot_a</span><span class="hljs-variable">$boot_pcent</span><span class="hljs-variable">$&#123;boot_bar&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$home_m</span><span class="hljs-variable">$home_s</span><span class="hljs-variable">$home_a</span><span class="hljs-variable">$home_pcent</span><span class="hljs-variable">$&#123;home_bar&#125;</span></span><br><span class="hljs-string"><span class="hljs-variable">$&#123;white&#125;</span><span class="hljs-variable">$&#123;bold&#125;</span>--------------------------------------------------------------------------------&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Centos</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈推送原理</title>
    <link href="/posts/c77b7b69.html"/>
    <url>/posts/c77b7b69.html</url>
    
    <content type="html"><![CDATA[<p>不管是否是程序员，App推送一定都不陌生。微信，QQ，淘宝的App，每天时不时发一些推送吸引用户点击进去。而这个常见的功能，可没有看到的这么简单。</p><span id="more"></span><h2 id="从-Andorid-与-ios-的内存说起"><a href="#从-Andorid-与-ios-的内存说起" class="headerlink" title="从 Andorid 与 ios 的内存说起"></a>从 Andorid 与 ios 的内存说起</h2><p>大家一定有对苹果手机和安卓手机的内存很好奇，明明安卓手机的内存比苹果手机的要大，为什么运行体验就是不如苹果手机流畅？</p><p>其中一个原因是，Android以前的推送需要App后台常驻。大部分的推送逻辑是通过App保活程序与推送服务器建立连接，通过轮训或者ws的方式进行推送。</p><p>这个方案的优点是，推送由开发者自己掌控，有更多的灵活性。缺点也很明显，每一家的App都要求后台保活，用户手机的运存就越来越少，导致Android手机很卡的现象。</p><p>当然，Google也是在作出努力的，只有Android手机上有Google Play 服务，就能使用FCM推送。然而，国内手机厂商都把Google Play 服务从自己的定制ROM包中阉割了，而且Google在国内几乎没法服务。再者，国内厂商为了自己的手机流畅，几乎把后台管得死死的，没有点实力的App，想常驻后台，几乎是不可能的。</p><blockquote><p>不过，对于普通的应用关闭之后不看它推送的消息也没有大的影响，但是对于即时通讯软件来说，没了推送，还何谈「即时」？而对于很多应用来说，没了推送通知，用户的打开概率也就更小了，这可是应用收入来源的基本盘，怎么可能就这样放弃。于是，也就催生了各种「毒瘤」应用，「保活」和「唤醒」在应用开发中的重要性也越来越高，为了防止系统「杀后台」，也做得越来越隐蔽了。</p><p>作者：爱范儿<br>链接：<a href="https://www.zhihu.com/question/439729608/answer/1940755112">https://www.zhihu.com/question/439729608/answer/1940755112</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="国内的“统一”推送"><a href="#国内的“统一”推送" class="headerlink" title="国内的“统一”推送"></a>国内的“统一”推送</h2><p>国内的各大厂商，如小米，华为，魅族，OPPO等基本上都有自己的推送服务，让开发者能针对自己的手机用户单独适配推送功能。但是App又不仅仅是给单一手机厂商的用户使用，为了让开发者更容易接入各大厂商的推送渠道，友盟，个推，tpns，阿里云消息推送这类聚合推送的服务就有了用武之地。</p><p>拿tpns来说。开发者在tpns的控制台新建一个应用，将各大厂商的推送id和key放在tpns中，只有使用同一套tpns的token，就可以给指定的App发送推送信息。</p><p>看似解决了统一推送的问题，但是其中有很多坑。</p><h2 id="聚合推送的坑"><a href="#聚合推送的坑" class="headerlink" title="聚合推送的坑"></a>聚合推送的坑</h2><p>要说明聚合推送的坑，那就先讲清楚聚合推送是怎么工作的。</p><p>还是拿tpns来说，在手机厂商禁止后台常驻的情况下，App如果是在后台，则使用tpns自己的渠道，直接推送给App，由App自己处理通知效果和点击回调页。当App不在后台，tpns会使用厂商渠道给手机进行推送。坑就出现在这里。</p><p>当App在后台时，tpns的表现是那么的完美，能自定义播放App上的铃声，送达率还能接受。但是App一旦被杀死，走各大厂商的渠道时，表现就不统一了。每家手机厂商对推送的处理是不一样的，有些厂商甚至会“智能”判断通知为广告而不播放通知铃声和振动（说的就是小米）。甚至有些厂商自己没有推送渠道，而导致推送根本就没法送达（譬如用手做包，用脚做手机的一加）。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>即使是ios的APNs也不可避免推送延迟的问题，相比国内的推送乱象，统一推送还是目前最好的解决方案。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.zhihu.com/question/439729608/answer/1940755112">知乎</a>–作者：爱范儿</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Contos 7 上安装 node jieba</title>
    <link href="/posts/b37135fb.html"/>
    <url>/posts/b37135fb.html</url>
    
    <content type="html"><![CDATA[<p>本来想在 centos 上安装 nodejieba，奈何 Centos7 上面的 gcc 的动态库太老，一直没办法更新动态库。</p><span id="more"></span><p>在 nodejieba 的 issues 找了一圈，发现了用 rust 实现的 node jiba 扩展：<a href="https://github.com/napi-rs/node-rs/tree/main/packages/jieba">@node-rs&#x2F;jieba</a></p><p>一波操作后，运行提示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">/lib64/libc.so.6: version `GLIBC_2.18&#x27; not found<br></code></pre></td></tr></table></figure><p>又是动态库的问题，百度一波，找到一篇博客：<a href="https://www.cnblogs.com/g2thend/p/14032864.html">centos 升级到 GLIBC_2.18</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1、下载文件</span><br>下载地址：https://mirrors.tuna.tsinghua.edu.cn/gnu/glibc/glibc-2.18.tar.gz<br><br><span class="hljs-comment"># 2、安装部署</span><br><span class="hljs-comment"># 解压</span><br>tar -zxvf  glibc-2.18.tar.gz<br><br><span class="hljs-comment"># 创建编译目录</span><br><span class="hljs-built_in">cd</span> glibc-2.18 <br><span class="hljs-built_in">mkdir</span> build<br><br><span class="hljs-comment"># 编译、安装</span><br><span class="hljs-built_in">cd</span> build/<br>../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin<br><br>make -j 8<br>make install<br><br><span class="hljs-comment">### 系统版本</span><br>7.8.2003  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>周刊 （第 7 期）</title>
    <link href="/posts/545569c1.html"/>
    <url>/posts/545569c1.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="showdoc"><a href="#showdoc" class="headerlink" title="showdoc"></a><a href="https://github.com/star7th/showdoc">showdoc</a></h3><p>一个非常适合 IT 团队的在线 API 文档、技术文档工具</p><p><img src="https://www.showdoc.cc/static/img/home1.cf81ad2.png" alt="showdoc"></p><h3 id="todo-txt-cli"><a href="#todo-txt-cli" class="headerlink" title="todo.txt-cli"></a><a href="https://github.com/todotxt/todo.txt-cli">todo.txt-cli</a></h3><p><img src="https://github.com/todotxt/todo.txt-cli/raw/master/.github/example.gif" alt="todo.txt-cli"></p><p>一个简单的可扩展 shell 脚本，用于管理 todo.txt 文件。</p><h2 id="fkill-cli"><a href="#fkill-cli" class="headerlink" title="fkill-cli"></a><a href="https://github.com/sindresorhus/fkill-cli">fkill-cli</a></h2><p>Nodejs 实现的进程 kill 工具，可跨平台使用。</p><p><img src="https://raw.githubusercontent.com/sindresorhus/fkill-cli/main/screenshot.svg" alt="fkill-cli"></p><h3 id="awesome-cli-apps"><a href="#awesome-cli-apps" class="headerlink" title="awesome-cli-apps"></a><a href="https://github.com/agarrharr/awesome-cli-apps">awesome-cli-apps</a></h3><p><img src="https://camo.githubusercontent.com/932efac17ea0431a02f9eac61d2ab6e290c894e17ca735b73f4bc62ac3702dd0/68747470733a2f2f63646e2e7261776769742e636f6d2f6168617272697338382f617765736f6d652d636c692d617070732f6d61737465722f6d656469612f62616e6e65722e706e67" alt="awesome-cli-apps"></p><p>这个项目收集了很多不错的命令行工具</p><h3 id="modern-unix"><a href="#modern-unix" class="headerlink" title="modern-unix"></a><a href="https://github.com/ibraheemdev/modern-unix">modern-unix</a></h3><p><img src="https://camo.githubusercontent.com/c436c206f2c86605ab2f9fb632dd485afc05fccbf14af472770b0c59d876c9cc/68747470733a2f2f692e696d6775722e636f6d2f326c53573452452e706e67" alt="bat"></p><p><img src="https://raw.githubusercontent.com/ogham/exa/master/screenshots.png" alt="exa"></p><p>现代的 unix 命令工具集合。</p><h3 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a><a href="https://github.com/chalk/chalk">chalk</a></h3><p><img src="https://raw.githubusercontent.com/chalk/chalk/625a2857722fb86cfe98f22c9c12888238e36f51/media/logo.svg" alt="logo"></p><p><img src="https://camo.githubusercontent.com/6b0dc65e5c1d4f1f53aac072b8bb0ef92f7e9cd513bde35cdf609e10ab0d3226/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6368616c6b2f616e73692d7374796c657340383236313639376339356266333462366337373637653263626539393431613835316435393338352f73637265656e73686f742e737667" alt="demo"></p><p>使用 Nodejs 写命令行工具或者打印提示时，这个库可以帮你很方便的给命令行的文字添加样式</p><h3 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a><a href="https://github.com/vercel/pkg">pkg</a></h3><p><img src="https://camo.githubusercontent.com/355811f40937ffc26fe79b9dacfe6435760e3cec7d9fa14fdb82cdbce6523de2/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f7a6569742d696e632f696d6167652f75706c6f61642f76313530393933363738392f7265706f7369746f726965732f706b672f706b672d7265706f2d62616e6e65722d6e65772e706e67" alt="pkg"></p><p>将你的 nodejs 打包成可执行程序</p><h3 id="slidev"><a href="#slidev" class="headerlink" title="slidev"></a><a href="https://github.com/slidevjs/slidev">slidev</a></h3><p><img src="https://camo.githubusercontent.com/fb0c6af9dd783d6e51acde314b22a15c0b3a862eb674989ce45b36734de97578/68747470733a2f2f736c692e6465762f6c6f676f2d7469746c652e706e67" alt="slidev"></p><p>面向开发人员的演示幻灯片，可是使用 Markdown 其实实现 ppt</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="You-Dont-Need-GUI"><a href="#You-Dont-Need-GUI" class="headerlink" title="You-Dont-Need-GUI"></a><a href="https://github.com/you-dont-need/You-Dont-Need-GUI">You-Dont-Need-GUI</a></h3><p><img src="https://raw.githubusercontent.com/you-dont-need/You-Dont-Need-GUI/master/Xerox_Star_8010_workstations.jpg" alt="You-Dont-Need-GUI"></p><p>you don’t need 系列，为什么不需要 GUI 的理由。</p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>把 4W 条数据放在内存中执行</title>
    <link href="/posts/ad5468c0.html"/>
    <url>/posts/ad5468c0.html</url>
    
    <content type="html"><![CDATA[<p>昨天晚上，朋友问我，怎么把四万条数据放到内存中处理？</p><span id="more"></span><p>作为Nodejser，我是不喜欢一次处理这么多数据的，或者说不希望四万条数据都放在内存中。进一步询问，我才知道问题是这样的。</p><p>现在有三类数据，都是数组保存，对这三类数据按顺序排列组合，会得到4W种可能，需要把这4W种结果发送网络请求。</p><p>那么问题就从怎么把4W条数据保存在内存简化为排列组合问题了。</p><h2 id="简化问题"><a href="#简化问题" class="headerlink" title="简化问题"></a>简化问题</h2><p>假设现在有三类数据分别为A，B，C，组合形式为<code>AiBjCk</code>。这个问题就能简化为类似进制问题。</p><p>我们把C的数据看为个位，B的数据看为十位，A为百位。当C遍历一次，B下标进一位，当B遍历一次A下标进一位，当A遍历一次，就是全部的排列组合。</p><h2 id="Show-Time"><a href="#Show-Time" class="headerlink" title="Show Time"></a>Show Time</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getList</span>(<span class="hljs-params">A, B, C</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Ai</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Bi</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Ci</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Al</span> = A.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Bl</span> = B.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Cl</span> = C.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">length = <span class="hljs-number">10</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> list = [];<br>        <span class="hljs-keyword">let</span> list_i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (list_i &lt; length) &#123;<br>            <span class="hljs-keyword">if</span> (A[<span class="hljs-title class_">Ai</span>] === <span class="hljs-literal">undefined</span>) &#123;<br>                <span class="hljs-keyword">return</span> list;<br>            &#125;<br>            list[list_i] = [A[<span class="hljs-title class_">Ai</span>], B[<span class="hljs-title class_">Bi</span>], C[<span class="hljs-title class_">Ci</span>]];<br>            <span class="hljs-title class_">Ci</span>++; <span class="hljs-comment">// C位自增</span><br>            list_i++;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Ci</span> &gt; <span class="hljs-title class_">Cl</span>) &#123;<br>                <span class="hljs-comment">// Ci自增超出Cl，B进位，Ci归零</span><br>                <span class="hljs-title class_">Bi</span>++;<br>                <span class="hljs-title class_">Ci</span> = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Bi</span> &gt; <span class="hljs-title class_">Bl</span>) &#123;<br>                <span class="hljs-comment">// Bi自增超出Bl，Ai进位，Bi归零</span><br>                <span class="hljs-title class_">Ai</span>++;<br>                <span class="hljs-title class_">Bi</span> = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Ai</span> &gt; <span class="hljs-title class_">Al</span>) &#123;<br>                <span class="hljs-comment">// Ai 自增超过Al,返回之前的数据</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> A = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">let</span> B = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>, <span class="hljs-number">77</span>];<br><span class="hljs-keyword">let</span> C = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">20</span>, <span class="hljs-number">4</span>];<br><span class="hljs-title class_">List</span> = <span class="hljs-title function_">getList</span>(A,B,C);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">List</span>(<span class="hljs-number">15</span>));<br></code></pre></td></tr></table></figure><p>这里就用到闭包来解决这个问题。为什么用闭包？因为不想内部变量被修改。这个代码没有对传入参数进行检验和拦截，大家凑活看吧。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊（第 6 期）</title>
    <link href="/posts/adbb555.html"/>
    <url>/posts/adbb555.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="awesome-for-beginners"><a href="#awesome-for-beginners" class="headerlink" title="awesome-for-beginners"></a><a href="https://github.com/MunGell/awesome-for-beginners">awesome-for-beginners</a></h3><p>各种编程语言的入门项目。</p><span id="more"></span><h3 id="project-based-learning"><a href="#project-based-learning" class="headerlink" title="project-based-learning"></a><a href="https://github.com/tuvtran/project-based-learning">project-based-learning</a></h3><p>和上面的项目差不多，基于项目学习。</p><h3 id="awesome-nodejs"><a href="#awesome-nodejs" class="headerlink" title="awesome-nodejs"></a><a href="https://github.com/sindresorhus/awesome-nodejs">awesome-nodejs</a></h3><p><img src="https://raw.githubusercontent.com/sindresorhus/awesome-nodejs/main/media/logo.svg" alt="awesome-nodejs"></p><p>这个项目里面收集了大量优秀的 nodejs 项目</p><h3 id="33-js-concepts"><a href="#33-js-concepts" class="headerlink" title="33-js-concepts"></a><a href="https://github.com/leonardomso/33-js-concepts">33-js-concepts</a></h3><p><img src="https://camo.githubusercontent.com/1bb813c7e21e016bd26a1d2bcd39c11653df76695daa2e1d7d4f50a60c41aa53/68747470733a2f2f692e696d6775722e636f6d2f6473486d6b36482e6a7067" alt="33-js-concepts"></p><p>每一个 JavaScript 开发者都应该知道的 33 个概念。</p><h3 id="hackathon-starter"><a href="#hackathon-starter" class="headerlink" title="hackathon-starter"></a><a href="https://github.com/sahat/hackathon-starter">hackathon-starter</a></h3><p><img src="https://camo.githubusercontent.com/949ff8d7e24c03fd853970ad4552c28d9cfadbd0e1d962c3e30344751e0ab5fa/68747470733a2f2f6c68342e676f6f676c6575736572636f6e74656e742e636f6d2f2d5056772d5a554d397656382f557557654835316f7330492f414141414141414144364d2f30496b673776694a6674512f77313238362d683536362d6e6f2f6861636b6174686f6e2d737461727465722d6c6f676f2e6a7067" alt="hackathon-starter"></p><p>Node.js Web 应用程序的样板</p><h3 id="nativefier"><a href="#nativefier" class="headerlink" title="nativefier"></a><a href="https://github.com/nativefier/nativefier">nativefier</a></h3><p><img src="https://raw.githubusercontent.com/nativefier/nativefier/master/.github/nativefier-walkthrough.gif" alt="nativefier"></p><p>一个可以将 web 页面生成为本地 app 的工具</p><h3 id="NeteaseCloudMusicApi"><a href="#NeteaseCloudMusicApi" class="headerlink" title="NeteaseCloudMusicApi"></a><a href="https://github.com/Binaryify/NeteaseCloudMusicApi">NeteaseCloudMusicApi</a></h3><p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/docs.png" alt="docs.png"></p><p>网易云音乐 API，可以通过这个项目学习爬虫哦。</p><h3 id="Inquirer-js"><a href="#Inquirer-js" class="headerlink" title="Inquirer.js"></a><a href="https://github.com/SBoudrias/Inquirer.js">Inquirer.js</a></h3><p><img src="https://camo.githubusercontent.com/61a2d06601cf57261784ce01d1d37653864e391c5da5953948503b4026cfc6cc/68747470733a2f2f63646e2e7261776769742e636f6d2f53426f7564726961732f496e7175697265722e6a732f323861653833333762613531643933653335396566346637656532346537396236393839383936322f6173736574732f73637265656e73686f74732f6c6973742e737667" alt="Inquirer.js"></p><p>一个交互式命令行界面模块，在很多 nodejs 实现的命令行工具中都有用到。</p><h3 id="wiki"><a href="#wiki" class="headerlink" title="wiki"></a><a href="https://github.com/Requarks/wiki">wiki</a></h3><p><img src="https://js.wiki/img/wikijs-full-2021.b840e376.svg" alt="wikijs-full-2021.b840e376.svg"></p><p><img src="https://js.wiki/img/wiki-screenshot-2x.830b799c.png" alt="wiki-screenshot-2x.830b799c.png"></p><p>Nodejs 和 Vue 实现的 wiki 项目</p><h3 id="javascript-testing-best-practices"><a href="#javascript-testing-best-practices" class="headerlink" title="javascript-testing-best-practices"></a><a href="https://github.com/goldbergyoni/javascript-testing-best-practices">javascript-testing-best-practices</a></h3><p><img src="https://raw.githubusercontent.com/goldbergyoni/javascript-testing-best-practices/master/assets/jtbp-header-blue.png" alt="jtbp-header-blue"></p><p>JavaScript 测试最佳实践</p><h3 id="verdaccio"><a href="#verdaccio" class="headerlink" title="verdaccio"></a><a href="https://github.com/verdaccio/verdaccio">verdaccio</a></h3><p><img src="https://camo.githubusercontent.com/9ea80fc64c8c54ea0d003f74fedbe2a90beaddac619f4a15d0cbdf7d43ce9cb6/68747470733a2f2f63646e2e76657264616363696f2e6465762f726561646d652f76657264616363696f4032782e706e67" alt="verdaccio"></p><p><img src="https://camo.githubusercontent.com/a5fb81a8f3bac8d1128cee19b01c28dad4fc1c9a4396acaa1ae4191b1a4b5e57/68747470733a2f2f63646e2e76657264616363696f2e6465762f726561646d652f726561646d652d776562736974652e706e67" alt="page"></p><p>npmjs 的私有仓库是要钱的，于是有了这个项目，可以把 npm 私有包放在内网。</p><h3 id="signale"><a href="#signale" class="headerlink" title="signale"></a><a href="https://github.com/klaussinani/signale">signale</a></h3><p><img src="https://raw.githubusercontent.com/klaussinani/signale/master/media/header.png" alt="signale"></p><p>高度可配置的日志模块。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a><a href="https://github.com/airbnb/javascript">javascript</a></h3><p>Airbnb JavaScript 风格指南</p><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a><a href="https://github.com/standard/standard">standard</a></h3><p><img src="https://camo.githubusercontent.com/5c1450bab00db5d4f6c877d30f9a68c4d88968e9b5b7eb87af285c106220e99b/68747470733a2f2f63646e2e7261776769742e636f6d2f7374616e646172642f7374616e646172642f6d61737465722f737469636b65722e737667" alt="standard"></p><p>JavaScript 代码规范，自带 linter &amp; 代码自动修正</p><h3 id="modern-js-cheatsheet"><a href="#modern-js-cheatsheet" class="headerlink" title="modern-js-cheatsheet"></a><a href="https://github.com/mbeaudru/modern-js-cheatsheet">modern-js-cheatsheet</a></h3><p><img src="https://camo.githubusercontent.com/b1b3992fdf23c8f3f90dd60b7f9fce27c8433ca3481749327416664855995309/68747470733a2f2f692e696d6775722e636f6d2f61657850784d622e706e67" alt="modern-js-cheatsheet"></p><p>现代 JavaScript 备忘录</p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建多人开发的 Nodejs 开发环境</title>
    <link href="/posts/9541e6fe.html"/>
    <url>/posts/9541e6fe.html</url>
    
    <content type="html"><![CDATA[<p>在多人协作下，工具统一是很重要，以下是我在多人协作开发 Nodejs 项目的一些配置。</p><span id="more"></span><h2 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h2><p>VSCode 一直是为开发 nodejs 的主力编辑器，大部分编码约束都是通过 VSCode 的插件完成的。</p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></h3><p><img src="https://dbaeumer.gallerycdn.vsassets.io/extensions/dbaeumer/vscode-eslint/2.1.23/1623763213709/Microsoft.VisualStudio.Services.Icons.Default" alt="ESLint"></p><p>ESLint 是 ES 语法检查格式化工具，ESLint 在整个规范化中担任着重要的角色。</p><p>我的 ESLint 配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; eslint</span><br>    <span class="hljs-attr">&quot;eslint.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; eslint</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="docthis"><a href="#docthis" class="headerlink" title="docthis"></a><a href="https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis">docthis</a></h3><p><img src="https://github.com/oouo-diogo-perdigao/vscode-docthis/raw/master/images/demo.gif" alt="docthis"></p><p>为了统一代码方法注释，使用 <a href="https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis">docthis</a> 对方法和类进行注释</p><p>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; docthis</span><br>    <span class="hljs-attr">&quot;docthis.includeAuthorTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Author</span><br>    <span class="hljs-attr">&quot;docthis.authorName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.dateTagFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDateTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDescriptionTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Description</span><br>    <span class="hljs-comment">// &gt;&gt; docthis</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="korofileheader"><a href="#korofileheader" class="headerlink" title="korofileheader"></a><a href="https://marketplace.visualstudio.com/items?itemName=OBKoro1.korofileheader">korofileheader</a></h3><p><img src="https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif" alt="korofileheader"></p><p>在 vscode 中用于生成文件头部注释和函数注释的插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; koro 头部注释配置</span><br>    <span class="hljs-attr">&quot;fileheader.customMade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;fileheader.configObj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; */&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;!--&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; --&gt;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; koro 注释格式配置</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="better-comments"><a href="#better-comments" class="headerlink" title="better-comments"></a><a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">better-comments</a></h3><p><img src="https://github.com/aaron-bond/better-comments/raw/master/images/better-comments.PNG" alt="better-comments"></p><p>在对某一行代码进行注释时，可以使用这个插件实现注释高亮，我一般用在写逻辑 TODO 说明时使用，在完成一个 TODO 后修改高亮方式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; better-comments 自定义注释高亮颜色</span><br>    <span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 警告</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF2D00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 疑问</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3498DB&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;//&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 删除注释</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#474747&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;todo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// TODO</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF8C00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 完成标志</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 说明</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#99FB37&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围开始</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2D660&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围结束</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#60D6F2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; better-comments</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Pangu-Markdown"><a href="#Pangu-Markdown" class="headerlink" title="Pangu-Markdown"></a><a href="https://marketplace.visualstudio.com/items?itemName=xlthu.Pangu-Markdown">Pangu-Markdown</a></h3><p>一般项目中都会有 Markdown 文件，这个插件可以规范 Markdown 格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pangu.auto_format_on_save&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了上面的插件配置，还有一些常见的编辑器配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 启用后，差异编辑器将忽略前导空格或尾随空格中的更改。</span><br>    <span class="hljs-attr">&quot;files.eol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &lt;&lt; javascript</span><br>    <span class="hljs-comment">// JavaScript 格式化程序</span><br>    <span class="hljs-attr">&quot;javascript.format.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 始终自动更新路径。</span><br>    <span class="hljs-attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vscode.typescript-language-features&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; javascript</span><br>    <span class="hljs-comment">// &lt;&lt; editor</span><br>    <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 编辑器的分割字符处理，在下面去掉 - 就可以做到。class-name 双击全选</span><br>    <span class="hljs-attr">&quot;editor.wordSeparators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;`~!@#$%^&amp;*()=+[&#123;]&#125;\\|;:&#x27;\&quot;,.&lt;&gt;/?&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 按 &quot;Tab&quot; 时插入空格。</span><br>    <span class="hljs-attr">&quot;editor.insertSpaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 一个制表符等于的空格数。 </span><br>    <span class="hljs-comment">// &quot;editor.tabSize&quot;: 4,</span><br>    <span class="hljs-attr">&quot;editor.wordWrap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pangu.auto_format_on_save&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &lt;&lt; better-comments 自定义注释高亮颜色</span><br>    <span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 警告</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF2D00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 疑问</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3498DB&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;//&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 删除注释</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#474747&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;todo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// TODO</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF8C00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 完成标志</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 说明</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#99FB37&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围开始</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2D660&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围结束</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#60D6F2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; better-comments</span><br>    <span class="hljs-comment">// &lt;&lt; koro 头部注释配置</span><br>    <span class="hljs-attr">&quot;fileheader.customMade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;fileheader.configObj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; */&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;!--&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; --&gt;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; koro 注释格式配置</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里，我把编辑器的制表符设置为 4，大家可以根据自己的喜好修改显示的长度。</p><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><p>这里，我把编辑器的制表符设置为 4，大家可以根据自己的喜好修改显示的长度。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prettier.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &lt;&lt; docthis</span><br>    <span class="hljs-attr">&quot;docthis.includeAuthorTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Author</span><br>    <span class="hljs-attr">&quot;docthis.authorName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.dateTagFormat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yyyy-mm-dd HH:mm:ss&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDateTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDescriptionTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Description</span><br>    <span class="hljs-comment">// &gt;&gt; docthis</span><br>    <span class="hljs-comment">// &lt;&lt; eslint</span><br>    <span class="hljs-attr">&quot;eslint.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; eslint</span><br>    <span class="hljs-comment">// 启用后，差异编辑器将忽略前导空格或尾随空格中的更改。</span><br>    <span class="hljs-attr">&quot;files.eol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &lt;&lt; javascript</span><br>    <span class="hljs-comment">// JavaScript 格式化程序</span><br>    <span class="hljs-attr">&quot;javascript.format.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 始终自动更新路径。</span><br>    <span class="hljs-attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;[javascript]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vscode.typescript-language-features&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; javascript</span><br>    <span class="hljs-comment">// &lt;&lt; editor</span><br>    <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 编辑器的分割字符处理，在下面去掉 - 就可以做到。class-name 双击全选</span><br>    <span class="hljs-attr">&quot;editor.wordSeparators&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;`~!@#$%^&amp;*()=+[&#123;]&#125;\\|;:&#x27;\&quot;,.&lt;&gt;/?&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 按 &quot;Tab&quot; 时插入空格。</span><br>    <span class="hljs-attr">&quot;editor.insertSpaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 一个制表符等于的空格数。 </span><br>    <span class="hljs-comment">// &quot;editor.tabSize&quot;: 4,</span><br>    <span class="hljs-attr">&quot;editor.wordWrap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pangu.auto_format_on_save&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &lt;&lt; better-comments 自定义注释高亮颜色</span><br>    <span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 警告</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF2D00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;?&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 疑问</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3498DB&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;//&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 删除注释</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#474747&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;todo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// TODO</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF8C00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 完成标志</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 说明</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#99FB37&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围开始</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2D660&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// * 范围结束</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#60D6F2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; better-comments</span><br>    <span class="hljs-comment">// &lt;&lt; koro 头部注释配置</span><br>    <span class="hljs-attr">&quot;fileheader.customMade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;fileheader.configObj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; */&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;!--&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; --&gt;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; koro 注释格式配置</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="ESLint-1"><a href="#ESLint-1" class="headerlink" title="ESLint"></a><a href="https://cn.eslint.org/">ESLint</a></h3><p><a href="https://cn.eslint.org/">ESLint</a> 是一款语法检测工具。它可以根据人们规定的规则，提示用户代码是否符合规定的代码规则。</p><p>需要在项目里安装 eslint</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add eslint eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard --dev<br></code></pre></td></tr></table></figure><p>编写<code>.eslintrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 一个环境定义了一组预定义的全局变量。</span><br>        <span class="hljs-attr">&quot;es6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 启用 es6 语法</span><br>        <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-comment">// - Node.js 全局变量和 Node.js 作用域。</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;plugin:node/recommended&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;node&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;always&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;quotes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;double&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;comma-dangle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;arrays&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;objects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;imports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;exports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;newline-per-chained-call&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;ignoreChainWithDepth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;array-bracket-spacing&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;node/no-missing-import&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-multiple-empty-lines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-var&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-template-curly-in-string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;node/no-deprecated-api&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;camelcase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-bitwise&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-case-declarations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-new&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;new-cap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-unmodified-loop-condition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-loop-func&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;prefer-promise-reject-errors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;node/no-unsupported-features/es-syntax&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;standard/no-callback-literal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-tabs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;indent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;tab&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;SwitchCase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;space-before-function-paren&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;anonymous&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;named&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;asyncArrow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;arrow-parens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;as-needed&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><a href="https://github.com/typicode/husky">husky</a></h3><p><a href="https://github.com/typicode/husky">husky</a> 在 Git hooks 调用的时候，触发一些操作。我这里在 git hooks 上检查代码规范，并自动 fix。</p><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add husky --dev<br></code></pre></td></tr></table></figure><p>在 package 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;husky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;pre-commit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix .&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pre-push&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix .&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;commit-msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊（第 5 期）</title>
    <link href="/posts/8454b2b6.html"/>
    <url>/posts/8454b2b6.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="image-to-ascii"><a href="#image-to-ascii" class="headerlink" title="image-to-ascii"></a><a href="https://github.com/IonicaBizau/image-to-ascii">image-to-ascii</a></h3><p><img src="https://camo.githubusercontent.com/701fb8dfe2222e6880d79cafaa7d5218a767924e8989a947e0ead21262b6a508/687474703a2f2f692e696d6775722e636f6d2f4f6d384737645a2e706e67" alt="image-to-ascii"></p><p>把图片文件生成为 ascii。</p><span id="more"></span><h3 id="maza-ad-blocking"><a href="#maza-ad-blocking" class="headerlink" title="maza-ad-blocking"></a><a href="https://github.com/tanrax/maza-ad-blocking">maza-ad-blocking</a></h3><p><img src="https://raw.githubusercontent.com/tanrax/maza-ad-blocking/master/media/demov2.jpg" alt="demov2.jpg"></p><p>一个类似 Pi-hole 的广告屏蔽工具</p><h3 id="onefetch"><a href="#onefetch" class="headerlink" title="onefetch"></a><a href="https://github.com/o2sh/onefetch">onefetch</a></h3><p><img src="https://raw.githubusercontent.com/o2sh/onefetch/main/assets/screenshot-1.png" alt="i"></p><p><img src="https://raw.githubusercontent.com/o2sh/onefetch/main/assets/screenshot-2.png" alt="2"></p><p>使用方式和<code>neofetch</code>很像的一个命令行工具，用于展示 git 管理的项目的汇总信息。</p><h3 id="git-stats"><a href="#git-stats" class="headerlink" title="git-stats"></a><a href="https://github.com/IonicaBizau/git-stats">git-stats</a></h3><p><img src="https://camo.githubusercontent.com/74abd6260deff9d088557ae71273c96ff02a418636f078b6e913d0d365dbd3f9/687474703a2f2f692e696d6775722e636f6d2f50704d306933762e706e67" alt="2"></p><p>本地 git 统计数据，包括类似 GitHub 的贡献日历</p><h3 id="github-readme-stats"><a href="#github-readme-stats" class="headerlink" title="github-readme-stats"></a><a href="https://github.com/anuraghazra/github-readme-stats">github-readme-stats</a></h3><p><img src="https://camo.githubusercontent.com/8fd2570f103d1aae8a4d8970535274ae19c2ee62587d8868d618be37001263d0/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f616e7572616768617a72612f696d6167652f75706c6f61642f76313539353137343533362f6772732d7468656d65735f6c34796e6a612e706e67" alt="2"></p><p>github 统计卡片</p><h3 id="git-quick-stats"><a href="#git-quick-stats" class="headerlink" title="git-quick-stats"></a><a href="https://github.com/arzzen/git-quick-stats">git-quick-stats</a></h3><p><img src="https://user-images.githubusercontent.com/8818630/121750502-8223d600-cada-11eb-94bc-470be4e22ba4.png" alt="2"></p><p>访问 git 存储库中各种统计信息的简单有效的工具。</p><h3 id="yapi"><a href="#yapi" class="headerlink" title="yapi"></a><a href="https://github.com/YMFE/yapi">yapi</a></h3><p><img src="https://raw.githubusercontent.com/YMFE/yapi/master/yapi-base-flow.jpg" alt="i"></p><p>在多人协作开发的时候，文档是很重要的，没有文档的开发任务，前端和后端都没办法开工。YAPI 提供一个 api 管理的服务解决这个问题。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Node-js-Design-Patterns-Third-Edition"><a href="#Node-js-Design-Patterns-Third-Edition" class="headerlink" title="Node.js-Design-Patterns-Third-Edition"></a><a href="https://github.com/PacktPublishing/Node.js-Design-Patterns-Third-Edition">Node.js-Design-Patterns-Third-Edition</a></h3><p><img src="https://raw.githubusercontent.com/lmammino/lmammino/master/nodejsdp.jpg" alt="nodejsdp.jpg"></p><p>Nodejs 设计模式</p><h3 id="parsing-techniques"><a href="#parsing-techniques" class="headerlink" title="parsing-techniques"></a><a href="https://github.com/duguying/parsing-techniques">parsing-techniques</a></h3><p>《解析技术》是编译器前端经典书籍《Parsing Techniques》的中文译本。</p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊 （第 4 期）</title>
    <link href="/posts/dada6e22.html"/>
    <url>/posts/dada6e22.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="huginn"><a href="#huginn" class="headerlink" title="huginn"></a><a href="https://github.com/huginn/huginn">huginn</a></h3><p>以前在自建 Nas 的时候使用过这个工具定时抓取一些信息，还是不太会用。</p><p><img src="https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/the-name.png" alt="the-name"></p><span id="more"></span><h3 id="tabby"><a href="#tabby" class="headerlink" title="tabby"></a><a href="https://github.com/Eugeny/tabby">tabby</a></h3><p>以前的 Terminus 更名为 tabby，一个很摩登的终端模拟器</p><p><img src="https://raw.githubusercontent.com/Eugeny/tabby/master/docs/readme.png" alt="tabby"></p><h3 id="tomato-clock"><a href="#tomato-clock" class="headerlink" title="tomato-clock"></a><a href="https://github.com/coolcode/tomato-clock">tomato-clock</a></h3><p>Python 实现的番茄时钟，最近在研究怎么做任务提醒，这个获取是个不错的切入点。</p><p><img src="https://raw.githubusercontent.com/coolcode/tomato-clock/master/img/screenshot-macos.png" alt="screenshot-macos"></p><h3 id="AnimeSearcher"><a href="#AnimeSearcher" class="headerlink" title="AnimeSearcher"></a><a href="https://github.com/zaxtyson/AnimeSearcher">AnimeSearcher</a></h3><p>整合第三方网站的视频和弹幕资源，为白嫖党提供最佳看番追剧体验</p><p><img src="https://camo.githubusercontent.com/3685ca927e968291e7a93ec307f6dc09f3bd5a04905fea42b3eac477a4357377/68747470733a2f2f73312e617831782e636f6d2f323032302f31302f32352f426d746366502e706e67" alt="AnimeSearcher"></p><h3 id="openpilot"><a href="#openpilot" class="headerlink" title="openpilot"></a><a href="https://github.com/commaai/openpilot">openpilot</a></h3><p>开源的自动驾驶方案</p><p><img src="https://camo.githubusercontent.com/abdccff63e38bca9d8a749a59327e22413afbebeef2d57674248dd9b542a6834/68747470733a2f2f692e696d6775722e636f6d2f55656c556a4b41682e706e67" alt="openpilot"></p><h3 id="personal-management-system"><a href="#personal-management-system" class="headerlink" title="personal-management-system"></a><a href="https://github.com/Volmarg/personal-management-system">personal-management-system</a></h3><p>一个网页端的个人管理系统</p><p><img src="https://camo.githubusercontent.com/46ef05e7fc8ccba1fb2c27d72802d891566f6871dd487e4e0e194eec0533c68d/68747470733a2f2f766f6c6d6172672e6769746875622e696f2f696d672f70726f6a6563742d6578616d706c652d64617368626f6172642e6a7067" alt="personal-management-system"></p><h3 id="notion-clone"><a href="#notion-clone" class="headerlink" title="notion-clone"></a><a href="https://github.com/konstantinmuenster/notion-clone">notion-clone</a></h3><p>使用 React 和 Express 实现一个克隆版的 Notion</p><p><img src="https://raw.githubusercontent.com/konstantinmuenster/notion-clone/master/screenshot.gif" alt="notion-clone"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Psyduck"><a href="#Psyduck" class="headerlink" title="Psyduck"></a><a href="https://github.com/SmartKeyerror/Psyduck">Psyduck</a></h3><p>项目作者使用 XMind 记录 CS 基础问题，有很有意思的脑图，我也想尝试这种方式记录自己所学的知识了呢。</p><h3 id="IoT-For-Beginners"><a href="#IoT-For-Beginners" class="headerlink" title="IoT-For-Beginners"></a><a href="https://github.com/microsoft/IoT-For-Beginners">IoT-For-Beginners</a></h3><p>微软开源的物联网教程。</p><p><img src="https://raw.githubusercontent.com/microsoft/IoT-For-Beginners/main/sketchnotes/Roadmap.jpg" alt="IoT-For-Beginners"></p><h3 id="HUST-Invictus"><a href="#HUST-Invictus" class="headerlink" title="HUST-Invictus"></a><a href="https://github.com/lyandut/HUST-Invictus">HUST-Invictus</a></h3><p>华中科技大学研究生课程资料</p><h3 id="golangweekly"><a href="#golangweekly" class="headerlink" title="golangweekly"></a><a href="https://github.com/polaris1119/golangweekly">golangweekly</a></h3><p>Go 语言爱好者周刊，每周日发布</p><h3 id="计算机教育中缺失的一课"><a href="#计算机教育中缺失的一课" class="headerlink" title="计算机教育中缺失的一课"></a><a href="https://missing-semester-cn.github.io/">计算机教育中缺失的一课</a></h3><p>在传统的计算机科学课程中，从操作系统、编程语言到机器学习，这些高大上课程和主题已经非常多了。 然而有一个至关重要的主题却很少被专门讲授，而是留给学生们自己去探索。</p><h3 id="Go-语言高性能编程"><a href="#Go-语言高性能编程" class="headerlink" title="Go 语言高性能编程"></a><a href="https://github.com/geektutu/high-performance-go">Go 语言高性能编程</a></h3><p>一本开源的 GO 教程</p><h3 id="前端面试复习笔记"><a href="#前端面试复习笔记" class="headerlink" title="前端面试复习笔记"></a><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">前端面试复习笔记</a></h3><p>一份前端面试的笔记</p><h3 id="系统设计入门"><a href="#系统设计入门" class="headerlink" title="系统设计入门"></a><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md">系统设计入门</a></h3><p><img src="https://raw.githubusercontent.com/donnemartin/system-design-primer/master/images/jj3A5N8.png" alt="系统设计入门"></p><p>学习如何设计大型系统。为系统设计的面试做准备。</p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊（第 3 期）</title>
    <link href="/posts/423bbb31.html"/>
    <url>/posts/423bbb31.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="YYeTsBot"><a href="#YYeTsBot" class="headerlink" title="YYeTsBot"></a><a href="https://github.com/tgbot-collection/YYeTsBot">YYeTsBot</a></h3><p>🎬 人人影视 bot，完全对接人人影视全部无<code>**</code>资源。</p><span id="more"></span><p><img src="https://raw.githubusercontent.com/tgbot-collection/YYeTsBot/master/assets/index.png" alt="YYeTsBot"></p><h3 id="pi-ap"><a href="#pi-ap" class="headerlink" title="pi-ap"></a><a href="https://github.com/f1linux/pi-ap">pi-ap</a></h3><p>树莓派做为 AP 的脚本工具，哪天应急说不定就用上了。</p><h3 id="mycli"><a href="#mycli" class="headerlink" title="mycli"></a><a href="https://github.com/dbcli/mycli">mycli</a></h3><p>mysql 命令行工具，有高亮代码提示，比 mysql-client 好用。</p><p><img src="https://raw.githubusercontent.com/dbcli/mycli/master/screenshots/main.gif" alt="mycli"></p><h3 id="ali"><a href="#ali" class="headerlink" title="ali"></a><a href="https://github.com/nakabonne/ali">ali</a></h3><p>咋一看，我以为是阿里巴巴又出了什么新玩具，其实不是，这是一个用 go 实现的 http 压测工具。</p><p><img src="https://raw.githubusercontent.com/nakabonne/ali/master/images/demo.gif" alt="ali"></p><h3 id="httpstat"><a href="#httpstat" class="headerlink" title="httpstat"></a><a href="https://github.com/davecheney/httpstat">httpstat</a></h3><p><img src="https://github.com/davecheney/httpstat/raw/master/screenshot.png" alt="httpstat"></p><p>类似于 curl -v, 有颜色。</p><h3 id="vscode-qq"><a href="#vscode-qq" class="headerlink" title="vscode-qq"></a><a href="https://github.com/takayama-lily/vscode-qq">vscode-qq</a></h3><p>基于安卓 QQ 协议的 vscode-qq 扩展，万能的 vscode, 以后也能在 linux 上愉快的聊 qq 了。</p><h3 id="swdc-vscode-musictime"><a href="#swdc-vscode-musictime" class="headerlink" title="swdc-vscode-musictime"></a><a href="https://github.com/swdotcom/swdc-vscode-musictime">swdc-vscode-musictime</a></h3><p>Music Time for Spotify, 一边听音乐一边码字。不过我还是喜欢用网易云音乐。</p><p><img src="https://camo.githubusercontent.com/8e097c0ce92c93ac06a4b4a3d12819250ef0299ac4f3cef5cd0e0eee73d39c8d/68747470733a2f2f6173736574732e736f6674776172652e636f6d2f726561646d652f6d757369632d74696d652f7673636f64652f66656174757265732d322e312e31352e706e67" alt="swdc-vscode-musictime"></p><h3 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a><a href="https://github.com/openwrt/openwrt">openwrt</a></h3><p><img src="https://github.com/openwrt/openwrt/raw/master/include/logo.png" alt="openwrt"></p><p>开源路由系统，想必玩过软路由的都知道这个东西。</p><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a><a href="https://github.com/kddeisz/tree">tree</a></h3><p>在 linux 下有个 tree 命令，可以以树状图的形式在命令行打印文件夹的结构。这个项目用各种语言实现了这个命令。</p><h3 id="youtube-dl"><a href="#youtube-dl" class="headerlink" title="youtube-dl"></a><a href="https://github.com/ytdl-org/youtube-dl">youtube-dl</a></h3><p>命令行下载 youtube 视频的工具，之前还被强制删 github 仓库，不过现在又可以用了。</p><h3 id="czkawka"><a href="#czkawka" class="headerlink" title="czkawka"></a><a href="https://github.com/qarmin/czkawka">czkawka</a></h3><p><img src="https://user-images.githubusercontent.com/41945903/102616149-66490400-4137-11eb-9cd6-813b2b070834.png" alt="czkawka"></p><p>之前一直在找对比差异文件的工具，这个就很不错，而且是 rust 写的</p><p><img src="https://user-images.githubusercontent.com/41945903/104711404-9cbb7400-5721-11eb-904d-9677c189f7ab.gif" alt="img"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="《JavaScript-二十年》-中文版"><a href="#《JavaScript-二十年》-中文版" class="headerlink" title="《JavaScript 二十年》 中文版"></a><a href="https://github.com/doodlewind/jshistory-cn">《JavaScript 二十年》 中文版</a></h3><p>本书由 JavaScript 之父 Brendan Eich 与 ES6 规范首席作者 Allen Wirfs-Brock 联合编写，详细记载和解读了自 1995 年语言诞生到 2015 年 ES6 规范制定为止，共计 20 年的 JavaScript 语言演化历程。</p><h3 id="ES2021-新特性"><a href="#ES2021-新特性" class="headerlink" title="ES2021 新特性"></a><a href="https://h3manth.com/ES2021/">ES2021 新特性</a></h3><blockquote><p>本文介绍了 JavaScript 今年新增了哪些语法，还好不是很多。<br><a href="https://www.ruanyifeng.com/blog/2021/07/weekly-issue-166.html">阮一峰周刊</a></p></blockquote><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a><a href="https://github.com/greyireland/algorithm-pattern">算法模板</a></h3><p>算法模板，最科学的刷题方式，最快速的刷题路径，一个月从入门到 offer，你值得拥有 🐶~</p><p>算法模板顾名思义就是刷题的套路模板，掌握了刷题模板之后，刷题也变得好玩起来了~</p><h3 id="miaosha"><a href="#miaosha" class="headerlink" title="miaosha"></a><a href="https://github.com/qiurunze123/miaosha">miaosha</a></h3><p>秒杀系统设计与实现。互联网工程师进阶与分析</p><h3 id="CS-Notes"><a href="#CS-Notes" class="headerlink" title="CS-Notes"></a><a href="https://github.com/CyC2018/CS-Notes">CS-Notes</a></h3><p>技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊 （第 2 期）</title>
    <link href="/posts/1cb567a5.html"/>
    <url>/posts/1cb567a5.html</url>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="litecli"><a href="#litecli" class="headerlink" title="litecli"></a><a href="https://github.com/dbcli/litecli">litecli</a></h3><p><img src="https://raw.githubusercontent.com/dbcli/litecli/master/screenshots/litecli.gif" alt="litecli"></p><p>有智能提示的 sqlite cli。</p><span id="more"></span><h3 id="sqliteviz"><a href="#sqliteviz" class="headerlink" title="sqliteviz"></a><a href="https://github.com/lana-k/sqliteviz">sqliteviz</a></h3><p><img src="https://raw.githubusercontent.com/lana-k/sqliteviz/master/src/assets/images/Logo.svg" alt="sqliteviz"></p><p>一款在浏览器上编辑 sqlite 数据库的工具</p><h3 id="running-page"><a href="#running-page" class="headerlink" title="running_page"></a><a href="https://github.com/yihong0618/running_page">running_page</a></h3><p>把你的跑步记录做成网页。</p><p><img src="https://user-images.githubusercontent.com/15976103/98808834-c02f1d80-2457-11eb-9a7c-70e91faa5e30.gif" alt="running_page"></p><p>工作原理</p><p><img src="https://user-images.githubusercontent.com/15976103/103496454-4294f600-4e79-11eb-9bd6-8eea7a07ddff.png" alt="How it works"></p><h3 id="logseq"><a href="#logseq" class="headerlink" title="logseq"></a><a href="https://github.com/logseq/logseq">logseq</a></h3><p><img src="https://camo.githubusercontent.com/cf6da4273d94266e1c23362a509d99a242ad52f68c493ea5ea81113d8bbf3b08/68747470733a2f2f63646e2e6c6f677365712e636f6d2f25324638623961343631642d343337652d346361352d613264612d313862353130373762353134323032305f30375f32355f53637265656e73686f74253230323032302d30372d323525323031332d32392d3439253230253242303830302e706e673f457870697265733d34373439323535303137265369676e61747572653d516278366a6b67417974716d366e4c7856585151573169676663667e756d56314f6347366a5855743039544f566867587941325a356a484a3341474a41534e637068733331705a6634436a4651356d524379564b77364e387762384e6e2d4d7875544a6c306949386f2d6a4c49414973397131762d3263757343767546665848376271366972384c7066304b594170727a755a303046454e696e33646e365242573335454e517755696f45723547686c37594f437238624b6577336a50567e4f794c36374d74745433774a6967316a334943386c78444454384f7635494d47324757634845525379303046336d7033744a747a474531372d4f55494c64657554467a36642d4e4446416d7a4238426562697572597a3042786134746b63644c55704435546f46485530386a4b7a5a45786f455559387476615a312d7437646a6d6f33647e42415844746c456843324c315943326156515f5f264b65792d506169722d49643d41504b414a45354343443658374d503650544541" alt="logseq"></p><p>开源笔记，只开源了前端，以后会开源后端代码。</p><h3 id="L-ink-Card"><a href="#L-ink-Card" class="headerlink" title="L-ink_Card"></a><a href="https://github.com/peng-zhihui/L-ink_Card">L-ink_Card</a></h3><p>野生钢铁侠的项目， L-ink 电子墨水屏 NFC 智能卡片</p><p><img src="https://github.com/peng-zhihui/L-ink_Card/raw/master/Image/L-ink_V0.5.jpg" alt="L-ink_Card"></p><h3 id="send"><a href="#send" class="headerlink" title="send"></a><a href="https://github.com/timvisee/send">send</a></h3><p>mozilla 开源的私人文件共享。</p><p><img src="https://github.com/timvisee/send/raw/master/assets/icon.svg" alt="send"></p><h3 id="croc"><a href="#croc" class="headerlink" title="croc"></a><a href="https://github.com/schollz/croc">croc</a></h3><p><img src="https://user-images.githubusercontent.com/6550035/46709024-9b23ad00-cbf6-11e8-9fb2-ca8b20b7dbec.jpg" alt="croc"></p><p>点对点传输文件的命令行工具，在局域网内喜欢用这个工具传文件。不仅仅可以传递文件。</p><p><img src="https://raw.githubusercontent.com/schollz/croc/master/src/install/customization.gif" alt="customization"></p><h3 id="keysim"><a href="#keysim" class="headerlink" title="keysim"></a><a href="https://github.com/crsnbrt/keysim">keysim</a></h3><p>DIY 键盘一般都需要自己去配键帽，这个项目能设计并且展示虚拟的 3d 键盘，可以在这个项目里配好色再去决定买什么键帽。</p><p><img src="https://github.com/crsnbrt/keysim/raw/develop/public/example-1.jpg?raw=true" alt="keysim"></p><p><img src="https://github.com/crsnbrt/keysim/raw/develop/public/example-2.jpg?raw=true" alt="example-2"></p><h3 id="ngx-waf"><a href="#ngx-waf" class="headerlink" title="ngx_waf"></a><a href="https://github.com/ADD-SP/ngx_waf/">ngx_waf</a></h3><p>方便且高性能的 Nginx 防火墙模块。</p><p><img src="https://camo.githubusercontent.com/64f9ad5be6a59e3b3a61489a44464cb810ff8ca164dc6645f86a4d0588b42dcf/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f4144442d53502f6e67785f776166406d61737465722f6173736574732f6c6f676f2e706e67" alt="ngx_waf"></p><h3 id="Multiavatar"><a href="#Multiavatar" class="headerlink" title="Multiavatar"></a><a href="https://github.com/multiavatar/Multiavatar">Multiavatar</a></h3><p>JavaScript 中的多元文化头像发生器</p><p><img src="https://camo.githubusercontent.com/a6bdb3c88a7184cfbca432c8220c031ad712abd60fd4c3fa4e8739da5f788f4c/68747470733a2f2f6d756c74696176617461722e636f6d2f70726573732f696d672f73637265656e73686f74732f73637265656e73686f742d30322e706e673f763d303031" alt="Multiavatar"></p><p><img src="https://camo.githubusercontent.com/a165d2010ca6fef972a47c4302deb05ee54a4325333aa225509380ece8bfafeb/68747470733a2f2f6d756c74696176617461722e636f6d2f70726573732f696d672f73637265656e73686f74732f73637265656e73686f742d31302e706e673f763d303031" alt="Multiavatar map"></p><h3 id="blind-watermark"><a href="#blind-watermark" class="headerlink" title="blind_watermark"></a><a href="https://github.com/guofei9987/blind_watermark">blind_watermark</a></h3><p>图片盲水印，提取水印无须原图！哪天用这个实现一个设计师防盗图工具。</p><p><img src="https://camo.githubusercontent.com/631fb10d504c11d8b11718b296e7c4a151d66da274118d48b790f42300a03307/68747470733a2f2f626c696e6477617465726d61726b2e6769746875622e696f2f64656d6f6e7374726174696f6e2f64656d6f6e7374726174696f6e2e6a7067" alt="blind_watermark"></p><h2 id="pyroscope"><a href="#pyroscope" class="headerlink" title="pyroscope"></a><a href="https://github.com/pyroscope-io/pyroscope">pyroscope</a></h2><p>Pyroscope 是一个开源的持续性能剖析平台，听说不就就支持Nodejs。</p><p><img src="https://user-images.githubusercontent.com/662636/105124618-55b9df80-5a8f-11eb-8ad5-0e18c17c827d.gif" alt="pyroscope"></p><p><img src="https://raw.githubusercontent.com/pyroscope-io/pyroscope/main/.github/markdown-images/deployment.svg" alt="deployment"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Mazur’s-SQL-Style-Guide"><a href="#Mazur’s-SQL-Style-Guide" class="headerlink" title="Mazur’s SQL Style Guide"></a><a href="https://github.com/mattm/sql-style-guide">Mazur’s SQL Style Guide</a></h3><p>SQL 风格指南，<a href="https://github.com/huangxinping/sql-style-guide/blob/zh-cn/README.md">中文版</a></p><h3 id="pure-bash-bible"><a href="#pure-bash-bible" class="headerlink" title="pure bash bible"></a><a href="https://github.com/dylanaraps/pure-bash-bible">pure bash bible</a></h3><p>纯 bash 圣经，使用纯 bash 实现一些众所周知和鲜为人知的方法。</p><p><img src="https://camo.githubusercontent.com/06d01fc32b3e236bbb802617b350976c3d6c1651117af82956af308a573d72e1/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f7469746c6570616765732e6c65616e7075622e636f6d2f626173682f6865726f" alt="pure bash bible"></p><p>还有 <a href="https://github.com/dylanaraps/pure-sh-bible">pure sh bible</a></p><h3 id="learn-python3"><a href="#learn-python3" class="headerlink" title="learn-python3"></a><a href="https://github.com/jerry-git/learn-python3">learn-python3</a></h3><p>python3 教材</p><p><img src="https://github.com/jerry-git/learn-python3/raw/master/logo.png" alt="learn-python3"></p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记 egg-redis 无法启动的问题</title>
    <link href="/posts/d77eae53.html"/>
    <url>/posts/d77eae53.html</url>
    
    <content type="html"><![CDATA[<p>最近在使用 egg 的过程中碰到一个问题，使用 egg-redis 插件却连不上 redis，导致启动一直失败，排除了密码错误，redis 服务没打开。这让我把目光投在 egg 和 egg-redis 的上面。</p><span id="more"></span><h2 id="egg-config-加载顺序"><a href="#egg-config-加载顺序" class="headerlink" title="egg config 加载顺序"></a>egg config 加载顺序</h2><p>我是在 egg 的 <code>config.default.js</code> 是配置了哨兵模式，<code>config.local.js</code> 中重新配置 redis 为单例模式。</p><p>我怀疑是 egg config 的加载顺序有问题，但是我分别在两个 config log 了一下，发现的确是先加载 default 再加载 local。</p><h2 id="在-egg-redis-包里打-log"><a href="#在-egg-redis-包里打-log" class="headerlink" title="在 egg-redis 包里打 log"></a>在 egg-redis 包里打 log</h2><p>既然 config 加载顺序没错，那就看看 egg-redis 有没有生效，并且拿到了什么配置。于是我在 egg-redis 的模块里直接打 log。</p><p>log 的确是调用了，但是 config 的内容就不对了。config 除了单例的配置，还包含了 default 中的哨兵配置，而 egg-redis 中的判断是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createClient</span> (<span class="hljs-params">config, app</span>) &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">cluster</span> === <span class="hljs-literal">true</span>) &#123;<br>    ...<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (config.<span class="hljs-property">sentinels</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//...</span><br>  &#125;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后的 <code>else</code> 才是进入单例的。</p><h2 id="告破"><a href="#告破" class="headerlink" title="告破"></a>告破</h2><p>这个问题，其实是 egg 和 egg-reids 共同导致的。</p><p>egg 的 config 加载机制，就很像 lodash 的 merge，导致哨兵模式并没有被单例覆盖。而 egg-redis 又是优先使用哨兵。</p><p>解决方案很简单，只要把哨兵的配置在 local 中配置为<code>null</code>。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>egg.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周刊 （第 1 期）</title>
    <link href="/posts/41ce1cff.html"/>
    <url>/posts/41ce1cff.html</url>
    
    <content type="html"><![CDATA[<p>一直以来都是看别人写的周刊和月刊，然后 star 到自己的 github 仓库就忘记了。不如自己也整一个，把自己每一周看到的好项目以及学习资料收集起来，方便自己查阅。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="keppler"><a href="#keppler" class="headerlink" title="keppler"></a><a href="https://github.com/brunosimon/keppler">keppler</a></h3><p>通过浏览器，实时代码共享，可以用来在局域网内授课和 code review。</p><span id="more"></span><p><img src="https://github.com/brunosimon/keppler/raw/master/resources/screenshots/screen-project-1.png"></p><h3 id="easings-net"><a href="#easings-net" class="headerlink" title="easings.net"></a><a href="https://github.com/ai/easings.net">easings.net</a></h3><p>常用缓动函数库，帮助开发者选择正确的缓动功能的备忘录。</p><h3 id="SvgPathEditor"><a href="#SvgPathEditor" class="headerlink" title="SvgPathEditor"></a><a href="https://github.com/Yqnn/svg-path-editor">SvgPathEditor</a></h3><p>在浏览器上常见和编辑 svg path。</p><p><img src="https://github.com/Yqnn/svg-path-editor/raw/master/doc/screenshot.png"></p><h3 id="mitojs"><a href="#mitojs" class="headerlink" title="mitojs"></a><a href="https://github.com/clouDr-f2e/mitojs">mitojs</a></h3><p><img src="https://camo.githubusercontent.com/97a8ca03fb1048dd510024912a28a174fe3ea48461d66b9cf48681ce730719ba/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f3030386933736b4e6c793167716c386173697437716a333064653035633379672e6a7067"></p><p>一款轻量级的收集页面的用户点击行为、路由跳转、接口报错、代码报错、并上报服务端的 SDK</p><p><img src="https://camo.githubusercontent.com/d54cd5c7e13c976cd0b65052f1c32aa0157d765586bd8609919e0ff548e77b89/68747470733a2f2f747661312e73696e61696d672e636e2f6c617267652f30303865476d5a456c7931676d78676e34793173616733313567306d326864742e676966"></p><h3 id="svgi"><a href="#svgi" class="headerlink" title="svgi"></a><a href="https://github.com/Angelmmiguel/svgi">svgi</a></h3><p>命令行审查 svg 结构的工具。</p><p><img src="https://camo.githubusercontent.com/fc0fb4898b08a1aabe7d6587d5b0232fe23b0da63bbd072db7179d58eff621fe/68747470733a2f2f61736369696e656d612e6f72672f612f3132333334332e706e67"></p><h3 id="piscina"><a href="#piscina" class="headerlink" title="piscina"></a><a href="https://github.com/piscinajs/piscina">piscina</a></h3><p>Node.js 线程池</p><h3 id="suncalc"><a href="#suncalc" class="headerlink" title="suncalc"></a><a href="https://github.com/mourner/suncalc">suncalc</a></h3><p>一个可以计算日出日落的 Nodejs 库</p><h3 id="1loc"><a href="#1loc" class="headerlink" title="1loc"></a><a href="https://github.com/phuoc-ng/1loc">1loc</a></h3><p>这个网站上收集了一行 js 实用代码。</p><p><img src="https://github.com/phuoc-ng/1loc/raw/master/assets/screenshot.png"></p><h3 id="better-sqlite3"><a href="#better-sqlite3" class="headerlink" title="better-sqlite3"></a><a href="https://github.com/JoshuaWise/better-sqlite3">better-sqlite3</a></h3><p>Node.js 操作 sqlite3 的库，notion 的 github 账号 fork 过。</p><blockquote><p>一直以为 notion 官方没有 github 账号，通过这个包意外发现 <a href="https://github.com/makenotion">github.com&#x2F;makenotion</a>，另外是不是意味着 notion 打算做本地笔记了？</p></blockquote><h3 id="notion-sdk-js"><a href="#notion-sdk-js" class="headerlink" title="notion-sdk-js"></a><a href="https://github.com/makenotion/notion-sdk-js">notion-sdk-js</a></h3><p>notion 官方 JavaScript Notion api。</p><p><img src="https://www.notion.so/front-static/external/readme/images/code@2x.png"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="Node-js-最佳实践"><a href="#Node-js-最佳实践" class="headerlink" title="Node.js 最佳实践"></a><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/README.chinese.md">Node.js 最佳实践</a></h3><p>Node.js 开发优质内容</p><h3 id="TTS"><a href="#TTS" class="headerlink" title="TTS"></a><a href="https://github.com/mozilla/TTS">TTS</a></h3><p>mozilla 开源的深度学习 TTS</p><p><img src="https://user-images.githubusercontent.com/1402048/104139991-3fd15e00-53af-11eb-8640-3a78a64641dd.png"></p><h3 id="react-kawaii"><a href="#react-kawaii" class="headerlink" title="react-kawaii"></a><a href="https://github.com/miukimiu/react-kawaii">react-kawaii</a></h3><p><img src="https://raw.githubusercontent.com/miukimiu/react-kawaii/master/docs/images/react-kawaii-logo%402x.png"></p><p>这是一个 react 组件库，这些 svg 图太可爱了，想把弄个同款的 icon</p><p><img src="https://github.com/miukimiu/react-kawaii/raw/master/docs/images/react-kawaii-example.gif?raw=true"></p><h3 id="modernweb-dev"><a href="#modernweb-dev" class="headerlink" title="modernweb.dev"></a><a href="https://github.com/modernweb-dev/web">modernweb.dev</a></h3><p>现代 web 开发指南，工具，库。</p><p><img src="https://github.com/modernweb-dev/web/raw/master/assets/logo.png"></p><h3 id="《SVG-动画开发实战》小册"><a href="#《SVG-动画开发实战》小册" class="headerlink" title="《SVG 动画开发实战》小册"></a><a href="https://github.com/xiaoluoboding/svg-animation-booklet">《SVG 动画开发实战》小册</a></h3><p>专注于有关 SVG 的动画开发，探究 SVG 开发常见动画的原理。站在巨人的肩膀上，借助 <code>GreenSock Animation Platform（GSAP）</code> 进行丰富的动画开发。</p><p><img src="https://raw.githubusercontent.com/xiaoluoboding/svg-animation-booklet/main/docs/public/SVG_Animation.gif"></p><h3 id="Deep-JavaScript-Theory-and-techniques"><a href="#Deep-JavaScript-Theory-and-techniques" class="headerlink" title="Deep JavaScript: Theory and techniques"></a><a href="https://exploringjs.com/deep-js/">Deep JavaScript: Theory and techniques</a></h3><p><img src="https://exploringjs.com/deep-js/img-homepage/cover-homepage.jpg"></p><p>深入探讨 JavaScript，一本很不错的 JavaScript 进阶读物，可在网上直接阅读。</p><h3 id="css-animation-101"><a href="#css-animation-101" class="headerlink" title="css-animation-101"></a><a href="https://github.com/cssanimation/css-animation-101">css-animation-101</a></h3><p><img src="https://raw.githubusercontent.com/cssanimation/css-animation-101/master/images/cover.png"></p><p>css 动画教程，<a href="https://h-wakanda.github.io/css-animation-101-cn/">中文版</a></p>]]></content>
    
    
    <categories>
      
      <category>周刊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>周刊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 实现防盗链</title>
    <link href="/posts/c0d2850d.html"/>
    <url>/posts/c0d2850d.html</url>
    
    <content type="html"><![CDATA[<p>之前写博客的时候，一直找不到合适的图传，就把图片上传到别的网站再引用，本以为这样就不用图床了。万万没想到还有防盗链这种东西。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf"># https://juejin.cn/post/6972005281886634015<br>location ~* \.(gif|jpg|png|swf|flv)$ &#123; #需要防盗链资源的文件类型<br>  valid_referers *.lishuo.net lishuo.net; #这是可以盗链的域名或 IP 地址，一般情况可以把 csdn.net,juejin.cn 等域名放进来<br>  if ($invalid_referer) &#123;<br>    #这样设置能够防盗链，不断地 302 重定向很多次，可能会加重服务器的负担，所以不建议这么做，除非有单独的图片服务器支持<br>    #rewrite ^/ https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1201024306,578860947&amp;fm=26&amp;gp=0.jpg; #如果有人非法盗链资源，则返回一张防盗链的图片<br>    return 403; #或者返回 403 错误代码<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6972005281886634015">【防盗链】Nginx 与 Apache 防盗链教程</a></p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派实现无线路由器</title>
    <link href="/posts/2d0eb407.html"/>
    <url>/posts/2d0eb407.html</url>
    
    <content type="html"><![CDATA[<p>树莓派买很久了，之前是用来做 nas，存点东西。最近没路由器用，就想把树莓派改成路由器。</p><span id="more"></span><p>本来想刷 openwrt，但是自己手上就一张系统 tf 卡，我又不想格掉。找一下不用刷 openwrt 也能做路由器的方案，结果还真有大佬实现过。</p><h2 id="安装-create-ap"><a href="#安装-create-ap" class="headerlink" title="安装 create_ap"></a>安装 create_ap</h2><p>安装软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq<br>git <span class="hljs-built_in">clone</span> https://github.com/oblique/create_ap<br><span class="hljs-built_in">cd</span> create_ap<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在这之前先要把网联连上树莓派，并且接上屏幕设置。</p><p>查看现在的网卡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ip addr<br></code></pre></td></tr></table></figure><p>会看到<code>lo</code>,<code>enxb827eb9eceed</code>,<code>wlan0</code>三个设备，其中<code>enxb827eb9eceed</code>就是有线网的设备，而<code>wlan0</code>就是无线网。</p><p>测试一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> create_ap wlan0 enxb827eb9eceed RasPi-wifi 12345678<br></code></pre></td></tr></table></figure><p>如果执行出错，那可能是 wlan0 已经连上了网，这时候需要把 wifi 断开再重试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> ifconfig wlan0 down<br><span class="hljs-comment"># 如果不行用下面这个</span><br>rfkill unblock all<br></code></pre></td></tr></table></figure><p>执行成功，这时候在手机上就能找到名字为<code>RasPi-wifi</code>的 wifi。</p><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>修改<code>/usr/lib/systemd/system/create_ap.service</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=Create AP Service<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/create_ap --config /etc/create_ap.conf<br>KillSignal=SIGINT<br>Restart=on-failure<br>RestartSec=5<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>修改 config 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs conf">CHANNEL=default<br>GATEWAY=10.0.0.1<br>WPA_VERSION=2<br>ETC_HOSTS=0<br>DHCP_DNS=gateway<br>NO_DNS=0<br>NO_DNSMASQ=0<br>HIDDEN=0<br>MAC_FILTER=0<br>MAC_FILTER_ACCEPT=/etc/hostapd/hostapd.accept<br>ISOLATE_CLIENTS=0<br>SHARE_METHOD=nat<br>IEEE80211N=0<br>IEEE80211AC=0<br>HT_CAPAB=[HT40+]<br>VHT_CAPAB=<br>DRIVER=nl80211<br>NO_VIRT=0<br>COUNTRY=<br>FREQ_BAND=2.4<br>NEW_MACADDR=<br>DAEMONIZE=0<br>NO_HAVEGED=0<br>WIFI_IFACE=wlan0<br>INTERNET_IFACE=enxb827eb9eceed<br>SSID=RasPi-wifi<br>PASSPHRASE=12345678<br>USE_PSK=0<br></code></pre></td></tr></table></figure><p>配置开机关闭 wifi，在<code>/etc/rc.local</code> 添加<code>rfkill unblock all</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ rfkill unblock all</span><br></code></pre></td></tr></table></figure><p>设置开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> create_ap.service<br></code></pre></td></tr></table></figure><p>重启。</p><h2 id="停用"><a href="#停用" class="headerlink" title="停用"></a>停用</h2><p>从<code>/etc/rc.local</code>中删除<code>rfkill unblock all</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ rfkill unblock all</span><br></code></pre></td></tr></table></figure><p>关闭开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> create_ap.service<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.lxx1.com/4499">树莓派创建 AP 变身无线路由器</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm 发包碎碎念</title>
    <link href="/posts/17f1901.html"/>
    <url>/posts/17f1901.html</url>
    
    <content type="html"><![CDATA[<p>不久之前在github上给雪花飘移算法的作者pr了，但是一直没有merge。不过作者那个不是npm包，所以我就想自己先发布到npm上给自己用。</p><span id="more"></span><p>之前也发过包，但是一直没做过详细的记录，这次发包一波三折。</p><h2 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h2><p>依稀记得，要发包，就先在本地的命令行登录npm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm login<br></code></pre></td></tr></table></figure><p>输完 username，password，email 居然失败了。</p><p>不应该啊？我要是没注册我以前的树莓派包怎么发的？</p><p><code>registry</code>也改回npm了呀！</p><p>一番百度，在这里找到了答案</p><p><a href="https://blog.csdn.net/u013727805/article/details/106446117">npm login 403 （403 Forbidden - PUT http://registry.npmjs.org/-/user/org.couchdb.user:******）</a></p><p>我在浏览器登录<a href="https://registry.npmjs.org/-/user/org.couchdb.user:bubao">https://registry.npmjs.org/-/user/org.couchdb.user:bubao</a>的确返回的是<code>&#123;&quot;ok&quot;:false&#125;</code>。但是我命令行还是登录不了啊，等等，我设置一下命令行梯子试试，果然登录成功了。</p><p>把梯子关掉，用浏览器打开后看到</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">This web property is not accessible via this address.<br></code></pre></td></tr></table></figure><p>?????</p><p>any way，反正我有梯子。</p><h2 id="git-tag-与-npm-version"><a href="#git-tag-与-npm-version" class="headerlink" title="git tag 与 npm version"></a>git tag 与 npm version</h2><p>我想在我给npm打version的时候，顺便在git上打相应的tag的commit</p><p><a href="https://www.jianshu.com/p/9e64bdf1e8f9">Git tag 的使用与 npm version</a>这里有我想要的</p><p>只需要我使用下面的命令就能完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm version patch -m <span class="hljs-string">&#x27;upgrape version %s&#x27;</span><br><br>git push origin --tags<br></code></pre></td></tr></table></figure><p>文章里还有一大堆有用的命令</p><h2 id="发包"><a href="#发包" class="headerlink" title="发包"></a>发包</h2><p>终于到发包的时候了，我记得是用下面的命令就能发包的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm publish<br></code></pre></td></tr></table></figure><p>然而，因为我的git tag已经是0.0.3，而我直接运行上面的命令，只推了当前的代码并用了 package.json的 0.0.3配置。</p><p>脑壳痛，需要先删掉npm包(需要在发包后24小时内才能删)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm unpulish cherry-id<br></code></pre></td></tr></table></figure><p>等我切到对应的tag想发包，npm提示需要我等24小时…….真狗。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/u013727805/article/details/106446117">npm login 403 （403 Forbidden - PUT http://registry.npmjs.org/-/user/org.couchdb.user:******）</a></li><li><a href="https://www.jianshu.com/p/9e64bdf1e8f9">Git tag 的使用与 npm version</a></li><li><a href="https://www.jianshu.com/p/91902bae5572">npm 之 version 和 tag</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs 批量下载文件</title>
    <link href="/posts/6b6ddd9c.html"/>
    <url>/posts/6b6ddd9c.html</url>
    
    <content type="html"><![CDATA[<p>之前就已经写过一篇 <a href="https://bubao.github.io/posts/8e5102f6.html">浅谈 js 异步</a>，最近有人问我怎么写批量下载。</p><p>方案有很多，用 <a href="https://www.npmjs.com/package/request">request</a> 模块自己封装一个 Promise 实现批量下载，用封装好的 <a href="https://www.npmjs.com/package/got">got</a> 模块直接批量，用递归批量。递归就不写了。</p><span id="more"></span><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">requestPromise</span> = (<span class="hljs-params">url,filenane</span>) =&gt;&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>)=&gt;</span>&#123;<br>        request<br>            .<span class="hljs-title function_">get</span>(url)<br>            .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>            &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>();<br>            &#125;)<br>            .<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(filenane));<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; array.<span class="hljs-property">length</span>; index++) &#123;<br>        <span class="hljs-keyword">const</span> url = array[index];<br>        <span class="hljs-keyword">const</span> file = path.<span class="hljs-title function_">basename</span>(url);<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestPromise</span>(url,file);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="got"><a href="#got" class="headerlink" title="got"></a>got</h2><p>这个原本就支持 Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> got = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;got&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; array.<span class="hljs-property">length</span>; index++) &#123;<br>        <span class="hljs-keyword">const</span> url = array[index];<br>        <span class="hljs-keyword">const</span> file = path.<span class="hljs-title function_">basename</span>(url);<br>        <span class="hljs-keyword">await</span> got.<span class="hljs-title function_">stream</span>(url).<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(file));<br>    &#125;<br>&#125;<br><span class="hljs-title function_">loop</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观《寻汉计》</title>
    <link href="/posts/f249d00f.html"/>
    <url>/posts/f249d00f.html</url>
    
    <content type="html"><![CDATA[<p>我第一次知道任素汐这个名字的时候，是网易云音乐日推 <a href="http://music.163.com/#/m/song?id=1325905146">胡广生 （电影《无名之辈》宣传推广曲）</a>, 后来才知道电影 <a href="https://movie.douban.com/subject/25921812/">驴得水</a>，印象中都是出演悲情女子。这部 <a href="https://movie.douban.com/subject/30464901/">寻汉计</a> 也是不出以外。</p><span id="more"></span><p>本来这部电影没什么说的。女主王招和前任离婚后，为了不让姥爷知道依然同居，结果怀上了孩子。35 岁的王招不想打掉孩子，于是和姥爷还有弟弟到处找人接盘。其实整个故事就是这么平淡，让我想写记录的是最后的云南白族特色建筑。</p><p>似乎云南是疗伤的圣地，之前心花路方也是去云南，云南也的确是个好地方，现在快递这么发达，在中国任何地方差距都不会很大。</p><p>今天袁隆平院士逝世，云南和青岛地震，而碰巧我又看到一部在云南取景的电影，特此记录。</p>]]></content>
    
    
    <categories>
      
      <category>观影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs 实现雪花飘移算法</title>
    <link href="/posts/50e649ca.html"/>
    <url>/posts/50e649ca.html</url>
    
    <content type="html"><![CDATA[<p>很久之前就了解过雪花算法，一直没在意。最近看到一个比较有趣的类雪花算法————<a href="https://github.com/yitter/IdGenerator">雪花飘移算法</a>，号称比传统的雪花算法还要好。</p><span id="more"></span><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><p>雪花算法是由 twitter 创建，传统的雪花算法里，第一段是 41bit 的时间戳，第二段是 10bit 的服务 id+机器 id，剩下 12bit 用来放计算机生成的序列号。这导致雪花算法得到的 id 数字长达 64 位之多。</p><p>这在 nodejs 的项目中是很痛苦的，因为 js 的 Number 最大值就只有<code>9007199254740992</code>，根本容不下这么长的数字 id，只能把 id 转为字符串。目前也有开源的模块支持生成雪花算法的 id，如 <a href="https://github.com/Welogix-Tech/node-snowflake">https://github.com/Welogix-Tech/node-snowflake</a>。</p><p>还有没有更好的方法？</p><h2 id="雪花飘移算法"><a href="#雪花飘移算法" class="headerlink" title="雪花飘移算法"></a>雪花飘移算法</h2><p>这个算法和雪花算法的区别是，通过减少 Seq 位数来压缩长度，在缩减长度的同时，能保证生成速度不变。</p><p>下面的算法是从 <a href="https://github.com/yitter/IdGenerator/blob/master/Go/source/idgen/SnowWorkerM1.go">go 版本</a> 直接转义过来的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Genid</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *Creates an instance of Genid.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2021-04-27</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     Method: 1, // 雪花计算方法，（1-漂移算法|2-传统算法），默认 1</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     BaseTime: 1577836800000,  // 基础时间（ms 单位），不能超过当前系统时间</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     WorkerId: Number, // 机器码，必须由外部设定，最大值 2^WorkerIdBitLength-1</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     WorkerIdBitLength: 6,   // 机器码位长，默认值 6，取值范围 [1, 15](要求：序列数位长+机器码位长不超过 22)</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     SeqBitLength: 6,   // 序列数位长，默认值 6，取值范围 [3, 21](要求：序列数位长+机器码位长不超过 22)</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     MaxSeqNumber: 5, // 最大序列数（含），设置范围 [MinSeqNumber, 2^SeqBitLength-1]，默认值 0，表示最大序列数取最大值（2^SeqBitLength-1]）</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     MinSeqNumber: 5, // 最小序列数（含），默认值 5，取值范围 [5, MaxSeqNumber]，每毫秒的前 5 个序列数对应编号 0-4 是保留位，其中 1-4 是时间回拨相应预留位，0 是手工新值预留位</span></span><br><span class="hljs-type"><span class="hljs-comment">     *     TopOverCostCount: 2000// 最大漂移次数（含），默认 2000，推荐范围 500-10000（与计算能力有关）</span></span><br><span class="hljs-type"><span class="hljs-comment">     * </span>&#125;&#125; options</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">Genid</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">WorkerId</span> === <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;lost WorkerId&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 1.BaseTime</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">BaseTime</span> = <span class="hljs-number">1577836800000</span>;<br>        <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">BaseTime</span> || options.<span class="hljs-property">BaseTime</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            options.<span class="hljs-property">BaseTime</span> = <span class="hljs-title class_">BaseTime</span>;<br>        &#125;<br>        <span class="hljs-comment">// 2.WorkerIdBitLength</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">WorkerIdBitLength</span> = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">WorkerIdBitLength</span> || options.<span class="hljs-property">WorkerIdBitLength</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            options.<span class="hljs-property">WorkerIdBitLength</span> = <span class="hljs-title class_">WorkerIdBitLength</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 4.SeqBitLength</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">SeqBitLength</span> = <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">SeqBitLength</span> || options.<span class="hljs-property">SeqBitLength</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            options.<span class="hljs-property">SeqBitLength</span> = <span class="hljs-title class_">SeqBitLength</span>;<br>        &#125;<br>        <span class="hljs-comment">// 5.MaxSeqNumber</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">MaxSeqNumber</span> = (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-title class_">SeqBitLength</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">MaxSeqNumber</span> &lt;= <span class="hljs-number">0</span> || options.<span class="hljs-property">MaxSeqNumber</span> === <span class="hljs-literal">undefined</span>) &#123;<br>            options.<span class="hljs-property">MaxSeqNumber</span> = <span class="hljs-title class_">MaxSeqNumber</span>;<br>        &#125;<br>        <span class="hljs-comment">// 6.MinSeqNumber</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">MinSeqNumber</span> = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">MinSeqNumber</span> || options.<span class="hljs-property">MinSeqNumber</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            options.<span class="hljs-property">MinSeqNumber</span> = <span class="hljs-title class_">MinSeqNumber</span>;<br>        &#125;<br>        <span class="hljs-comment">// 7.Others</span><br>        <span class="hljs-keyword">const</span> topOverCostCount = <span class="hljs-number">2000</span>;<br>        <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">TopOverCostCount</span> || options.<span class="hljs-property">TopOverCostCount</span> &lt; <span class="hljs-number">0</span>) &#123;<br>            options.<span class="hljs-property">TopOverCostCount</span> = topOverCostCount;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">Method</span> !== <span class="hljs-number">2</span>) &#123;<br>            options.<span class="hljs-property">Method</span> = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            options.<span class="hljs-property">Method</span> = <span class="hljs-number">2</span>;<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">Method</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">Method</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">BaseTime</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">BaseTime</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">WorkerId</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">WorkerId</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">WorkerIdBitLength</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">WorkerIdBitLength</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">SeqBitLength</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">SeqBitLength</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">MaxSeqNumber</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">MaxSeqNumber</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">MinSeqNumber</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">TopOverCostCount</span> = <span class="hljs-title class_">BigInt</span>(options.<span class="hljs-property">TopOverCostCount</span>);<br><br>        <span class="hljs-keyword">const</span> timestampShift = <span class="hljs-variable language_">this</span>.<span class="hljs-property">WorkerIdBitLength</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">SeqBitLength</span>;<br>        <span class="hljs-keyword">const</span> currentSeqNumber = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TimestampShift</span> = timestampShift;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = currentSeqNumber;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackIndex</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// DoGenIDAction .</span><br>    <span class="hljs-title class_">DoGenIdAction</span>(<span class="hljs-title class_">OverCostActionArg</span>) &#123; &#125;<br><br>    <span class="hljs-title class_">BeginOverCostAction</span>(useTimeTick) &#123; &#125;<br><br>    <span class="hljs-title class_">EndOverCostAction</span>(useTimeTick) &#123;<br>        <span class="hljs-comment">// if m1._TermIndex &gt; 10000 &#123;</span><br>        <span class="hljs-comment">//     m1._TermIndex = 0</span><br>        <span class="hljs-comment">// &#125;</span><br>    &#125;<br><br>    <span class="hljs-title class_">BeginTurnBackAction</span>(useTimeTick) &#123; &#125;<br><br>    <span class="hljs-title class_">EndTurnBackAction</span>(useTimeTick) &#123; &#125;<br><br>    <span class="hljs-title class_">NextOverCostId</span>() &#123;<br>        <span class="hljs-keyword">const</span> currentTimeTick = <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">GetCurrentTimeTick</span>();<br>        <span class="hljs-keyword">if</span> (currentTimeTick &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>) &#123;<br>            <span class="hljs-comment">// this.EndOverCostAction(currentTimeTick)</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span> = currentTimeTick;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span> = <span class="hljs-literal">false</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// this._GenCountInOneTerm = 0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span> &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">TopOverCostCount</span>) &#123;<br>            <span class="hljs-comment">// this.EndOverCostAction(currentTimeTick)</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">GetNextTimeTick</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span> = <span class="hljs-literal">false</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// this._GenCountInOneTerm = 0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">MaxSeqNumber</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>++;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span>++;<br>            <span class="hljs-comment">// this._GenCountInOneTerm++</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// this._GenCountInOneTerm++</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>    &#125;<br><br>    <span class="hljs-title class_">NextNormalId</span>() &#123;<br>        <span class="hljs-keyword">const</span> currentTimeTick = <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">GetCurrentTimeTick</span>();<br>        <span class="hljs-keyword">if</span> (currentTimeTick &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span> &lt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span> - <span class="hljs-number">1</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackIndex</span>++;<br>                <span class="hljs-comment">// 每毫秒序列数的前 5 位是预留位，0 用于手工新值，1-4 是时间回拨次序</span><br>                <span class="hljs-comment">// 支持 4 次回拨次序（避免回拨重叠导致 ID 重复），可无限次回拨（次序循环使用）。</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackIndex</span> &gt; <span class="hljs-number">4</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackIndex</span> = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">BeginTurnBackAction</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcTurnBackId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span>);<br>        &#125;<br>        <span class="hljs-comment">// 时间追平时，_TurnBackTimeTick 清零</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">EndTurnBackAction</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span> = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (currentTimeTick &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span> = currentTimeTick;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">MaxSeqNumber</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">BeginOverCostAction</span>(currentTimeTick);<br>            <span class="hljs-comment">// this._TermIndex++</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>++;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">MinSeqNumber</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_OverCostCountInOneTerm</span> = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// this._GenCountInOneTerm = 1</span><br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">CalcId</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>);<br>    &#125;<br><br>    <span class="hljs-title class_">CalcId</span>(useTimeTick) &#123;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">BigInt</span>(useTimeTick &lt;&lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TimestampShift</span>) + <span class="hljs-title class_">BigInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">WorkerId</span> &lt;&lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">SeqBitLength</span>) + <span class="hljs-title class_">BigInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_CurrentSeqNumber</span>++;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-title class_">CalcTurnBackId</span>(useTimeTick) &#123;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">BigInt</span>(useTimeTick &lt;&lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TimestampShift</span>) + <span class="hljs-title class_">BigInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">WorkerId</span> &lt;&lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">SeqBitLength</span>) + <span class="hljs-title class_">BigInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackIndex</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_TurnBackTimeTick</span>--;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-title class_">GetCurrentTimeTick</span>() &#123;<br>        <span class="hljs-keyword">const</span> millis = <span class="hljs-title class_">BigInt</span>((<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">valueOf</span>());<br>        <span class="hljs-keyword">return</span> millis - <span class="hljs-variable language_">this</span>.<span class="hljs-property">BaseTime</span>;<br>    &#125;<br><br>    <span class="hljs-title class_">GetNextTimeTick</span>() &#123;<br>        <span class="hljs-keyword">let</span> tempTimeTicker = <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">GetCurrentTimeTick</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tempTimeTicker);<br>        <span class="hljs-keyword">while</span> (tempTimeTicker &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">_LastTimeTick</span>) &#123;<br>            tempTimeTicker = <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">GetCurrentTimeTick</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tempTimeTicker;<br>    &#125;<br><br>    <span class="hljs-title class_">NextId</span>() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_IsOverCost</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title class_">NextOverCostId</span>());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title class_">NextNormalId</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Genid</span>;<br></code></pre></td></tr></table></figure><p>另外，也有人写过类似的算法，CSDN 博主「狼丶宇先生」的 <a href="https://blog.csdn.net/qq_33270001/article/details/108800547">nodejs 雪花算法生成 long 型主键 ID 默认 16 位</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 雪花 ID 生成器</span><br><span class="hljs-comment"> * Date: 2020 年 9 月 25 日 14:20:21</span><br><span class="hljs-comment"> * Version: 1.0.0</span><br><span class="hljs-comment"> * A function for converting hex &lt;-&gt; dec w/o loss of precision.</span><br><span class="hljs-comment"> * By Dan Vanderkam http://www.danvk.org/hex2dec.html</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> js Number 最大长度不超过 17 位，否则会出现精度丢失的问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SnowflakeID</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        options = options || &#123;&#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//机器 id 或任何随机数。如果您是在分布式系统中生成 id，强烈建议您提供一个适合不同机器的 mid。</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span> = (options.<span class="hljs-property">mid</span> || <span class="hljs-number">1</span>) % <span class="hljs-number">1023</span>;<br>        <span class="hljs-comment">//这是一个时间偏移量，它将从当前时间中减去以获得 id 的前 42 位。这将有助于生成更小的 id。</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">offset</span> = options.<span class="hljs-property">offset</span> || (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>() - <span class="hljs-number">1970</span>) * <span class="hljs-number">31536000</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-title function_">generate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">const</span> bTime = (time - <span class="hljs-variable language_">this</span>.<span class="hljs-property">offset</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// get the sequence number</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> == time) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span>++;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span> &gt; <span class="hljs-number">4095</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span> = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">// make system wait till time is been shifted by one millisecond</span><br>                <span class="hljs-keyword">while</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() &lt;= time) &#123;&#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span> = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastTime</span> = time;<br><br>        <span class="hljs-keyword">let</span> bSeq = <span class="hljs-variable language_">this</span>.<span class="hljs-property">seq</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">let</span> bMid = <span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">// create sequence binary bit</span><br>        <span class="hljs-keyword">while</span> (bSeq.<span class="hljs-property">length</span> &lt; <span class="hljs-number">12</span>) bSeq = <span class="hljs-string">&#x27;0&#x27;</span> + bSeq;<br><br>        <span class="hljs-keyword">while</span> (bMid.<span class="hljs-property">length</span> &lt; <span class="hljs-number">10</span>) bMid = <span class="hljs-string">&#x27;0&#x27;</span> + bMid;<br><br>        <span class="hljs-keyword">const</span> bid = bTime + bMid + bSeq;<br>        <span class="hljs-keyword">let</span> id = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = bid.<span class="hljs-property">length</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">4</span>) &#123;<br>            id = <span class="hljs-built_in">parseInt</span>(bid.<span class="hljs-title function_">substring</span>(i - <span class="hljs-number">4</span>, i), <span class="hljs-number">2</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>) + id;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">hexToDec</span>(id);<br>    &#125;<br><br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y, base</span>) &#123;<br>        <span class="hljs-keyword">let</span> z = [];<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x.<span class="hljs-property">length</span>, y.<span class="hljs-property">length</span>);<br>        <span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; n || carry) &#123;<br>            <span class="hljs-keyword">let</span> xi = i &lt; x.<span class="hljs-property">length</span> ? x[i] : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">let</span> yi = i &lt; y.<span class="hljs-property">length</span> ? y[i] : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">let</span> zi = carry + xi + yi;<br>            z.<span class="hljs-title function_">push</span>(zi % base);<br>            carry = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(zi / base);<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> z;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 乘以数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">num</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">base</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">multiplyByNumber</span>(<span class="hljs-params">num, x, base</span>) &#123;<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> [];<br><br>        <span class="hljs-keyword">let</span> result = [];<br>        <span class="hljs-keyword">let</span> power = x;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (num &amp; <span class="hljs-number">1</span>) &#123;<br>                result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">add</span>(result, power, base);<br>            &#125;<br>            num = num &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (num === <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            power = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">add</span>(power, power, base);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析为数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">str</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">base</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">parseToDigitsArray</span>(<span class="hljs-params">str, base</span>) &#123;<br>        <span class="hljs-keyword">let</span> digits = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-keyword">let</span> ary = [];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = digits.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">let</span> n = <span class="hljs-built_in">parseInt</span>(digits[i], base);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(n)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            ary.<span class="hljs-title function_">push</span>(n);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ary;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">str</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">fromBase</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">toBase</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">convertBase</span>(<span class="hljs-params">str, fromBase, toBase, legnth</span>) &#123;<br>        <span class="hljs-keyword">let</span> digits = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseToDigitsArray</span>(str, fromBase);<br>        <span class="hljs-keyword">if</span> (digits === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">let</span> outArray = [];<br>        <span class="hljs-keyword">let</span> power = [<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; digits.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-comment">// inletiant: at this point, fromBase^i = power</span><br>            <span class="hljs-keyword">if</span> (digits[i]) &#123;<br>                outArray = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">add</span>(<br>                    outArray,<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">multiplyByNumber</span>(digits[i], power, toBase),<br>                    toBase<br>                );<br>            &#125;<br>            power = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">multiplyByNumber</span>(fromBase, power, toBase);<br>        &#125;<br>        <span class="hljs-keyword">let</span> out = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-comment">//设置了这里-3 会返回 16 位的字符，如果是设置为 outArray.length - 1 会返回 18 位的字符</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = outArray.<span class="hljs-property">length</span> - <span class="hljs-number">3</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            out += outArray[i].<span class="hljs-title function_">toString</span>(toBase);<br>        &#125;<br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 16 进制=&gt; 10 进制</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">hexStr</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">hexToDec</span>(<span class="hljs-params">hexStr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (hexStr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) === <span class="hljs-string">&#x27;0x&#x27;</span>) hexStr = hexStr.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>);<br>        hexStr = hexStr.<span class="hljs-title function_">toLowerCase</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">convertBase</span>(hexStr, <span class="hljs-number">16</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//下面是测试代码部分，不需要的可以直接移除</span><br><span class="hljs-keyword">const</span> snid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SnowflakeID</span>(&#123;<br>    <span class="hljs-attr">mid</span>: +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>&#125;);<br><span class="hljs-keyword">let</span> id = snid.<span class="hljs-title function_">generate</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, id.<span class="hljs-property">length</span>);<br><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">10000</span>; index++) &#123;<br>    id = snid.<span class="hljs-title function_">generate</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id);<br>    arr.<span class="hljs-title function_">push</span>(snid.<span class="hljs-title function_">generate</span>(), +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>&#125;<br><span class="hljs-comment">//测试是否会有重复的 id, 目前的测试情况来看，不会有重复的</span><br><span class="hljs-comment">// console.log(arr, arr.length, Array.from(new Set(arr)).length);</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">SnowflakeID</span>;<br><span class="hljs-comment">// ————————————————</span><br><span class="hljs-comment">// 版权声明：本文为 CSDN 博主「狼丶宇先生」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="hljs-comment">// 原文链接：https://blog.csdn.net/qq_33270001/article/details/108800547</span><br></code></pre></td></tr></table></figure><h2 id="类雪花算法的优缺点"><a href="#类雪花算法的优缺点" class="headerlink" title="类雪花算法的优缺点"></a>类雪花算法的优缺点</h2><p>雪花算法的出现，其实是为了解决数据库的主键使用非自增 id 的情况下，使用类似 guid 或者 uuid，在数据量大的情况下查询慢的情况。而雪花算法是工具时间戳生成的，序列号有一定的递增顺序，可用来排序。</p><p>但是依然还是存在一些缺点，根据时间戳生成的 id，有个致命的缺点就是时间回拨。一旦发生时间回拨，就会产生重复的 id，而雪花飘移算法通过配置参数在一定程度上可解决时间回拨的问题。</p>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>node.js</tag>
      
      <tag>算法</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按 ASCII 排序的 stringify</title>
    <link href="/posts/df426b2c.html"/>
    <url>/posts/df426b2c.html</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是个奇怪的语言，譬如 Object 反序列化这件事就很诡异。</p><span id="more"></span><p>一直都很纠结，为什么 JSON 反序列化 stringify 不能自动把 key 排序好在转字符串，本来也没太在意，毕竟使用场景太少了，甚至说几乎没碰到过。</p><p>巧了，今天就碰到了。</p><p>在网上找了一圈，没找到现成的代码，那只能曲线救国，找 <code>JSON.stringify()</code> 的手写实现，于是让我找到了这个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://blog.csdn.net/qq_40028324/article/details/103135034</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonStringify</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> obj;<br>  <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&quot;object&quot;</span> || type === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/string|undefined|function/</span>.<span class="hljs-title function_">test</span>(type)) &#123;<br>      obj = <span class="hljs-string">&#x27;&quot;&#x27;</span> + obj + <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(obj);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> json = []<br>    arr = (obj &amp;&amp; obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">let</span> v = obj[k];<br>      <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> v;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/string|undefined|function/</span>.<span class="hljs-title function_">test</span>(type)) &#123;<br>        v = <span class="hljs-string">&#x27;&quot;&#x27;</span> + v + <span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        v = <span class="hljs-title function_">jsonStringify</span>(v);<br>      &#125;<br>      json.<span class="hljs-title function_">push</span>((arr ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&#x27;&quot;&#x27;</span> + k + <span class="hljs-string">&#x27;&quot;:&#x27;</span>) + <span class="hljs-title class_">String</span>(v));<br>    &#125;<br>    <span class="hljs-keyword">return</span> (arr ? <span class="hljs-string">&quot;[&quot;</span> : <span class="hljs-string">&quot;&#123;&quot;</span>) + <span class="hljs-title class_">String</span>(json) + (arr ? <span class="hljs-string">&quot;]&quot;</span> : <span class="hljs-string">&quot;&#125;&quot;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-title function_">jsonStringify</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">5</span> &#125;)<br><span class="hljs-comment">// &quot;&#123;&quot;x&quot;:5&#125;&quot;</span><br><span class="hljs-title function_">jsonStringify</span>([<span class="hljs-number">1</span>, <span class="hljs-string">&quot;false&quot;</span>, <span class="hljs-literal">false</span>])<br><span class="hljs-comment">// &quot;[1,&quot;false&quot;,false]&quot;</span><br><span class="hljs-title function_">jsonStringify</span>(&#123; <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span> &#125;)<br><span class="hljs-comment">// &quot;&#123;&quot;b&quot;:&quot;undefined&quot;&#125;&quot;</span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">// ————————————————</span><br><span class="hljs-comment">// 版权声明：本文为 CSDN 博主「宋哈哈」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="hljs-comment">// 原文链接：https://blog.csdn.net/qq_40028324/article/details/103135034</span><br></code></pre></td></tr></table></figure><p>为了能实现排序，需要对代码进行一些修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">bb</span>: [&#123; <span class="hljs-attr">aaa</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-attr">bbb</span>: <span class="hljs-string">&quot;222&quot;</span> &#125;], <span class="hljs-attr">cc</span>: [&#123; <span class="hljs-attr">aaa</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-attr">bbb</span>: <span class="hljs-string">&quot;222&quot;</span> &#125;], <span class="hljs-attr">aa</span>: [&#123; <span class="hljs-attr">aaa</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-attr">bbb</span>: <span class="hljs-string">&quot;222&quot;</span> &#125;] &#125;,<br>    <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">aa</span>: [&#123; <span class="hljs-attr">bbb</span>: <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-attr">aaa</span>: <span class="hljs-string">&quot;222&quot;</span> &#125;] &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonStringify</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> type = <span class="hljs-keyword">typeof</span> obj;<br>    <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&quot;object&quot;</span> || type === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/string|undefined|function/</span>.<span class="hljs-title function_">test</span>(type)) &#123;<br>            obj = <span class="hljs-string">&quot;\&quot;&quot;</span> + obj + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(obj);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> json = [];<br>        <span class="hljs-keyword">const</span> sdic = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">sort</span>();<br>        <span class="hljs-keyword">const</span> arr = (obj &amp;&amp; obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> k <span class="hljs-keyword">of</span> sdic) &#123;<br>            <span class="hljs-keyword">let</span> v = obj[k];<br>            <span class="hljs-keyword">const</span> type = <span class="hljs-keyword">typeof</span> v;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/string|undefined|function/</span>.<span class="hljs-title function_">test</span>(type)) &#123;<br>                v = <span class="hljs-string">&quot;\&quot;&quot;</span> + v + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>                v = <span class="hljs-title function_">jsonStringify</span>(v);<br>            &#125;<br>            json.<span class="hljs-title function_">push</span>((arr ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;\&quot;&quot;</span> + k + <span class="hljs-string">&quot;\&quot;:&quot;</span>) + <span class="hljs-title class_">String</span>(v));<br>        &#125;<br>        <span class="hljs-keyword">return</span> (arr ? <span class="hljs-string">&quot;[&quot;</span> : <span class="hljs-string">&quot;&#123;&quot;</span>) + <span class="hljs-title class_">String</span>(json) + (arr ? <span class="hljs-string">&quot;]&quot;</span> : <span class="hljs-string">&quot;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">jsonStringify</span>(data))<br><span class="hljs-comment">// &#123;&quot;a&quot;:&#123;&quot;aa&quot;:[&#123;&quot;aaa&quot;:&quot;222&quot;,&quot;bbb&quot;:&quot;111&quot;&#125;]&#125;,&quot;b&quot;:&#123;&quot;aa&quot;:[&#123;&quot;aaa&quot;:&quot;111&quot;,&quot;bbb&quot;:&quot;222&quot;&#125;],&quot;bb&quot;:[&#123;&quot;aaa&quot;:&quot;111&quot;,&quot;bbb&quot;:&quot;222&quot;&#125;],&quot;cc&quot;:[&#123;&quot;aaa&quot;:&quot;111&quot;,&quot;bbb&quot;:&quot;222&quot;&#125;]&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛 guid 解析</title>
    <link href="/posts/b37f941e.html"/>
    <url>/posts/b37f941e.html</url>
    
    <content type="html"><![CDATA[<p>很久之前接过七牛的接口，在七牛的 SDK 中找到一个很有意思的 <a href="https://github.com/qiniu/js-sdk/blob/d1792bd4cdaa02ea677aef22539a5f1c1e8a942f/test/demo1/js/moxie.js#L525">guid</a><br>算法。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://github.com/qiniu/js-sdk/blob/d1792bd4cdaa02ea677aef22539a5f1c1e8a942f/test/demo1/js/moxie.js#L525</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Generates an unique ID. The only way a user would be able to get the same ID is if the two persons</span><br><span class="hljs-comment">at the same exact millisecond manage to get the same 5 random numbers between 0-65535; it also uses</span><br><span class="hljs-comment">a counter so each ID is guaranteed to be unique for the given page. It is more probable for the earth</span><br><span class="hljs-comment">to be hit with an asteroid.</span><br><span class="hljs-comment"><span class="hljs-doctag">@method</span> <span class="hljs-variable">guid</span></span><br><span class="hljs-comment"><span class="hljs-doctag">@static</span></span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; prefix to prepend (by default &#x27;o&#x27; will be prepended).</span><br><span class="hljs-comment"><span class="hljs-doctag">@method</span> <span class="hljs-variable">guid</span></span><br><span class="hljs-comment"><span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">String</span>&#125; Virtually unique id.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> guid = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">prefix</span>) &#123;<br>        <span class="hljs-keyword">var</span> guid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>), i;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            guid += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">65535</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (prefix || <span class="hljs-string">&#x27;o_&#x27;</span>) + guid + (counter++).<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>);<br>    &#125;;<br>&#125;());<br></code></pre></td></tr></table></figure><p>一个挺有趣的 guid 生成器，注释上说：撞码的概率好比小行星撞地球</p><p>这个代码中还是存在问题：</p><ol><li><code>counter</code>会过长</li><li><code>prefix</code>无法置空</li></ol><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> guid = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">prefix = <span class="hljs-string">&quot;o_&quot;</span></span>) &#123;<br>        counter = counter % (<span class="hljs-number">32</span> * <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">let</span> guid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            guid += <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">65535</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (prefix) + guid + (counter++).<span class="hljs-title function_">toString</span>(<span class="hljs-number">32</span>);<br>    &#125;;<br>&#125;());<br></code></pre></td></tr></table></figure><p>做了一些改变</p><ol><li>允许置空<code>prefix</code></li><li><code>counter</code>大小被限制</li></ol><p>但是，这种 guid 作为主的方式其实对 mysql 并不友好，一旦数据量上来，查询速度就会慢下来，所以还是建议使用数字来做主键。然而我们并不希望把自增 id 暴露到外部，这时候可能就需要使用雪花算法了。不过这里就不对雪花算法进行描述了，哪天徒手写一个再写博客。</p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie 和 Session 是什么关系？</title>
    <link href="/posts/d91040d5.html"/>
    <url>/posts/d91040d5.html</url>
    
    <content type="html"><![CDATA[<p>今天网络面试，碰到一道题</p><blockquote><p>Cookie 和 Session 是什么关系？如何实现一个用户七天免登录的功能？</p></blockquote><span id="more"></span><p>？？？？？看到这道题的时候，我满脸黑人问号。我是面的前端还是后端？而且当时我也没答的很完整，因为我认为这里可能存在歧义，奈何我面试表现也一直不佳。（这难道就是我找不到好工作的原因吗？）</p><p>这道题看起来很简单，但是我相信很多前端程序员摸不着头。因为目前国内大多数文章并没有讲清楚 Session 是什么，对于前端程序员来说，Cookie 还是见过的，Session 又是什么东西？对于后端程序员来说，貌似两者就是同一个东西。</p><p>要解释这个东西，先从 http 说起。</p><h2 id="http-与-Cookie"><a href="#http-与-Cookie" class="headerlink" title="http 与 Cookie"></a>http 与 Cookie</h2><p>我们都知道，http 是一种无状态的网络协议，无状态意味着每一个请求都与上下文无关。但是真实的网络请求的过程中，还是需要维持用户状态的，于是 Cookie 就出现了，服务器可以通过在请求头中设置<code>Set-Cookie</code>，在支持 Cookie 的浏览器上设置 Cookie（现在好像也没有浏览器不支持 Cookie 了吧），前端也可以通过浏览器 API 设置 Cookie。</p><p><strong>Cookie 是浏览器利用 http 的 headers 实现的一种解决 http 无状态的方案。</strong></p><h2 id="前端眼中的-Session"><a href="#前端眼中的-Session" class="headerlink" title="前端眼中的 Session"></a>前端眼中的 Session</h2><p>Session 对前端来说很陌生，相信大家在网上也找过 Session 的资料，见过如下这些解释</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Add-ons/WebExtensions/API/sessions/Session">该 Session 对象表示用户在当前浏览会话中已关闭的选项卡或窗口。</a></p></blockquote><blockquote><p>cookie 保存在客户端，session 保存在服务器端</p></blockquote><p>第一个解释其实是浏览器的 API，相信很多前端都在 MDN 上看到这个解释，误以为这就是 Session。</p><p>第二个解释也是我们在国内能看到最多的对 Cookie 和 Session 的解释，但这也并没有解释为什么放在浏览器端是 Cookie，放在服务器的是 Session。也没说明 Session 和 Cookie 之间的关系呀。</p><h2 id="前端眼中的-Cookie"><a href="#前端眼中的-Cookie" class="headerlink" title="前端眼中的 Cookie"></a>前端眼中的 Cookie</h2><p>可能更多的前端眼中的 Cookie 是这样子的，调用用户登录，API 验证帐号密码正确后，就会通过响应<code>Set-Cookie</code>种一个 Cookie 在浏览器上，之后请求只要携带这个 Cookie，后端就会返回想要的结果。Cookie 可以设置有效期，如果用户退出，删掉本地的 cookie 就能行，但是不明白为什么后端偏偏要给一个叫做<code>安全退出</code>的接口，可能还设置了 <code>httponly</code> 不允许前端通过 js 操作 Cookie。</p><p>抛开<code>XSS</code>攻击，把<code>httponly</code>去掉，来看看不使用<code>安全退出</code>接口，直接删除 Cookie，这种方式的退出会出现什么问题。</p><p>从前端看，只要删掉 Cookie，用户就退出了呀，有什么问题。其实这只是前端的退出，用户的登录状态其实在服务器上还是<strong>登录中</strong>。如果不通过接口通知服务器，服务器会一直以为用户依然在线，直至状态过期。</p><h2 id="后端眼中的-Cookie-和-Session"><a href="#后端眼中的-Cookie-和-Session" class="headerlink" title="后端眼中的 Cookie 和 Session"></a>后端眼中的 Cookie 和 Session</h2><p>还是用登录来说明，用户登录这个过程中，后端都做了什么？</p><p>前端把用户的帐号密码甚至还可能有验证码发送给后端，后端查数据库后确认用户的帐号密码甚至是验证码都是正确的，使用一些手段给该用户生成一个唯一的 id，存在数据库中，这个数据库可以是任何一种数据库，这里我们假设使用的是 Redis。同时从 mysql 或者 mongodb 中把可能常用到的数据作为 value 与唯一 id 存在 Redis 中。然后把这个 id 通过<code>Set-Cookie</code>或者 body 或者 url 甚至是其他的方式通过响应返回给客户端。</p><p>在这里，那个唯一 id 可以称之为 Session id（但是为什么叫做 Session，据说是和 servlet 有关，我是没写过那玩意儿，有待考古，就姑且称为 Session 好了），如果使用的是 OAuth2.0，或许叫做 token，或者和前端一样叫 Cookie 也没毛病，毕竟如果通过设置<code>Set-Cookie</code>，那这个 id 就是浏览器上的 Cookie。如果没有<code>Set-Cookie</code>和<code>httponly</code>，是通过 body 或者其他方式响应给前端，前端甚至可以自己设置 Cookie，放在 localStorage 也是没问题的。只要下次请求按照前后端规定的格式带上，就能拿到想要的数据了。</p><h2 id="Cookie-和-Session-是什么关系？"><a href="#Cookie-和-Session-是什么关系？" class="headerlink" title="Cookie 和 Session 是什么关系？"></a>Cookie 和 Session 是什么关系？</h2><p>说了这么多，Session 和 Cookie 到底是什么？其实这个问题问的就有歧义。</p><p>在后端，可以把用户登录直到退出这段过程成为 Session，识别这次 Session 的 id 成为 Session id，把 Session id 通过<code>Set-Cookie</code>的方式种在浏览器中，以此来共同维护用户的状态。如果后端使用的是 OAuth2.0，那可能称之为 token。如果前端能从操作这个识别 id，把 id 设置到 localStorage，而不是 Cookie，只要遵循规定好的格式，一样能识别用户。</p><h2 id="如何实现一个用户七天免登录的功能？"><a href="#如何实现一个用户七天免登录的功能？" class="headerlink" title="如何实现一个用户七天免登录的功能？"></a>如何实现一个用户七天免登录的功能？</h2><p>这个问题，解答其实可以很简单。通过<code>Set-Cookie</code>和<code>httponly</code>给浏览器种一个有效时间为七天的的 Cookie。并且在 Redis 中利用 ttl 设置一个有效期为七天的 Session id（或者 token），就能实现用户七天免登录的功能。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当 js 碰到设计模式之单例模式</title>
    <link href="/posts/8e6c9337.html"/>
    <url>/posts/8e6c9337.html</url>
    
    <content type="html"><![CDATA[<p>单例模式是我在开发过程中使用最多的设计模式。</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前写 express 引入 mysql，在不同的文件中要使用 mysql 的时候都要 <code>new</code> 一次才能拿到实例。这就意味着有可能有多个 mysql 实例存在。</p><p>能不能共用同一个实例呢？能，使用单例模式。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210410123636.png" alt="[客户端甚至可能没有意识到它们一直都在使用同一个对象。](https://refactoringguru.cn/design-patterns/singleton)"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>奈何我 js 只会 ES6，用 ES6 实现，先看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> || <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> test1 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>();<br><span class="hljs-keyword">const</span> test2 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test1 === test2);<br><br></code></pre></td></tr></table></figure><p>这里面没有看到<code>new</code>，而是用一个<code>static</code>修饰的<code>init</code> 静态方法。因为如果调用<code>new</code>，<code>Singleton</code>会先执行<code>constructor</code>构造函数，返回一个新的实例。所以在常规的单例模式中，将默认构造函数设为私有， 防止其他对象使用单例类的 <code>new</code> 运算符。只能通过静态方法<code>getInstance</code>获取到实例。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210410124830.png" alt="[单例模式结构](https://refactoringguru.cn/design-patterns/singleton)"></p><p>然而不幸的是，js 中并没有私有修饰符，所以使用者还是用<code>new</code>得到一个新的实例。</p><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>如果想初始化参数，那就要改一下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">getInstance</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-comment">// this.instance =  this.instance || this;</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">this</span>(name);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> test1 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&quot;x&quot;</span>);<br><span class="hljs-keyword">const</span> test2 = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test2.<span class="hljs-property">name</span>); <span class="hljs-comment">// x</span><br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点当然是只有一个实例对象了。</p><p>缺点：在多线程的环境下需要一些特殊处理，避免多线程多次创建单例对象。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>证明四点构成矩形</title>
    <link href="/posts/b7306edb.html"/>
    <url>/posts/b7306edb.html</url>
    
    <content type="html"><![CDATA[<p>今天在算法群里有人提出一个问题：</p><blockquote><p>在二维数轴上给四个点的坐标，证明四点构成矩形。</p></blockquote><span id="more"></span><p>这道题算是一道数学题，解决方案有很多：</p><ol><li>两对角线交点到四点距离相等</li><li>某点与其他三点的距离的勾股定理成立且 ab&#x2F;&#x2F;cd 或最长距离的点在其他两点之间</li><li>一个点到三个点之间的斜率。</li></ol><h2 id="对角线交点"><a href="#对角线交点" class="headerlink" title="对角线交点"></a>对角线交点</h2><p>在学校学几何的时候，我们知道矩形的对角线相交点到四个角的距离相等，可以用这个方法求解。</p><p>首先要计算对角线相交点的坐标，然后分别计算两点之间的距离</p><p>这的解法是很多人都能想到的，思路很简单。</p><h2 id="勾股定理-ab-dc-k-c-k-d-overlinesegment-p-a’-p-c-parallel-overlinesegment-p-b-p-d"><a href="#勾股定理-ab-dc-k-c-k-d-overlinesegment-p-a’-p-c-parallel-overlinesegment-p-b-p-d" class="headerlink" title="勾股定理&amp;&amp;($ab&#x2F;&#x2F;dc$||($k_c$&lt;$k_b$&amp;&amp;$k_c$&gt;$k_d$)||($\overlinesegment{p_a’ p_c} \parallel \overlinesegment{p_b p_d}$))"></a>勾股定理&amp;&amp;($ab&#x2F;&#x2F;dc$||($k_c$&lt;$k_b$&amp;&amp;$k_c$&gt;$k_d$)||($\overlinesegment{p_a’ p_c} \parallel \overlinesegment{p_b p_d}$))</h2><p>这个方法巧妙的把四个点的问题转化为直角三角形边的问题。为什么可以这么做？</p><p>首先，要形成矩形，就必须邻边两两垂直，由垂直由能想到直角三角形。只要三条线段构成直角三角形，就成功了一大半。</p><p>然后用三种办法证明点 c 能和其他三点构成矩形。方法有三，思路也各有不同。</p><h3 id="ab-dc-ac-db"><a href="#ab-dc-ac-db" class="headerlink" title="$ab&#x2F;&#x2F;dc$ || $ac&#x2F;&#x2F;db$"></a>$ab&#x2F;&#x2F;dc$ || $ac&#x2F;&#x2F;db$</h3><p>相对的两条边两两平行与上面的相邻角是直角就能证明是矩形。</p><h3 id="k-c-k-d"><a href="#k-c-k-d" class="headerlink" title="$k_c$&lt;$k_b$&amp;&amp;$k_c$&gt;$k_d$"></a>$k_c$&lt;$k_b$&amp;&amp;$k_c$&gt;$k_d$</h3><p>斜率$k_c$在$k_b$和$k_d$之间，只要 c 点在 bd 之间就构成矩形，但是这要求 a 点是左下角或者左侧。</p><h3 id="overlinesegment-p-a’-p-c-parallel-overlinesegment-p-b-p-d"><a href="#overlinesegment-p-a’-p-c-parallel-overlinesegment-p-b-p-d" class="headerlink" title="$\overlinesegment{p_a’ p_c} \parallel \overlinesegment{p_b p_d}$"></a>$\overlinesegment{p_a’ p_c} \parallel \overlinesegment{p_b p_d}$</h3><p>换个思路，我们只要求出点 a 与线段 bd 的对称点$p_a’$与点 c 构成的线段与点 b 与点 c 构成的线段平行，也可证明是矩形。</p><h2 id="斜率求解"><a href="#斜率求解" class="headerlink" title="斜率求解"></a>斜率求解</h2><p>这个方法其实就全部用斜率求解了。</p><p>结合方法$\overlinesegment{p_a’ p_c} \parallel \overlinesegment{p_b p_d}$和$\overlinesegment{p_a p_b} \bot \overlinesegment{p_c p_d}$，就能证明四点构成矩形。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道柯理化面试题</title>
    <link href="/posts/992b3e08.html"/>
    <url>/posts/992b3e08.html</url>
    
    <content type="html"><![CDATA[<p>今天在群里聊天，有人发了一道面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实现一个这样的函数。输出结果如下：</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span> <span class="hljs-comment">// 1</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>).<span class="hljs-property">value</span> <span class="hljs-comment">// 5</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>).<span class="hljs-property">value</span> <span class="hljs-comment">// 14</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>我第一个想法是 curry。但是网上都是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">var</span> sum = a;<br>    <span class="hljs-keyword">var</span> addMore = <span class="hljs-keyword">function</span>(<span class="hljs-params">b</span>) &#123; <br>        sum += b; <br>        <span class="hljs-keyword">return</span> addMore; <br>    &#125;; <br>    addMore.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-keyword">return</span> sum; <br>    &#125;; <br>    <span class="hljs-keyword">return</span> addMore; <br>&#125;; <br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>); <br></code></pre></td></tr></table></figure><p>这只是简单的累加。但是我在 nodejs 的环境里是没办法想这样调用得到结果的。需要手动去调用一次<code>toString()</code>。</p><p>幸好这道面试题是用一个<code>value</code>返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021-04-01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">value</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a</span>) &#123;<br>    sum.<span class="hljs-property">i</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">b</span>) &#123;<br>        sum.<span class="hljs-property">value</span> += b * (++sum.<span class="hljs-property">i</span>);<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    sum.<span class="hljs-property">value</span> = a;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>).<span class="hljs-property">value</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><p>等等，这道题好像还有个问题，如果是 $value^2$ 的和呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021-04-01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">value</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a</span>) &#123;<br>    sum.<span class="hljs-property">value</span> = a ** <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">b</span>) &#123;<br>        sum.<span class="hljs-property">value</span> += b ** <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>).<span class="hljs-property">value</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><p>但是如果我使用下面的方法，就不能保证每次运行都是相同的值了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> h = <span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">h</span>(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br><span class="hljs-comment">// </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">h</span>(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><p>所以改成这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-params">a, f</span>) &#123;<br>   <span class="hljs-comment">// 合并 &amp; 复制属性</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> <span class="hljs-title function_">reducer</span>(<span class="hljs-title function_">f</span>(a, b), f), &#123; <span class="hljs-attr">value</span>: a &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> add = <span class="hljs-title function_">reducer</span>(<span class="hljs-number">0</span>, <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b ** <span class="hljs-number">2</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>).<span class="hljs-property">value</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br><span class="hljs-comment">// 纯函数测试</span><br><span class="hljs-keyword">const</span> h = <span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">h</span>(<span class="hljs-number">3</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：27. 移除元素</title>
    <link href="/posts/5b701856.html"/>
    <url>/posts/5b701856.html</url>
    
    <content type="html"><![CDATA[<p>这道题和前面的 26 题一样，要原地修改。同样我还是用快慢指针做。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你一个数组 nums 和一个值 <code>val</code>，你需要<code>原地</code>移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 $O(1)$ 额外空间并<code>原地</code>修改输入数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=27 lang=javascript </span><br><span class="hljs-comment">// @title remove-element</span><br><span class="hljs-comment">// @test([3,2,2,3],3)=2</span><br><span class="hljs-comment">// @test([0,1,2,2,3,0,4,2],2)=5</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>循环一遍数组，只要元素不等于<code>val</code>，就把快指针的元素覆盖慢指针的元素上。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这里使用到了快慢指针</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">val</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> removeElement = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, val</span>) &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> len = nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">while</span> (j &lt;= len - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (nums[j] !== val) nums[i++] = nums[j];<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>除了快慢指针，还可以用数组长度做文章。原因是题目不要求数组元素的位置固定，只要求删除掉指定元素。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">val</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> removeElement = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, val</span>) &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> len = nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] === val) &#123;<br>            nums[i] = nums[len - <span class="hljs-number">1</span>];<br>            len--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：88. 合并两个有序数组</title>
    <link href="/posts/d7cc34ee.html"/>
    <url>/posts/d7cc34ee.html</url>
    
    <content type="html"><![CDATA[<p>很有趣也比较简单的一道题。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你两个有序整数数组 <code>nums1</code> 和 <code>nums2</code>，请你将 <code>nums2</code> 合并到 <code>nums1</code> 中，使 <code>nums1</code> 成为一个有序数组。</p><p>初始化 <code>nums1</code> 和 <code>nums2</code> 的元素数量分别为 <code>m</code> 和 <code>n</code> 。你可以假设 <code>nums1</code> 的空间大小等于 <code>m + n</code>，这样它就有足够的空间保存来自 <code>nums2</code> 的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=88 lang=javascript </span><br><span class="hljs-comment">// @title merge-sorted-array</span><br><span class="hljs-comment">// @test([1,2,3,0,0,0],3,[2,5,6],3)=[1,2,2,3,5,6]</span><br><span class="hljs-comment">// @test([1],1,[],0)=[1]</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一-合并后排序"><a href="#方法一-合并后排序" class="headerlink" title="方法一 : 合并后排序"></a>方法一 : 合并后排序</h3><p>这是比较容易想到的解题思路，先把两个数组合并，再排序：</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">m</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums1, m, nums2, n</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        nums1[nums1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> - i] = nums2[i];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> [nums1.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)[<span class="hljs-number">0</span>]];<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="方法二-双指针-从前往后"><a href="#方法二-双指针-从前往后" class="headerlink" title="方法二 : 双指针 &#x2F; 从前往后"></a>方法二 : 双指针 &#x2F; 从前往后</h3><p>初始化一个新的数组<code>sorted</code>，用双指针选择最小的值插入到<code>sorted</code>中，最后还要把<code>sorted</code>重新遍历回<code>nums1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">m</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums1, m, nums2, n</span>) &#123;<br>    <span class="hljs-keyword">let</span> p1 = <span class="hljs-number">0</span>; <span class="hljs-keyword">let</span> p2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> sorted = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(m + n).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">let</span> cur;<br>    <span class="hljs-keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (p1 === m) &#123;<br>            cur = nums2[p2++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 === n) &#123;<br>            cur = nums1[p1++];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;<br>            cur = nums1[p1++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = nums2[p2++];<br>        &#125;<br>        sorted[p1 + p2 - <span class="hljs-number">1</span>] = cur;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i != m + n; ++i) &#123;<br>        nums1[i] = sorted[i];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方法三-双指针-从后往前"><a href="#方法三-双指针-从后往前" class="headerlink" title="方法三 : 双指针 &#x2F; 从后往前"></a>方法三 : 双指针 &#x2F; 从后往前</h3><p>前面两个方法都没有利用到题目中给的一个条件，<strong>两个有序数组</strong>，另外为了兼容其他语言，数组<code>nums1</code>的长度都足够长了。这次还是用双指针，不过是从数组尾部遍历，找最大的，直接填入到<code>nums1</code>中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">m</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums1, m, nums2, n</span>) &#123;<br>    <span class="hljs-keyword">let</span> p1 = m - <span class="hljs-number">1</span>; <span class="hljs-keyword">let</span> p2 = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> tail = m + n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> cur;<br>    <span class="hljs-keyword">while</span> (p1 &gt;= <span class="hljs-number">0</span> || p2 &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p1 === -<span class="hljs-number">1</span>) &#123;<br>            cur = nums2[p2--];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 === -<span class="hljs-number">1</span>) &#123;<br>            cur = nums1[p1--];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;<br>            cur = nums1[p1--];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = nums2[p2--];<br>        &#125;<br>        nums1[tail--] = cur;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>更 hack 的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums1</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">m</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums2</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">n</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums1, m, nums2, n</span>) &#123;<br>    <span class="hljs-keyword">let</span> len = m + n;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (m &lt;= <span class="hljs-number">0</span>) &#123;<br>            nums1[--len] = nums2[--n];<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        nums1[--len] = nums1[m - <span class="hljs-number">1</span>] &gt;= nums2[n - <span class="hljs-number">1</span>] ? nums1[--m] : nums2[--n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：26. 删除有序数组中的重复项</title>
    <link href="/posts/c60f7105.html"/>
    <url>/posts/c60f7105.html</url>
    
    <content type="html"><![CDATA[<p>这道题如果在实际工作中其实不容易遇到，因为想把一个数组去重，一个<code>Set</code>就足以。然而这道题有猫腻：<code>原地修改</code>。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 $O(1)$ 额外空间的条件下完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=26 lang=javascript </span><br><span class="hljs-comment">// @title remove-duplicates-from-sorted-array</span><br><span class="hljs-comment">// @test([1,1,2])=2</span><br><span class="hljs-comment">// @test([0,0,1,1,1,2,2,3,3,4])=5</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>原本我就是使用<code>Set</code>来做这道题的，最后发现一直给我报错。问题就出在<code>原地</code>上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要把数组原地替换，把第一次出现的元素移到重复的元素位置上，实现原地修改。</p><p>因为整个数组是有顺序的，就可以用比大小的方式来判断相邻两个元素是否是相同。这里使用快慢指针的方式解决这个问题，<code>i</code>是插入操作指针，<code>j</code>是遍历指针。只要判断<code>j</code>指针的元素大于或者不等于<code>i</code>，就更新<code>i+1</code>位置的元素为<code>j</code>指针的元素。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> removeDuplicates = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) &#123;<br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; <span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &lt;= nums.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] === nums[j]) j++;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt; nums[j]) &#123;<br>            nums[i + <span class="hljs-number">1</span>] = nums[j];<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>上面提到的<code>Set</code>去重数组，如果数组元素是个<code>Object</code>，记得深度拷贝。否则会出现去重后的数组会影响原来的数组。</p><p>我一般的深度拷贝是用下面这种，主要是我也没写代码实现过这东西。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(array))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：20. 有效的括号</title>
    <link href="/posts/1999bc52.html"/>
    <url>/posts/1999bc52.html</url>
    
    <content type="html"><![CDATA[<p>这道题其实在编辑器和编译器上使用还是比较广的。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=20 lang=javascript </span><br><span class="hljs-comment">// @title valid-parentheses</span><br><span class="hljs-comment">// @test(&quot;()&quot;)=true</span><br><span class="hljs-comment">// @test(&quot;()[]&#123;&#125;&quot;)=true</span><br><span class="hljs-comment">// @test(&quot;(]&quot;)=false</span><br><span class="hljs-comment">// @test(&quot;([)]&quot;)=false</span><br><span class="hljs-comment">// @test(&quot;&#123;[]&#125;&quot;)=true</span><br><span class="hljs-comment">/**</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>用一个<code>map</code>来存储括号的闭合关系，用一个数组来当栈用。所有左括号都把对应的右括号入栈，遇到右括号都需要出栈，并对比。如果不能形成匹配关系则说明括号不匹配。如果结束遍历后栈里还存在元素，也被视为括号不匹配。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> isValid = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = &#123;<br>        <span class="hljs-string">&quot;[&quot;</span>: <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>: <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span><br>    &#125;;<br>    <span class="hljs-keyword">const</span> stack = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; s.<span class="hljs-property">length</span>; index++) &#123;<br>        <span class="hljs-keyword">if</span> (map[s[index]]) &#123;<br>            stack.<span class="hljs-title function_">push</span>(s[index]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (map[stack.<span class="hljs-title function_">pop</span>()] !== s[index]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：14. 最长公共前缀</title>
    <link href="/posts/37a011d5.html"/>
    <url>/posts/37a011d5.html</url>
    
    <content type="html"><![CDATA[<p>看起来很简单的一道题，时间复杂度居然是$O(n^2)$</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=14 lang=javascript </span><br><span class="hljs-comment">// @title longest-common-prefix</span><br><span class="hljs-comment">// @test([&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;])=&quot;fl&quot;</span><br><span class="hljs-comment">// @test([&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;])=&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>方案有很多，最简单的有两个种：</p><ol><li>对所有字符串的第 x 位对比，每一次遍历对比相等就把该位字符累加到<code>result</code>上。只要遍历对比失败则返回<code>result</code>。</li><li>$0&lt;n&lt;arr.length-2$，第 1 个字符串与第 n 个字符串按位对比。更新最长字符前缀到<code>arr</code>第 1 个元素。当最长前缀为<code>&quot;&quot;</code>则推出遍历，返回<code>&quot;&quot;</code>，或者数组遍历完成，返回数组第一个的元素。</li></ol><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p><strong>代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string[]</span>&#125; <span class="hljs-variable">strs</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> longestCommonPrefix = <span class="hljs-keyword">function</span>(<span class="hljs-params">strs</span>) &#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> t = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; strs[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>; index++) &#123;<br>        t = strs[<span class="hljs-number">0</span>][index];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; strs.<span class="hljs-property">length</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (t !== strs[j][index]) &#123;<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>        &#125;<br>        res += t;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><strong>代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string[]</span>&#125; <span class="hljs-variable">strs</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> longestCommonPrefix = <span class="hljs-keyword">function</span>(<span class="hljs-params">strs</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!strs.<span class="hljs-property">length</span> || !strs[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; strs.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt;= strs[i].<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>][j] !== strs[i + <span class="hljs-number">1</span>][j]) &#123;<br>                strs[<span class="hljs-number">0</span>] = result;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result += strs[<span class="hljs-number">0</span>][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>前面两者办法都是循环嵌套。有没有更 hack 的方式？用字符串比大小，获取出数组中字母排序最前与字母排序最后的两个元素获取最长子串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string[]</span>&#125; <span class="hljs-variable">strs</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> longestCommonPrefix = <span class="hljs-keyword">function</span>(<span class="hljs-params">strs</span>) &#123;<br>    <span class="hljs-keyword">if</span> (strs.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> minStr = strs[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> maxStr = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; strs.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (strs[i] &lt; minStr) minStr = strs[i];<br>        <span class="hljs-keyword">if</span> (strs[i] &gt; maxStr) maxStr = strs[i];<br>    &#125;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; minStr.<span class="hljs-property">length</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (minStr[j] !== maxStr[j]) <span class="hljs-keyword">return</span> result;<br>        result += minStr[j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：13. 罗马数字转整数</title>
    <link href="/posts/b6bcc477.html"/>
    <url>/posts/b6bcc477.html</url>
    
    <content type="html"><![CDATA[<p>罗马数字一直以来都是当科普学习的，毕竟阿拉伯数字比罗马数字更容易识别，这道题就是把罗马数字转阿拉伯数字</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=13 lang=javascript </span><br><span class="hljs-comment">// @title roman-to-integer</span><br><span class="hljs-comment">// @test(&quot;III&quot;)=3</span><br><span class="hljs-comment">// @test(&quot;IV&quot;)=4</span><br><span class="hljs-comment">// @test(&quot;IX&quot;)=9</span><br><span class="hljs-comment">// @test(&quot;LVIII&quot;)=58</span><br><span class="hljs-comment">// @test(&quot;MCMXCIV&quot;)=1994</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>罗马数字有个比较让人烦恼的地方，就是有些数字是需要两个字母一起表示的。我们可以把两个字母的数字转换成单个字母，再进行数值运算。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> romanToInt = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-number">1</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">5</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">10</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">50</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">100</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">500</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">1000</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">4</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-number">9</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-number">40</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">90</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">400</span>);<br>    map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">900</span>);<br>    s = s.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;IV&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;IX&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;XL&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;XC&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;CD&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;CM&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>);<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>        result += map.<span class="hljs-title function_">get</span>(s[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这就有点耍流氓了，但是我就是喜欢耍流氓。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>当然也可以逐一对字符串进行解析。如果遇到<code>I</code>后面有<code>V</code>这种，就进行减<code>I</code>操作。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> romanToInt = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = &#123;<br>        <span class="hljs-attr">I</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">V</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">X</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">L</span>: <span class="hljs-number">50</span>,<br>        <span class="hljs-attr">C</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">D</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">M</span>: <span class="hljs-number">1000</span><br>    &#125;;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (map[s[i]] &lt; map[s[i + <span class="hljs-number">1</span>]]) &#123;<br>            res -= map[s[i]];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res += map[s[i]];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这要是能<code>goto</code>就好了，不符合<code>case</code>里面的判断推荐直接到<code>default</code>。wtfjs 有保留字却没有实现<code>goto</code>功能。</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：9. 回文数</title>
    <link href="/posts/34b3ee0f.html"/>
    <url>/posts/34b3ee0f.html</url>
    
    <content type="html"><![CDATA[<p>刚一看题目，我还以为是回族文字，然而并不是，意思是正读和反读都相同的字符序列。</p><span id="more"></span><p>有趣的是，回文也是一种汉语语法。看下面就知道是什么了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">空花落尽酒倾缸，日上山融雪涨江。<br>红培浅瓯新火活，龙团小碾斗晴窗。<br></code></pre></td></tr></table></figure><p>反过来读：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">窗晴斗碾小团龙，活火新瓯浅焙红。<br>江涨雪融山上日，缸倾酒尽落花空。<br></code></pre></td></tr></table></figure><p>偏题了，来看看题目</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @title palindrome-number</span><br><span class="hljs-comment">// @test(121)=true</span><br><span class="hljs-comment">// @test(-121)=false</span><br><span class="hljs-comment">// @test(10)=false</span><br><span class="hljs-comment">// @test(-101)=false</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>还是和第七题一样，可以把数字转字符串，再进行操作。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>既然是回文数，那只要使用下面的方法反转字符串，然后和之前的对比，两者相等就是回文了。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> isPalindrome = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    x += <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>) === x;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这样写算法题像是作弊？而且用这么多内置方法，大概会被问怎么实现<code>reverse()</code>。那用遍历吧。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> isPalindrome = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    x += <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">const</span> newString = [];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = x.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">0</span>; i--, j++) &#123;<br>        newString[j] = x[i];<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> x === newString.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>还有没有更 hack 的方法？前面第 n 位与倒数第 n 位对比，完全相同也可证明是回文数。</p><p><strong>代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> isPalindrome = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    x += <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> len = x.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; len) &#123;<br>        <span class="hljs-keyword">if</span> (x[i++] !== x[len--]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里巧妙的避开了数字长度是单数和双数的问题，因为后指针（下标）不会和前指针（下标）相同。</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：7. 整数反转</title>
    <link href="/posts/92582f35.html"/>
    <url>/posts/92582f35.html</url>
    
    <content type="html"><![CDATA[<p>在 js 中，经常遇到把字符串反转的情况，一般是把字符串转为数组，反转数组后再转为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果遇到的是数字呢？</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你一个 32 位的有符号整数 $x$ ，返回将 $x$ 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231,  231 − 1]</code> ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=7 lang=javascript </span><br><span class="hljs-comment">// @title reverse-integer</span><br><span class="hljs-comment">// @test(1534236469)=0</span><br><span class="hljs-comment">// @test(123)=321</span><br><span class="hljs-comment">// @test(-123)=-321</span><br><span class="hljs-comment">// @test(120)=21</span><br><span class="hljs-comment">// @test(0)=0</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">x</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>可以把数字转为字符串处理，指定是整数，也就是没有小数部分。只要转换为字符串，对字符串中的字符逐一操作，就能把数字进行反转。那符号怎么办？用一个变量来保存一个乘数，若是负数就存<code>-1</code>，否则是<code>1</code>。</p><p><strong>代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reverse = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">const</span> flag = x &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>    x *= flag;<br>    x += <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = x.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; index &gt; -<span class="hljs-number">1</span>; index--) &#123;<br>        res = x[index] - <span class="hljs-number">0</span> + res * <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res &lt;= <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span> &amp;&amp; flag * res &gt;= -(<span class="hljs-number">2</span> ** <span class="hljs-number">31</span>) ? res * flag : <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里用到了很多 js 的诡异的操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数字转字符串</span><br>x += <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">// 字符串数字转数字</span><br>x -= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 刷题记：1.two-sum</title>
    <link href="/posts/265bf3b6.html"/>
    <url>/posts/265bf3b6.html</url>
    
    <content type="html"><![CDATA[<p>这是 leetcode 的第一道题目。</p><span id="more"></span><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @algorithm @lc id=1 lang=javascript </span><br><span class="hljs-comment">// @title two-sum</span><br><span class="hljs-comment">// @test([2,7,11,15],9)=[0,1]</span><br><span class="hljs-comment">// @test([3,2,4],6)=[1,2]</span><br><span class="hljs-comment">// @test([3,3],6)=[0,1]</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题是要放回两个加数在数组中的下标，而且肯定能在数组中找到答案。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>可以使用双层循环的方式来暴力求解，这样的时间复杂度就是$O(n^2)$。</p><p><strong>代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// @title two-sum</span><br><span class="hljs-comment">// @test([2,7,11,15],9)=[0,1]</span><br><span class="hljs-comment">// @test([3,2,4],6)=[1,2]</span><br><span class="hljs-comment">// @test([3,3],6)=[0,1]</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> twoSum = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.<span class="hljs-property">length</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i !== j &amp;&amp; nums[i] + nums[j] === target) &#123;<br>                <span class="hljs-keyword">return</span> i &gt; j ? [j, i] : [i, j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>有没有更好的方式？先看看里面最简单的数学问题</p><p>$$<br>x+y&#x3D;target<br>$$</p><p>其中$x$和$y$是<code>nums</code>中的元素，<code>target</code>已知，那如果我们用个 HashMap 保存已经遍历过的元素$x$与<code>target</code>的差$y$作为<code>key</code>，<code>value</code>中存元素$x$的下标，只要找到剩下的数组中存在$y$，就能返回两者的下标了。</p><p><strong>代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> twoSum = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(target - nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (map.<span class="hljs-title function_">has</span>(nums[i])) <span class="hljs-keyword">return</span> [nums[i], map.<span class="hljs-title function_">has</span>(nums[i])];<br>        map.<span class="hljs-title function_">set</span>(target - nums[i], nums[i]);<br>        i++;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如此，我们就能只要遍历一次数组，就能得到想要的结果，时间复杂度就只有$O(n)$。</p><p>如果不想使用<code>Map</code>，使用<code>Object</code>也行。据说以前没有<code>Map</code>的时候，<code>Object</code>经常拿来当<code>hashmap</code>用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> twoSum = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">const</span> map = &#123; [target - nums[<span class="hljs-number">0</span>]]: <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (map[nums[i]] !== <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> [nums[i], map[nums[i]]];<br>        map[target - nums[i]] = i;<br>        i++;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初尝最短路算法之 Dijkstra</title>
    <link href="/posts/ddac6dad.html"/>
    <url>/posts/ddac6dad.html</url>
    
    <content type="html"><![CDATA[<p>最近碰到一个面试题，然后感觉是最短路问题，于是花了一天时间学习，虽然算法还是没看懂，还是记录一下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//求解 index 号顶点到达其他顶点的最短距离</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">path, index</span>) &#123;<br>    <span class="hljs-keyword">let</span> m = path &amp;&amp; path.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> n = m &amp;&amp; path[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;<br><br>    <span class="hljs-keyword">if</span> (m &amp;&amp; n &amp;&amp; m === n &amp;&amp; index &lt; n) &#123;<br>        <span class="hljs-comment">//初始化 distance</span><br>        <span class="hljs-keyword">let</span> dis = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(path[index]));<br><br>        <span class="hljs-keyword">let</span> flag = [];<span class="hljs-comment">//用于标识 index 号至其他顶点的距离是否确定</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            flag.<span class="hljs-title function_">push</span>(<span class="hljs-literal">false</span>)<br>        &#125;<br>        flag[index] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">let</span> min, minIndex;<br>        dis[index].<span class="hljs-property">way</span> = [dis[index].<span class="hljs-property">shop</span>, dis[index].<span class="hljs-property">shop</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            min = <span class="hljs-title class_">Infinity</span>;<br>            <span class="hljs-comment">//找出剩余的不确定的点到 index 最短的距离对应的索引</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (!flag[j] &amp;&amp; dis[j].<span class="hljs-property">weight</span> &lt; min) &#123;<br>                    min = dis[j].<span class="hljs-property">weight</span>;<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            flag[minIndex] = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标识 index 到此顶点的距离已经确认</span><br>            <span class="hljs-keyword">if</span> (dis[minIndex].<span class="hljs-property">way</span> == <span class="hljs-literal">undefined</span>) dis[minIndex].<span class="hljs-property">way</span> = [dis[index].<span class="hljs-property">shop</span>, dis[minIndex].<span class="hljs-property">shop</span>]<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k = <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>                <span class="hljs-keyword">if</span> (dis[k].<span class="hljs-property">way</span> == <span class="hljs-literal">undefined</span>) dis[k].<span class="hljs-property">way</span> = dis[k].<span class="hljs-property">way</span> = [dis[index].<span class="hljs-property">shop</span>, dis[k].<span class="hljs-property">shop</span>]<br>                <span class="hljs-comment">//判断 minIndex 到 k 之间有无道路</span><br>                <span class="hljs-keyword">if</span> (path[minIndex][k].<span class="hljs-property">weight</span> &lt; <span class="hljs-title class_">Infinity</span>) &#123;<br>                    <span class="hljs-comment">//更新 distance</span><br>                    <span class="hljs-keyword">if</span> (dis[k].<span class="hljs-property">weight</span> &gt; dis[minIndex].<span class="hljs-property">weight</span> + path[minIndex][k].<span class="hljs-property">weight</span>) &#123;<br>                        dis[k].<span class="hljs-property">weight</span> = dis[minIndex].<span class="hljs-property">weight</span> + path[minIndex][k].<span class="hljs-property">weight</span>;<br>                        dis[k].<span class="hljs-property">way</span> = [...dis[minIndex].<span class="hljs-property">way</span>, path[minIndex][k].<span class="hljs-property">shop</span>]<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dis;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;数据有误&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> path = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>],<br>    [<span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>],<br>    [<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;source&quot;</span>, path)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PATHS</span> = []<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Arr</span> = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; path.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-variable constant_">PATHS</span>[index] = path[index].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> &#123; <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">weight</span>: value, <span class="hljs-attr">shop</span>: <span class="hljs-title class_">Arr</span>[index] &#125; &#125;)<br>&#125;<br><br><span class="hljs-keyword">let</span> res = []<br><span class="hljs-keyword">let</span> log = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-variable constant_">PATHS</span>.<span class="hljs-property">length</span>; index++) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">dijkstra</span>(<span class="hljs-variable constant_">PATHS</span>, index)<br>    res[index] = result.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value.<span class="hljs-property">weight</span>)<br>    log += <span class="hljs-string">`start shop: <span class="hljs-subst">$&#123;result[index].shop&#125;</span>\n`</span><br>    result.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> log += <span class="hljs-string">`end: <span class="hljs-subst">$&#123;value.shop&#125;</span> weight: <span class="hljs-subst">$&#123;value.weight&#125;</span> path: <span class="hljs-subst">$&#123;value.way.toString().replace(/,/g, <span class="hljs-string">&quot;--&gt;&quot;</span>)&#125;</span>\n`</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result&#x27;</span>, res)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(log)<br></code></pre></td></tr></table></figure><p>经历了一次面试，发现自己还是有很多的不足，算法和数据结构真要捞一下了。可能以后写更多有关算法和数据结构的博客。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/sinat_36521655/article/details/82085936">最短路径算法——Dijkstra 算法的 JS 实现</a></p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重观《阿凡达》</title>
    <link href="/posts/fb3c7990.html"/>
    <url>/posts/fb3c7990.html</url>
    
    <content type="html"><![CDATA[<p>3 月 15 日北京沙尘暴刷屏了，而电影院还在放 <em>阿凡达</em> ，这似乎有种回到 2009 年的感觉。</p><span id="more"></span><p>时隔 12 年再看阿凡达，看懂了很多东西，而不仅仅是对电影特效的震，当然阿凡达的特效在今天看来一点也不落伍。下面的内容并不连贯，只当是我自己对这部影片的一些小小的感想。</p><p>电影一开局，男主杰克在人流中，身边的人都带着口罩。口罩，一下子把我拉回到 2019 年，经历过这次全球疫情，感触颇深。</p><p>人类驾驶飞船到潘多拉星球，为了一种地球上没有的超导体，破坏潘多拉的环境，导致与星球上的类人生物 Na’vi 族发生了冲突。导演这是在说谁？有种温铁军老师说的海洋文明的味道了。</p><p>潘多拉星球的生物也是很有意思，几乎出场大生物，都和类人生物一样，头后面都有像花蕊一样的连接器。这意味着这些生物都能通过连接器互相交流，被 Na’vi 族人驯服。而这个连接器又能通过连接“艾娃”和全球的 Na’vi 族人联网，甚至能和死去的先人交流。“艾娃”不仅仅是 Na’vi 族人的神，也是整个星球的神。甚至可以认为这个星球是存在意识的。在这个星球上，虽然也存在吃与被吃的关系，但导演想展示给我们一种对生命的尊重，敬畏，感激的生存理念。与前来挖矿的人类形成鲜明对比。</p><p>人类不相信潘多拉的神是真实存在的，认为神只是类人生物对科学现象的无知，为了解释而捏造的共同精神寄托。在几百年的欧洲人也是这么认为非洲和美洲土著的信仰的。而这部电影用“艾娃”解释了神不是 Na’vi 族捏造的，只是因为人类没有连接器，不能与神交流，把自己的无知当真理。Na’vi 族虽然住在树洞里，生产落后，没有像人类一样的生产技术，却比人类更有智慧，人类在他们面前就是一群拿着武器到处捣乱的熊孩子。</p>]]></content>
    
    
    <categories>
      
      <category>观影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科普：微信点餐说用户信息</title>
    <link href="/posts/d429dfce.html"/>
    <url>/posts/d429dfce.html</url>
    
    <content type="html"><![CDATA[<p>今天看广东卫视的今日关注栏目，有一个消费者问题刚好我能回答</p><blockquote><p>微信点餐真的需要用户关注公众号，注册，提供手机号码甚至地理位置信息吗？</p></blockquote><span id="more"></span><p>先说答案，关注微信公众号是必须的，注册也是必须的，但是注册不一定需要用户手机号码，更不一定需要用户的地理位置信息。</p><p>答案解析我分为以下几个部分</p><ol><li>点个餐为什么需要关注公众号</li><li>点餐是否一定需要注册</li><li>商家为什么需要用户的电话号码和地理位置</li></ol><p>下面的答案都是针对微信公众号的，小程序其实大同小异</p><h2 id="点个餐为什么需要关注公众号"><a href="#点个餐为什么需要关注公众号" class="headerlink" title="点个餐为什么需要关注公众号"></a>点个餐为什么需要关注公众号</h2><p>自从微信推出公众号和小程序之后，很多互联网公司都从网页转战微信，也有很多公司通过互联网加的模式开始有了自己的公众号或者小程序。</p><p>公众号和小程序这么火，其中原因之三是手机的便携性、微信支付和微信是社交平台，让微信平台成为可能。</p><p>在微信公众号的开发过程中，微信针对用户的每一个公众号都有特有的 openid，所以 openid 就能作为用户在公众号的唯一凭证，支付也只需要 openid 就能实现。</p><p>只要用户对公众号关注，公众号才能为用户提供服务。</p><h2 id="点餐是否一定需要注册"><a href="#点餐是否一定需要注册" class="headerlink" title="点餐是否一定需要注册"></a>点餐是否一定需要注册</h2><p>微信公众号的注册其实在用户注册的时候就已经触发，一种是静默授权，另一种是非静默授权，两者的区别是非静默授权需要用户手动点击授权按钮，能让公众号获取更多的权限，譬如用户的地理位置信息，但不包括手机号码（是的，微信是不会给公众号持有者暴露公众号用户的手机号码的）。</p><p>所以只要关注了公众号，就相当于注册，就能提供点餐支付服务，那为什么还需要用户提供手机号码甚至是用户的地理位置呢？</p><h2 id="商家为什么需要用户的电话号码和地理位置"><a href="#商家为什么需要用户的电话号码和地理位置" class="headerlink" title="商家为什么需要用户的电话号码和地理位置"></a>商家为什么需要用户的电话号码和地理位置</h2><p>看了前面的内容，大家一定觉得我下面是要爆黑料吧？可真不是。</p><p>一般做微信公众号的其实并不会是你家楼下的小卖部，大排档，甚至酒吧，咖啡厅，一定是向大区域性甚至全国全球提供服务的企业。如星巴克，bilibili，KFC, 电影院，连锁酒店。…</p><p>当然也会有一些小企业的服务也许要用户提供这些信息，到底是为什么？</p><p>企业获取用户信息，说真话，肯定是越多越好，有助于企业对用户的定位，提供更精准的推送。</p><p>如果仅仅是上面这一条原因，那的确让人很不安。当然下面还有</p><p>因为微信提供的平台对其他企业来说是第三方，不能保证那天微信崩了，在上面的公众号用户的信息丢失，相当于企业失去了整个在公众号上的客户。而目前常见的互联网注册是通过手机号码或者邮箱保证用户唯一性的。<strong>邮箱并不是每一个人都有，但是手机号码是每一个有微信的人都有的。所以注册需要用户输入手机号码，而手机短信验证码是为了保证用户就是该手机号码的持有者。</strong></p><p>获取地理位置对一些公众号来说是非必须项，但是对另一些公众号来说就是必须项了。比如电影院，连锁酒店，星巴克，KFC。因为它们的服务是连锁的，也是有地域范围的，让用户能方便找到距离最近的服务点，并查询所在的站点能提供那些服务。虽然说即使微信不提供这样的权限，程序员也能通过其他地图接口获取到用户去了哪个连锁站点，但是增加了开发难度。有现成的方案为什么还有自己造轮子呢。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>国人的互联网信息安全意识越来越强，这是好事。我们的个人信息数据被各个互联网企业采集并用在各个服务上，这也是事实。如果没有信息采集构成大数据，就不会有网易云音乐这样懂你 style 的音乐软件，也不会有像抖音那样让你忘记时间的 app，甚至可能连现在为中国新冠做贡献的健康码都实现不了。当我们进入互联网的那一刻，我们的互联网信息就开始记录在互联网的历史中。我们能做的，只有谨慎使用自己在互联网上的信息。</p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码设计问题</title>
    <link href="/posts/aa84bf4d.html"/>
    <url>/posts/aa84bf4d.html</url>
    
    <content type="html"><![CDATA[<p>今天看掘金文章，看到一篇 <a href="https://juejin.cn/post/6932290083794583566"><em>Node 写的毕设项目 100 人并发就撑不住，我是这样解决的</em></a> 的评论给了一个很有意思的观点：</p><span id="more"></span><blockquote><p>一般这种情况都是将 hash 工作交给前端，最后数据传递只传递 hash 后的密码。有人可能认为，如果由前端进行 hash，会导致 salt 泄漏之类的情况，但是实际上，salt 泄漏并不会带来问题。salt 只是为了防止相同数据的 hash 碰撞问题，只要你设定了独特的 salt，不会和其他被脱库的数据集采用了一样的 salt，就不会由有问题。还有人会考虑，如果泄漏 salt 有可能导致可以本地生成字典 hash 进行碰撞。其实这个情况也不用担心，节流阀等东西可以做好限制，而且如果别人铁了心要攻击了，估计会开大量代理来反复撞库，可能密码还没破，网站先挂了。总而言之，这种可以由客户端解决的任务，可以交给客户端来处理，既能降低服务端的负载，同时也不会丢失安全性。</p></blockquote><p>以上的说法我还是认同的。</p><p>其实在时候很多大公司的 API 时，也会经常看到需要调用方先对 key 或者 password 进行 hash 处理。甚至在写很多网站爬虫的时候，也是在前端进行 hash 后再调用登录接口的。</p><p>后端服务器一般不会存明文密码，所以在注册，更改密码的时候，后端也只需要经过 hash 的密码即可。而前端也不会保存密码，如果使用的是想 OAuth2.0 的方式调用接口，密码其实在后续的接口调用中没有任何作用。如果做记住密码的功能，则需要保存在前端。不过现在的浏览器都自带记住密码的功能，不实现其实也问题不大。</p>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 安装腾达 U12 驱动</title>
    <link href="/posts/aca5d3de.html"/>
    <url>/posts/aca5d3de.html</url>
    
    <content type="html"><![CDATA[<p>我的 yoga 笔记本上本来是有无线网卡的，因为之前想安装黑苹果，自带的网卡貌似支持不好，于是就买了腾达 U12，这款网卡在 windows 和 mac 上运行是没问题的，问题在于我经常使用的是 linux。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210313090224.jpeg" alt="U12"></p><p>官方的驱动支持的内核太老了，我又是使用 Archlinux 这种最新内核的系统。网上说可以使用驱动上游 <a href="https://github.com/gnab/rtl8812au">https://github.com/gnab/rtl8812au</a> 自己编译。</p><p>先把 U12 从电脑上拔下来，接下来操作也不难：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/gnab/rtl8812au.git<br><span class="hljs-built_in">cd</span> rtl8812au<br>make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><p>最后插上 U12，电脑就会自带识别。</p><blockquote><p>如果 Archlinux 刚刚更新过内核，需要先重启系统再执行安装操作，否则找不到正确的内核文件夹</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
      <tag>编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>也说 jwt</title>
    <link href="/posts/20c24ba5.html"/>
    <url>/posts/20c24ba5.html</url>
    
    <content type="html"><![CDATA[<p>最近在一个 Nodejs 群里突然聊到后端怎么授权的问题，引出了 <a href="https://jwt.io/introduction">JWT</a> 的使用问题。</p><span id="more"></span><ol><li>JWT 是什么？</li><li>JWT 真的不需要在服务器端保存吗？</li><li>JWT 和 OAuth2.0 中普通的 token 有什么区别？</li></ol><p>我在网上搜索的时候发现下面奇葩的观点</p><p>阮一峰：<code>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[JSON Web Token 入门教程](https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html)">[1]</span></a></sup></p><p>我也是用过 JWT + OAuth2.0 实现过授权鉴权服务器的，而我的观点和上面的观点是不同的。</p><p>我不认同服务器不保存 <code>session id</code> 的做法，要说明原因，我们就需要知道 JWT 是什么。</p><h2 id="JWT-是什么"><a href="#JWT-是什么" class="headerlink" title="JWT 是什么"></a>JWT 是什么</h2><p>这个问题可以直接看官网的介绍</p><p><a href="https://jwt.io/introduction">JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public&#x2F;private key pair using RSA or ECDSA.</a></p><p>我英文不好，但是大概只能知道 JWT 是一个可以用 JSON 格式来传输数据的 web token，另外这个 token 是有数字加密的，使用 token 是能验证的，这让 token 具有比较好的可信度。</p><p>之所以在 token 前面强调 web，官网下面的签名算法就说明了一切：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">HMACSHA256</span>(<br>  <span class="hljs-title function_">base64UrlEncode</span>(header) + <span class="hljs-string">&quot;.&quot;</span> +<br>  <span class="hljs-title function_">base64UrlEncode</span>(payload),<br>  secret)<br></code></pre></td></tr></table></figure><p><code>base64UrlEncode</code>这个方法说明了生成的 JWT 是可用在 URL 上的。而且<code>base64UrlEncode</code>是可以 decode 的，这就使得<code>payload</code>中的内容可见。而签名是使用自身前面的<code>header</code>和<code>payload</code>的 base64 加上一个<code>secret</code>hash 得来的，所以只要这个<code>secret</code>不泄漏，<code>secret</code>的拥有者就能检验数据是否被篡改过。</p><h2 id="服务器端是否需要保存-JWT"><a href="#服务器端是否需要保存-JWT" class="headerlink" title="服务器端是否需要保存 JWT"></a>服务器端是否需要保存 JWT</h2><p>先说我的答案，需要！</p><p><strong>不管怎么样，客户端都是不可信的。</strong>服务器很难分辨请求是正常的用户操作还是黑客窃取，作为一个会写爬虫的 nodejs 程序员，深知服务器安全还是需要在服务器端来自己把控的。</p><p>不如做个简单的推理，就能很容易反驳阮一峰的说法，如下</p><p>如果服务器端不保存<code>session id</code>，利用 JWT 的过期特性和签名特性，服务器在用户登录的情况下签发一个两个小时后过期的 JWT 给浏览器，这个 token 我们先称为 <strong>tokenA</strong>，但是用户在不到两个小时之内退出，并重新登录，服务器再次给用户签发一个两个小时后过期的 JWT 给浏览器，我们把后签发的称为 <strong>tokenB</strong>。<strong>因为 JWT 签发后是不能销毁的，即使是签发者也不能让签证提前过期。</strong>而这时候只要 <strong>tokenA</strong> 还处于有效期内，就会存在两个（甚至多个）同时生效的 token。这是很不安全的。虽然前端会说用户退出登录就在浏览器上销毁 token 了，但是谁能保证用户不会自己在退出登录之前先把 token 取出来呢？后端这是给自己留下安全隐患吗？</p><p>综上，在<code>Authorization</code>的应用中使用到 JWT，还是需要保存在服务器端，与之前保存<code>session id</code>的做法一样。</p><h2 id="JWT-和普通的-Token-有什么区别"><a href="#JWT-和普通的-Token-有什么区别" class="headerlink" title="JWT 和普通的 Token 有什么区别"></a>JWT 和普通的 Token 有什么区别</h2><p>这里的讨论前提是有<code>Authorization</code>的前提下进行的，这里的<code>Authorization</code>意味着用户想的到 token，必须是以账户密码为前提获取的，即使是用 refresh token 换 access token 也是需要先登录。</p><p>有人可能觉得这个前提条件可以不设，我想说我就见过知道从 url 上得到的 username 去调用 userinfo 接口就能得到 token 的网站。下面的讨论在这个网站里不成立。</p><p>先说说在 JWT 之前，后端做 token 一般都是用用户特征值（唯一 id）加时间戳加后端持有 secret 经过一定的算法生成的，然后放在 redis 里面做鉴权。得到的是一段字符串，前端也看不到授权的权限是什么，只能通过自己请求的接口和接口文档来确定这个 token 的权限访问。</p><p>这时候应该有人要发问了</p><p>问： JWT 与以前的普通 token 有什么区别？</p><p>答：其实也没有什么很大的差别，毕竟 JWT 也只是一种 token，和普通的 token 相比，也只是<code>payload</code>可读，以及能在很大程度上保证<code>payload</code>不被篡改。当然要保证<code>secret</code>足够强大，尽量不是有意义的字符串。</p><p>问：token 不可读，这样能增加了安全性，JWT 把数据显式的展示出来，暴露过多的信息，这不是此地无银吗？</p><p>答：JWT 的确是显式的把<code>payload</code>的数据展示了，所以一般<code>payload</code>里面只放必要的数据。可能会觉得因为 header 里面声明了签名的 hash 算法，觉得比普通的 token 还容易破解出<code>secret</code>。其实也不必担心，因为 hash 算法不是加密算法，是没有解密一说的。签名只是为了保证<code>payload</code>是否被篡改，并不是对<code>payload</code>加密。</p><p>问：那和普通的 OAuth2.0 token 有什么区别，以前的 token 也是这么做的，JWT 就这？</p><p>答：<strong>把以前的 OAuth2.0 token 用 JWT 封装的，其实还是有一定的好处的</strong>，只要在<code>payload</code>里面增加过期时间，持有 JWT 端即可自己判断 token 是否还可用，是否需要重新刷新 token。但是不建议服务器端根据<code>payload</code>中的数据，把其他过多原本应该给签发端发送校验请求的工作转由自己去处理，因为如果这个 JWT 不是用非对称加密签发的，持有端是没办法判断 JWT 是否被篡改。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做<code>Authorization</code>不一定需要使用 JWT，以前那种普通的 token 和 JWT 都只是 token，JWT 只是多了一个<code>payload</code>可读，以及签名验证保证<code>payload</code>不被篡改，但是在不使用非对称加密的情况下，持有 JWT 端也没办法判断 JWT 是否被篡改，只能是签发端能判断。</p><h2 id="参考-引用"><a href="#参考-引用" class="headerlink" title="参考 &amp; 引用"></a>参考 &amp; 引用</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">JSON Web Token 入门教程</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh 登录服务器触发钉钉机器人</title>
    <link href="/posts/ca75751e.html"/>
    <url>/posts/ca75751e.html</url>
    
    <content type="html"><![CDATA[<p>今天帮一个网友修改一个脚本，顺便抄了作业</p><span id="more"></span><p>人狠话不多，直接上代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#获取相关登陆信息</span><br>name=`hostname`<br>ip=$(ip addr | grep inet | grep -v inet6 | sed -n 2p | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> |awk -F <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>user=<span class="hljs-variable">$USER</span><br>_ip=<span class="hljs-variable">$&#123;SSH_CLIENT%% *&#125;</span><br>_time=`<span class="hljs-built_in">date</span> <span class="hljs-string">&#x27;+%Y-%m-%d-%H:%M:%S&#x27;</span>`<br><span class="hljs-comment"># #查询登陆地址并返回相应信息</span><br>ipaddress=`curl -q -s https://www.36ip.cn/?ip=<span class="hljs-variable">$_ip</span>`<br><br>addr=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$ipaddress</span> | sed <span class="hljs-string">&#x27;/ \+/s//|/g&#x27;</span>`<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$ip</span> <span class="hljs-variable">$user</span> <span class="hljs-variable">$name</span> <span class="hljs-variable">$addr</span><br><span class="hljs-comment">#自定义接入钉钉函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">SendMessageToDingding</span></span>()&#123;<br><span class="hljs-comment">#钉钉机器人接口地址</span><br>url=<span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=xxxx&quot;</span><br><span class="hljs-comment">#推送到钉钉</span><br>res=`curl -X POST -s -L -H <span class="hljs-string">&quot;Content-Type:application/json&quot;</span> -H <span class="hljs-string">&quot;charset:utf-8&quot;</span> <span class="hljs-variable">$url</span> -d <span class="hljs-string">&quot;</span><br><span class="hljs-string"> &#123;</span><br><span class="hljs-string"> \&quot;msgtype\&quot;: \&quot;text\&quot;, </span><br><span class="hljs-string"> \&quot;text\&quot;: &#123;</span><br><span class="hljs-string">  \&quot;content\&quot;: \&quot; <span class="hljs-variable">$1</span>\n 主机名称：<span class="hljs-variable">$2</span>\n 主机 IP：<span class="hljs-variable">$3</span>\n 登录用户：<span class="hljs-variable">$4</span>\n 登录 IP：<span class="hljs-variable">$5</span>\n IP 归属地：<span class="hljs-variable">$6</span>\n 登录时间：<span class="hljs-variable">$7</span> \&quot;</span><br><span class="hljs-string"> &#125;</span><br><span class="hljs-string">  &#125;&quot;</span>`<br><span class="hljs-comment">#显示推送结果</span><br><span class="hljs-comment"># echo $res</span><br>&#125;<br>body=<span class="hljs-string">&quot;服务器 SSH 登录提示&quot;</span><br><span class="hljs-comment">#SendMessageToDingding $subject $body</span><br><span class="hljs-comment">#调用函数</span><br>SendMessageToDingding <span class="hljs-variable">$body</span> <span class="hljs-variable">$name</span> <span class="hljs-variable">$ip</span> <span class="hljs-variable">$user</span> <span class="hljs-variable">$_ip</span> <span class="hljs-variable">$addr</span> <span class="hljs-variable">$_time</span><br></code></pre></td></tr></table></figure><p>这个其实在很多公司里面还是很常见的需求，当服务器被登录的时候，给运维人员或者管理人员发消息，当然，不止于钉钉，也可以是邮箱，或者一些自己公司内部的接口，通信软件等等。</p><blockquote><p>弄这个的时候发现一个 zshrc 的小问题</p><p>当我把脚本放在<code>~/.zshrc</code>里面执行的时候会报一个<code>no matches found:</code>的错误，解决办法是</p><p>在执行脚本之前添加<code>setopt no_nomatch</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github action 自动部署 hexo</title>
    <link href="/posts/1fbf14ad.html"/>
    <url>/posts/1fbf14ad.html</url>
    
    <content type="html"><![CDATA[<p>githuab 出 action 功能已经很久了，但是我一般写代码都不写测试用例，一直也就没用上，最近一段时间天天写博客，每次发表都要分别更新 blog 源码仓库和 github page 仓库源码。用上 github action，只要 push 到 blog 源码仓库，就会触发 action 中的 push 钩子更新 github page 仓库。</p><span id="more"></span><h2 id="ssh-密钥"><a href="#ssh-密钥" class="headerlink" title="ssh 密钥"></a>ssh 密钥</h2><p>我其实已经有 ssh 密钥了，我还是另外生成一个专门做 hexo action 的 ssh 密钥，谁知道 github 哪天会被黑客获取了私有信息。</p><p>生成 ssh 密钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C <span class="hljs-string">&quot;xxxx@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><p>运行后需要输入两次相同的密码，如果不想输入，直接回车就行。我把私钥的名字命名为<code>id_rsa_x</code>，公钥就是<code>id_rsa_x.pub</code>。私钥我们设置在 blog 源码仓库，公钥设置到 github page 仓库。下面我们就一步一步来设置 github。</p><h2 id="配置-blog-仓库"><a href="#配置-blog-仓库" class="headerlink" title="配置 blog 仓库"></a>配置 blog 仓库</h2><p>在 blog 仓库的<code>Settings-&gt;Sectrets</code>页面找到<code>New resposity secret</code>按钮，点击后，把<code>~/.ssh/id_rsa_x</code>的所有内容都贴到里面去，命名为<code>HEXO_DEPLOY_PRIVATE_KEY</code>报错即可。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210310211857.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210310211857"></p><p>接下来在与<code>Settings</code>同一栏的<code>Actions</code>中编辑一个 action。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210310212911.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210310212911"></p><p>点击<code>set up a workflow yourself</code>，把下面的内容贴进去，把<code>&lt;你的用户名&gt;</code>和<code>&lt;你登录的 email&gt;</code>都改成对应的值（不包含<code>&lt;&gt;</code>），保存即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># workflow name</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI</span><br><br><span class="hljs-comment"># master branch on push, auto run</span><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br>      <br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span> <br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <br>        <br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># check it to your workflow can access it</span><br>    <span class="hljs-comment"># from: https://github.com/actions/checkout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span> <span class="hljs-string">master</span> <span class="hljs-string">branch</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@master</span> <br>      <br>    <span class="hljs-comment"># from: https://github.com/actions/setup-node  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">12.</span><span class="hljs-string">x</span> <br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;12.x&quot;</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install hexo-cli -g</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string"></span>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Private</span> <span class="hljs-string">Key</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa </span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string"></span>        <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span> <span class="hljs-string">Infomation</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">| </span><br><span class="hljs-string">        git config --global user.name &#x27;&lt;你的用户名&gt;&#x27; </span><br><span class="hljs-string">        git config --global user.email &#x27;&lt;你登录的 email&gt;&#x27;</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span> <br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo generate </span><br><span class="hljs-string">        hexo deploy</span><br></code></pre></td></tr></table></figure><p>这样就配置好了。</p><h2 id="配置-github-page"><a href="#配置-github-page" class="headerlink" title="配置 github page"></a>配置 github page</h2><p>在 github page 仓库的<code>Settings-&gt;Deploy keys</code>页面点击<code>Add deploy key</code>按钮</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210310213542.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210310213542"></p><p>把之前生成的<code>~/.ssh/id_rsa_x.pub</code>的内容填到里面去，记得把<code>Allow write access</code>的小勾点上。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210310213828.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210310213828"></p><p>这样就设置好所有的配置，赶快去发表一篇博客看看，不用再执行<code>hexo clean; hexo g -d</code>，action 也能帮你发布博客。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/qq_41426117/article/details/108703295">GitHub Action + Hexo 实现在线写作</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计短链接生成服务</title>
    <link href="/posts/372bc467.html"/>
    <url>/posts/372bc467.html</url>
    
    <content type="html"><![CDATA[<p>很久之前就一直想做一个短链接生成服务，但一直没有短域名和机会，只好把之前设计的思路记录下来。</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>很多在做互联网推广都会使用发短信的方式，而短信服务提供商又对短信内容限制长度，这时候就要把长链接转为短链接。当然也有其他的方式，大厂如淘宝，有自己的 app，又被腾讯限制在微信推广的情况下，它们会用特殊处理过的文字在微信推广，用户复制内容到剪贴板再打开淘宝的 app，app 就读取剪贴板的内容识别正确的商品。</p><p>下面就用时序图的方式设计一个把长链接转为短连接，已经使用短链接跳转到正确的长链接。</p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><pre><code class=" mermaid">sequenceDiagram    participant 浏览器    participant 服务器    participant 数据库    Note right of 服务器: http://sort.cn    浏览器-&gt;&gt;服务器: 输入长链接    Note right of 浏览器: http://www.baidu.com/xxxxxx    服务器-&gt;&gt;数据库: 获取一个唯一 id    Note right of 服务器: xB4daqe    数据库--&gt;&gt;服务器: 返回一个唯一 id    服务器-&gt;&gt;服务器: 生成短连接    Note right of 服务器: http://sort.cn/xB4daqe    服务器--&gt;&gt;浏览器: 返回短连接    浏览器-&gt;&gt;服务器: 访问 http://sort.cn/xB4daqe    服务器-&gt;&gt;服务器: 解析获取 id    Note right of 服务器: xB4daqe    服务器-&gt;&gt;数据库: 检查 id    数据库--&gt;&gt;服务器: 返回长链接    Note right of 服务器: http://www.baidu.com/xxxxxx    服务器--&gt;&gt;浏览器: 重定向    Note right of 浏览器: http://www.baidu.com/xxxxxx</code></pre>]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从 NanoPi M2 中编译 wifi 模块中学习内核编译</title>
    <link href="/posts/72caef28.html"/>
    <url>/posts/72caef28.html</url>
    
    <content type="html"><![CDATA[<p>朋友送的 NanoPi M2 经过上次的折腾，算是能正常开机了，但是 NanoPi M2 自己是没有 wifi 模块的，我于是祭出了自己在 pc 上用的 <a href="https://www.tenda.com.cn/product/U12.html">腾达 U12</a> 和开源的 <a href="https://github.com/gnab/rtl8812au">rtl8812AU</a> 驱动，想让 NanoPi M2 支持我这仅有的 usb wifi。于是又开始了我作死的折腾之旅。</p><span id="more"></span><p>NanoPi M2 性能堪忧，而且 ssh 连接会突然假死，我没办法在真机上直接编译模块。虽然后来我找到 <a href="https://www.vpsee.com/2013/08/how-to-kill-an-unresponsive-ssh-connection/">资料</a>，可以使用<code>~.</code>使得卡死的 ssh 终端复活，ssh 经常卡死找不到原因，我还是使用了交叉编译。</p><p>NanoPi M2 并不在 <a href="https://github.com/gnab/rtl8812au">rtl8812AU</a> 的配置中，幸亏在 github 上找到一个 NanoPi Neo 的交叉编译模块的 <a href="https://github.com/makserge/webradio/blob/d39d2f96c29628385a71658f30b523eabb793c6e/backend-nanopi-neo/rtl8812au/build.txt">教程</a>，结合 <a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M2/zh">NanoPi M2 wiki</a>，完成了模块编译。</p><h2 id="交叉编译器"><a href="#交叉编译器" class="headerlink" title="交叉编译器"></a>交叉编译器</h2><p>万万没想到，编译一个内核模块是需要内核源码支持的，而为了编译内核源码，还要 uboot 的支持，而为了能正常编译前面这两个，还要准备交叉编译环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/prebuilts.git -b master --depth 1<br><span class="hljs-built_in">cd</span> prebuilts/gcc-x64<br><span class="hljs-built_in">cat</span> toolchain-4.9.3-armhf.tar.gz* | <span class="hljs-built_in">sudo</span> tar xz -C /<br></code></pre></td></tr></table></figure><p>安装好的交叉编译器在<code>/opt/FriendlyARM/toolchain/4.9.3/bin</code>，所以删除的话，直接<code>sudo rm -rf /opt/FriendlyARM</code>，为了使其生效，还需要把路径加到<code>PATH</code>中，我使用的是 zsh，所以是在<code>~/.zshrc</code>的末尾添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=/opt/FriendlyARM/toolchain/4.9.3/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> GCC_COLORS=auto<br></code></pre></td></tr></table></figure><p>执行一下<code>~/.zshrc</code>脚本让设置立即在当前 shell 窗口中生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">. ~/.zshrc<br></code></pre></td></tr></table></figure><p>检查一下是否已经生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">arm-linux-gcc -v<br></code></pre></td></tr></table></figure><h2 id="编译-uboot"><a href="#编译-uboot" class="headerlink" title="编译 uboot"></a>编译 uboot</h2><p>下载 U-Boot 源代码并编译，NanoPi M2 使用的是<code>nanopi2-lollipop-mr1</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/uboot_nanopi2.git<br><span class="hljs-built_in">cd</span> uboot_nanopi2<br>git checkout nanopi2-lollipop-mr1<br><span class="hljs-comment"># 上面的命令也能写成</span><br><span class="hljs-comment"># git clone https://gitee.com/friendlyelec/prebuilts.git -b nanopi2-lollipop-mr1 --depth 1</span><br>make s5p4418_nanopi2_config<br>make CROSS_COMPILE=arm-linux-<br></code></pre></td></tr></table></figure><p>做了这么多，其实只是需要<code>U-Boot</code>中的工具<code>mkimage</code>，wiki 上说可以使用<code>sudo apt-get install u-boot-tools</code>来安装，但是我还是乖乖自己编译吧</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> uboot_nanopi2<br>make CROSS_COMPILE=arm-linux- tools<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /usr/local/sbin &amp;&amp; <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -v tools/mkimage /usr/local/sbin<br></code></pre></td></tr></table></figure><p>emmmm，所以想删除的话可以运行<code>sudo rm /usr/local/sbin</code></p><h2 id="编译-Linux-kernel"><a href="#编译-Linux-kernel" class="headerlink" title="编译 Linux kernel"></a>编译 Linux kernel</h2><p>搞了这么多，终于可以编译内核了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">it <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/linux-3.4.y.git<br><span class="hljs-built_in">cd</span> linux-3.4.y<br>git checkout nanopi2-lollipop-mr1<br><span class="hljs-comment"># 同样可以使用下面的代码代替</span><br><span class="hljs-comment"># git clone https://github.com/friendlyarm/linux-3.4.y.git -b nanopi2-lollipop-mr1 --depth 1</span><br></code></pre></td></tr></table></figure><p>编译 Ubuntu Core 内核</p><p>LCD 输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make nanopi2_core-qt_defconfig<br></code></pre></td></tr></table></figure><p>HDMI 输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make nanopi2_core-qt_hdmi_defconfig<br></code></pre></td></tr></table></figure><p>选择自己需要的内核配置后，使用以下命令即可编译生成 uImage。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> .scmversion<br>make uImage<br></code></pre></td></tr></table></figure><h2 id="编译内核模块"><a href="#编译内核模块" class="headerlink" title="编译内核模块"></a>编译内核模块</h2><p>终于，到编译<code>rtl8812AU</code>的时候了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/gnab/rtl8812au.git<br><span class="hljs-built_in">cd</span> rtl8812au<br>make KSRC=/home/bubao/Workspaces/linux/linux-3.4.y \<br>     CROSS_COMPILE=arm-linux- \<br>     ARCH=arm<br></code></pre></td></tr></table></figure><p>编译后生成<code>8812au.ko</code>，检查一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">file 8812au.ko<br>8812au.ko: ELF 32-bit LSB relocatable, ARM, EABI5 version 1 (SYSV), BuildID[sha1]=a93331169d61966a05bfb2830cd65f5faa1b744e, with debug_info, not stripped<br></code></pre></td></tr></table></figure><p>把模块发到 pi 上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp 8812au.ko pi@192.168.1.11:/home/pi/<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /home/pi/8812au.ko /lib/modules/3.4.39-s5p4418/kernel/drivers/net/wireless/8812au.ko<br><span class="hljs-built_in">sudo</span> depmod<br><span class="hljs-built_in">sudo</span> insmod /lib/modules/3.4.39-s5p4418/kernel/drivers/net/wireless/8812au.ko<br></code></pre></td></tr></table></figure><p>报错了？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">insmod: ERROR: could not insert module 8812au.ko: Unknown symbol in module<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ dmesg | <span class="hljs-built_in">tail</span> -n 19<br>[    9.408000] Bluetooth: HCI UART driver ver 2.3<br>[    9.416000] Bluetooth: HCI UART protocol H4 registered<br>[    9.424000] Bluetooth: HCI UART protocol BCM registered<br>[    9.436000] Bluetooth: BNEP (Ethernet Emulation) ver 1.3<br>[    9.444000] Bluetooth: BNEP filters: protocol multicast<br>[    9.452000] Bluetooth: BNEP socket layer initialized<br>[    9.472000] setting PHY_BASEADDR_POWER_GATE, <span class="hljs-built_in">set</span> 1<br>[    9.480000] setting PHY_BASEADDR_PMU_ISOLATE+4, <span class="hljs-built_in">set</span> 0<br>[    9.488000] setting PHY_BASEADDR_PMU_ISOLATE+8, <span class="hljs-built_in">set</span> 0<br>[    9.496000] setting PHY_BASEADDR_PMU_ISOLATE, <span class="hljs-built_in">set</span> 1<br>[    9.504000] <span class="hljs-built_in">read</span> PHY_BASEADDR_PMU_ISOLATE + 0xC<br>[    9.512000] Wait Power UP Ack(powerUpAck=0x00000000)<br>[    9.520000] setting ClockGen, <span class="hljs-built_in">set</span> 1<br>[    9.528000] setting Reset VR addr(0xf0012008)<br>[    9.536000] setting PHY_BASEADDR_VR_PMU addr(0xf0072000)<br>[    9.544000] Vr: VR device driver loaded(ver1.2) <span class="hljs-keyword">for</span> s5p4418<br>[   11.208000] eth0: device MAC address 9a:63:b3:25:10:7e<br>[   14.988000] PHY: stmmac-0:07 - Link is Up - 1000/Full<br>[ 4336.044000] 8812au: Unknown symbol kernel_write (err 0)<br></code></pre></td></tr></table></figure><p>查看一下，果然还是没加载上来呢</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$lsmod</span><br>Module                  Size  Used by<br>nx_vpu                351383  0<br>vr                    142655  0<br>bnep                   11245  0<br>hci_uart               14744  0<br>btbcm                   5120  1 hci_uart<br>bluetooth             385422  3 bnep,btbcm,hci_uart<br>cfg80211              459462  0<br>compat                 23995  4 bnep,cfg80211,hci_uart,bluetooth<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ modinfo 8812au.ko <br>filename:       /home/pi/8812au.ko<br>version:        v4.2.3<br>author:         Realtek Semiconductor Corp.<br>description:    Realtek Wireless Lan Driver<br>license:        GPL<br>srcversion:     A0769B96B082C1E7D80256F<br><span class="hljs-built_in">alias</span>:          usb:v2357p0120d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p011Ed*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp0823d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v3823p6249d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p3318d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDApA811d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v04BBp0959d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v04BBp0953d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v056Ep4007d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0411p029Bd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0411p0242d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2019pAB32d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0846p9052d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p3314d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v7392pA813d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v7392pA812d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v7392pA811d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp8822d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp0821d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp0811d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2604p0012d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp8812d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0411p025Dd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p0122d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p010Ed*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p010Dd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p0103d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2357p0101d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v20F4p805Bd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p3316d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p3315d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v07B8p8812d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2019pAB30d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v1740p0100d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v13B1p003Fd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v1058p0632d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p3313d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0586p3426d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0E66p0022d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0B05p17D2d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0409p0408d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0789p016Ed*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v04BBp0952d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0DF6p0074d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v7392pA822d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2001p330Ed*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v050Dp1109d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v2604p0012d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v050Dp1106d*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp881Cd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp881Bd*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp881Ad*dc*dsc*dp*ic*isc*ip*<br><span class="hljs-built_in">alias</span>:          usb:v0BDAp8812d*dc*dsc*dp*ic*isc*ip*<br>depends:        <br>vermagic:       3.4.39-s5p4418 SMP preempt mod_unload ARMv7 p2v8 <br>parm:           rtw_ips_mode:The default IPS mode (int)<br>parm:           rtw_regulatory_id:int<br>parm:           ifname:The default name to allocate <span class="hljs-keyword">for</span> first interface (charp)<br>parm:           if2name:The default name to allocate <span class="hljs-keyword">for</span> second interface (charp)<br>parm:           rtw_initmac:charp<br>parm:           rtw_channel_plan:int<br>parm:           rtw_chip_version:int<br>parm:           rtw_rfintfs:int<br>parm:           rtw_lbkmode:int<br>parm:           rtw_network_mode:int<br>parm:           rtw_channel:int<br>parm:           rtw_mp_mode:int<br>parm:           rtw_wmm_enable:int<br>parm:           rtw_vrtl_carrier_sense:int<br>parm:           rtw_vcs_type:int<br>parm:           rtw_busy_thresh:int<br>parm:           rtw_ht_enable:int<br>parm:           rtw_bw_mode:int<br>parm:           rtw_ampdu_enable:int<br>parm:           rtw_rx_stbc:int<br>parm:           rtw_ampdu_amsdu:int<br>parm:           rtw_vht_enable:int<br>parm:           rtw_lowrate_two_xmit:int<br>parm:           rtw_rf_config:int<br>parm:           rtw_power_mgnt:int<br>parm:           rtw_smart_ps:int<br>parm:           rtw_low_power:int<br>parm:           rtw_wifi_spec:int<br>parm:           rtw_antdiv_cfg:int<br>parm:           rtw_antdiv_type:int<br>parm:           rtw_enusbss:int<br>parm:           rtw_hwpdn_mode:int<br>parm:           rtw_hwpwrp_detect:int<br>parm:           rtw_hw_wps_pbc:int<br>parm:           rtw_max_roaming_times:The max roaming <span class="hljs-built_in">times</span> to try (uint)<br>parm:           rtw_mc2u_disable:int<br>parm:           rtw_80211d:Enable 802.11d mechanism (int)<br>parm:           rtw_notch_filter:0:Disable, 1:Enable, 2:Enable only <span class="hljs-keyword">for</span> P2P (uint)<br>parm:           rtw_led_enable:Enable status LED (int)<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然最后没能在<code>NanoPi M2</code>上成功驱动腾达 U12，但是还是学会很多东西的。</p><h2 id="参考-资料"><a href="#参考-资料" class="headerlink" title="参考 &amp; 资料"></a>参考 &amp; 资料</h2><ul><li><a href="https://github.com/gnab/rtl8812au">gnab&#x2F;rtl8812au</a></li><li><a href="https://github.com/makserge/webradio/blob/d39d2f96c29628385a71658f30b523eabb793c6e/backend-nanopi-neo/rtl8812au/build.txt">backend-nanopi-neo&#x2F;rtl8812au&#x2F;build.txt</a></li><li><a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M2/zh">NanoPi M2 wiki</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>编译</tag>
      
      <tag>pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动编译 NanoPi debian 系统</title>
    <link href="/posts/d9c40f77.html"/>
    <url>/posts/d9c40f77.html</url>
    
    <content type="html"><![CDATA[<p>几年前一个做电气的网友送我一块 <strong>NanoPi M2</strong> 的板子，不过安装系统各种启动不成功，后来因为自己又买了树莓派 3B+，所以也就一直没用起来。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210306090005.jpg" alt="NanoPi_M2-2"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210306090030.png" alt="NanoPi-M2-1602-if01"></p><p>最近闲来无事，想再挑战一次 <strong>NanoPi M2</strong> 的系统，但是由于官方 wiki 描述和镜像文件有差异，所以我还是选择了编译系统，想不到就让我编译成功了。<del>因为手上没有 sd 卡，还没测试编译出来的系统，但能编译成功已经算是有进步了。</del></p><h2 id="交叉编译环境"><a href="#交叉编译环境" class="headerlink" title="交叉编译环境"></a>交叉编译环境</h2><p>获取友善之臂的官方交叉编译器，并解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/prebuilts.git -b master --depth 1<br><span class="hljs-built_in">cd</span> prebuilts/gcc-x64<br><span class="hljs-built_in">cat</span> toolchain-4.9.3-armhf.tar.gz* | <span class="hljs-built_in">sudo</span> tar xz -C /<br></code></pre></td></tr></table></figure><p>将编译器的路几个加入到 PATH 中，把下面的内容复制到你当前的<code>~/.zshrc</code>或者<code>~/.bashrc</code>最底下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/opt/FriendlyARM/toolchain/4.9.3/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> GCC_COLORS=auto<br></code></pre></td></tr></table></figure><p>执行脚本，让设置在当前的 shell 窗口生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 如果使用的是 bash 环境</span><br>. ~/.bashrc<br><span class="hljs-comment">## 如果使用的是 zsh 环境</span><br>. ~/.zshrc<br></code></pre></td></tr></table></figure><p>安装完成后，检查一下是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">arm-linux-gcc -v<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210306085857.png" alt="NanoPi_M2_1512B_Dimensions"></p><h2 id="编译镜像"><a href="#编译镜像" class="headerlink" title="编译镜像"></a>编译镜像</h2><p>我并没有从头开始编译内核和文件系统，而是使用官方已经编译好的镜像，然后再通过 <a href="https://github.com/friendlyarm/sd-fuse_s5p4418/tree/master-for-linux-3.4.y">sd-fuse_s5p4418</a> 生成镜像文件。我特定去看了 issues，<a href="https://github.com/friendlyarm/sd-fuse_s5p4418/issues/3">用于 NanoPi2 的系统镜像无法启动</a>，选择了<code>master-for-linux-3.4.y</code>，虽然我并不知道我的 M2 算不算所谓的“旧版本”。</p><p>先获取代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/sd-fuse_s5p4418.git<br><span class="hljs-built_in">cd</span> sd-fuse_s5p4418<br>git checkout master-for-linux-3.4.y<br></code></pre></td></tr></table></figure><p>在<code>master-for-linux-3.4.y</code>分支中，只要两个<code>sh</code>文件，看了 README 的描述，我需要的是编译出镜像文件，等以后有 sd 卡再想办法装进去，那我需要的就是<code>mkimage.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./mkimage.sh debian<br></code></pre></td></tr></table></figure><p>当我运行这条命令的时候，发现它需要在本地有编译好的内核镜像，我还是先手动下载吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">aria2c -c -j5 -x10 -s4 http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/images-for-eflasher/debian-jessie-images.tgz<br>tar xvzf debian-jessie-images.tgz<br><span class="hljs-built_in">sudo</span> ./mkimage.sh debian<br></code></pre></td></tr></table></figure><p>编译完成后，会在当前项目的根目录下生成一个<code>s5p4418-debian-sd4g-YYYYMMDD.img</code>的镜像文件，但是文件的所有者和权限都没办法用完当前的用户操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -al s5p4418-debian-sd4g-20210306.img<br>-rw-r--r-- 1 root  root  3899999232  3 月  6 07:13 s5p4418-debian-sd4g-20210306.img<br></code></pre></td></tr></table></figure><p>改一下权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> bubao:<span class="hljs-built_in">users</span> s5p4418-debian-sd4g-20210306.img<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 755 s5p4418-debian-sd4g-20210306.img<br></code></pre></td></tr></table></figure><p>这就算大功告成了</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我使用 <a href="https://github.com/balena-io/etcher">balena-etcher</a> 安装到 sd 卡，另外如果想生成<code>qte-core</code>可以使用 <a href="http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/images-for-eflasher/core-qte-images.tgz">http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/images-for-eflasher/core-qte-images.tgz</a> 替换 <a href="http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/images-for-eflasher/debian-jessie-images.tgz">http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/images-for-eflasher/debian-jessie-images.tgz</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M2/zh">NanoPi M2&#x2F;zh</a></p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="http://112.124.9.243/dvdfiles/S5P4418/kernel-3.4-roms/">S5P4418 镜像服务器</a></li><li><a href="https://github.com/friendlyarm/prebuilts">交叉编译器</a></li><li><a href="https://github.com/friendlyarm/sd-fuse_s5p4418/tree/master-for-linux-3.4.y">sd-fuse_s5p4418 旧版本</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>编译</tag>
      
      <tag>pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机网易云音乐缓存文件生成 mp3 文件</title>
    <link href="/posts/bcb27770.html"/>
    <url>/posts/bcb27770.html</url>
    
    <content type="html"><![CDATA[<p>一直使用 Linux 工作、娱乐，因为 Linux 上的网易云音乐缓存在<code>~/.cache/netease-cloud-music/CachedSongs</code>下。直接保存为 mp3 格式的。所以想下载一些会员才能下载的音乐，直接在网易云上听一遍，到缓存的位置找出来就行了。</p><span id="more"></span><p>最近表弟问我有没有网易云音乐的会员，我就在手机上找出网易云音乐的缓存文件，手动改了一个文件的后缀成<code>mp3</code>, 好家伙，手机上的网易云音乐缓存竟然是加密的。emmm，开始 hack 网易云音乐缓存文件。</p><h2 id="解密缓存文件"><a href="#解密缓存文件" class="headerlink" title="解密缓存文件"></a>解密缓存文件</h2><p>安卓手机上的缓存文件在<code>netease/cloudmusic/Cache/Music1</code>里</p><p>缓存文件分为两种，一种是<code>.idx!</code>，可以用文本编辑器直接打开，包含歌曲的<code>id</code>信息；另一种是<code>.uc!</code>，根据文件大小判断，很大可能是歌曲文件。</p><p>直接修改<code>.uc!</code>文件后缀为<code>.mp3</code>是没办法播放的，很多想从缓存文件中得到可播放文件的人已经不抱希望了。但是作为一个程序员，还是很希望知道怎么实现的。</p><p>上网找一圈，终于知道可以通过按位异或<code>0xa3</code>得到的可播放文件。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[从网易云音乐缓存文件得到 MP3](https://www.jianshu.com/p/5fb2bcaa79f8?utm_campaign)">[1]</span></a></sup></p><p>另外直到现在才知道异或运输在二进制中是可逆运算。 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[关于异或的可逆运算？](https://www.zhihu.com/question/28693672)">[2]</span></a></sup></p><p>网上有 java 和 python 的代码，但是没有 nodejs 的，于是自己动手写一个 <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[提取网易云音乐的音频缓存（含 Python 脚本）](https://aomnisz.github.io/KnowledgeBase/#/Weiming/%E6%8F%90%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%BC%93%E5%AD%98)">[3]</span></a></sup></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;./1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3.uc!&quot;</span>,<span class="hljs-function">(<span class="hljs-params">error, data</span>) =&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">const</span> mp3 = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value^<span class="hljs-number">0xA3</span>);<br>    fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;./1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3&quot;</span>, mp3,<span class="hljs-function">()=&gt;</span>&#123;&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>bingo，mp3 文件拿到了</p><h2 id="获取歌曲信息"><a href="#获取歌曲信息" class="headerlink" title="获取歌曲信息"></a>获取歌曲信息</h2><p>网易云缓存文件的命名实在是太奇怪了，一开始我还以为就是随机<code>uuid</code>生成的命名，而<code>.idx!</code>文件的内容改变了我的想法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3.idx!</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">266301</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filesize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3247708</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;musicId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1498323856</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filemd5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a1ccabb838649c9a8cc96ae5bd249a5e&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;parts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;0,3247708&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bitrate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">96024</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;md5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4fbe5cc8a05fd998b560f342c86f6ec7&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>文件名被两个横杆<code>-</code>分为三段：</p><ol><li>musicId: 音乐的 id</li><li>bitrate: 比特率</li><li>filemd5: <code>uc!</code>文件的 md5</li></ol><p>我用上面的代码生成 mp3 文件后，生成 md5:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ md5 1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3.uc\! 1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3<br><br>A59B5C6B81B2FA2FCBA40CD256566B32  1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3.uc!<br>A1CCABB838649C9A8CC96AE5BD249A5E  1498323856-96024-a1ccabb838649c9a8cc96ae5bd249a5e.mp3<br></code></pre></td></tr></table></figure><p>本来还想从<code>.idx!</code>文件中回去人性化的文件名来着，看来这是没办法了。</p><p>我记得以前用 windows 的时候，有一些音乐文件是能看到图片的，而且属性里面还要很多信息。于是找一下怎么获取里面的数据。</p><p>原来 mp3 文件有<code>metadata</code>，标签里面包含歌曲的歌手，歌曲图片，歌曲专辑等等信息。<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[MP3 wikipedia](https://zh.wikipedia.org/wiki/MP3)">[4]</span></a></sup></p><p>找了一个现成的包，写了个 demo，才发现缓存文件里没有<code>metadata</code>，但是代码对正常下载的网易云音乐文件还是能获取到信息的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// npm i node-id3</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NodeID3</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-id3&#x27;</span>);<br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">const</span> tags = <span class="hljs-title class_">NodeID3</span>.<span class="hljs-title function_">read</span>(<span class="hljs-string">&quot;./3.mp3&quot;</span>);<br></code></pre></td></tr></table></figure><p>从文件获取<code>id3</code>数据想法破灭了，那只能通过 api 来获取相关信息了：<a href="https://api.imjad.cn/cloudmusic/?type=detail&id=1498323856">https://api.imjad.cn/cloudmusic/?type=detail&id=1498323856</a></p><p>也可以自己用 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">Binaryify&#x2F;NeteaseCloudMusicApi</a> 搭建一个 API。</p><h2 id="nodejs-写一个脚本"><a href="#nodejs-写一个脚本" class="headerlink" title="nodejs 写一个脚本"></a>nodejs 写一个脚本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 本地网易云音乐缓存文件 uc! 转 mp3</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bubao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021-03-04 05:58:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@last</span> author: bubao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@last</span> edit time: 2021-03-06 19:19:02</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">let</span> [,,input,output] = process.<span class="hljs-property">argv</span>;<br><br><span class="hljs-keyword">if</span> (!output) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;node insdex.js inputDirectory outputDirectory&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> stats = fs.<span class="hljs-title function_">statSync</span>(input);<br>    <span class="hljs-keyword">if</span>(!stats.<span class="hljs-title function_">isDirectory</span>()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> dir = fs.<span class="hljs-title function_">readdirSync</span>(input).<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> path.<span class="hljs-title function_">extname</span>(value) === <span class="hljs-string">&quot;.uc!&quot;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>    fs.<span class="hljs-title function_">mkdirSync</span>(output);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123; &#125;<br><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(dir) &amp;&amp; <span class="hljs-title function_">main</span>(dir);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">dir</span>) &#123;<br>    <span class="hljs-keyword">const</span> filename = path.<span class="hljs-title function_">join</span>(input, dir.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]);<br>    fs.<span class="hljs-title function_">readFile</span>(filename, <span class="hljs-function">(<span class="hljs-params">error, data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">const</span> mp3 = data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">buffer</span> =&gt;</span> buffer ^ <span class="hljs-number">0xA3</span>);<br>        <span class="hljs-keyword">const</span> dlname = path.<span class="hljs-title function_">join</span>(output, path.<span class="hljs-title function_">basename</span>(filename, path.<span class="hljs-title function_">extname</span>(filename)));<br>        fs.<span class="hljs-title function_">writeFile</span>(dlname, mp3, <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dir.<span class="hljs-property">length</span>);<br>            dir.<span class="hljs-property">length</span> &amp;&amp; <span class="hljs-title function_">main</span>(dir);<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用-go-写一个脚本工具"><a href="#用-go-写一个脚本工具" class="headerlink" title="用 go 写一个脚本工具"></a>用 go 写一个脚本工具</h2><p>用我蹩脚的 go 写一个工具</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @description:</span><br><span class="hljs-comment"> * @author: bubao</span><br><span class="hljs-comment"> * @date: 2021-03-14 17:53:48</span><br><span class="hljs-comment"> * @last author: bubao</span><br><span class="hljs-comment"> * @last edit time: 2021-03-17 18:30:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;flag&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io/ioutil&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;path&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">uc2mp3</span><span class="hljs-params">(ucFilename <span class="hljs-type">string</span>, mp3Filename <span class="hljs-type">string</span>)</span></span> &#123;<br><br>    buf, err := ioutil.ReadFile(ucFilename)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;File Error: %s\n&quot;</span>, err)<br>    &#125;<br>    arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint8</span>, <span class="hljs-built_in">len</span>(buf))<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> buf &#123;<br>        arr[i] = v ^ <span class="hljs-number">0xA3</span><br>    &#125;<br>    err = ioutil.WriteFile(mp3Filename, arr, <span class="hljs-number">0644</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err.Error())<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> dirName <span class="hljs-type">string</span><br>    <span class="hljs-keyword">var</span> outputDir <span class="hljs-type">string</span><br>    <span class="hljs-keyword">var</span> inputFilename <span class="hljs-type">string</span><br>    <span class="hljs-keyword">var</span> rename <span class="hljs-type">string</span><br>    flag.StringVar(&amp;dirName, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;输入文件夹&quot;</span>)<br>    flag.StringVar(&amp;outputDir, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;输出文件夹&quot;</span>)<br>    flag.StringVar(&amp;inputFilename, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;uc! 文件&quot;</span>)<br>    flag.StringVar(&amp;rename, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;mp3 重命名&quot;</span>)<br>    flag.Parse()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag.Args()) &lt; <span class="hljs-number">1</span> &#123;<br>        flag.Usage()<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> ext <span class="hljs-type">string</span> = <span class="hljs-string">&quot;.uc!&quot;</span><br><br>    <span class="hljs-keyword">if</span> inputFilename == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; dirName != <span class="hljs-string">&quot;&quot;</span> &#123;<br>        stat, err := os.Stat(dirName)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;File Error: %s\n&quot;</span>, err)<br>            <span class="hljs-built_in">panic</span>(err.Error())<br>        &#125;<br>        <span class="hljs-keyword">if</span> stat.IsDir() &#123;<br>            dir, err := ioutil.ReadDir(dirName)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;File Error: %s\n&quot;</span>, err)<br>                <span class="hljs-built_in">panic</span>(err.Error())<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> _, info := <span class="hljs-keyword">range</span> dir &#123;<br>                filename := info.Name()<br><br>                <span class="hljs-keyword">if</span> !info.IsDir() &amp;&amp; path.Ext(filename) == ext &#123;<br>                    <span class="hljs-keyword">var</span> outputFile <span class="hljs-type">string</span><br>                    outputFile = strings.TrimSuffix(path.Base(filename), ext)<br>                    uc2mp3(path.Join(dirName, filename), path.Join(outputDir, outputFile))<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> inputFilename != <span class="hljs-string">&quot;&quot;</span> &#123;<br>        <span class="hljs-keyword">if</span> path.Ext(inputFilename) == ext &#123;<br>            <span class="hljs-keyword">var</span> outputFile <span class="hljs-type">string</span><br>            <span class="hljs-keyword">if</span> rename != <span class="hljs-string">&quot;&quot;</span> &#123;<br>                outputFile = rename<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                outputFile = strings.TrimSuffix(path.Base(inputFilename), ext)<br>            &#125;<br>            uc2mp3(inputFilename, path.Join(outputFile))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用也很简单</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">uc2mp3 -h<br>Usage of uc2mp3:<br>  -d string<br>        输入文件夹<br>  -f string<br>        uc! 文件<br>  -o string<br>        输出文件夹<br>  -r string<br>        mp3 重命名<br><span class="hljs-comment"># 文件夹</span><br>uc2mp3 -d /home/bubao/Downloads/Jami/music1 -o /home/bubao/Downloads/Jami/music<br><br><span class="hljs-comment"># 单个文件</span><br>uc2mp3 -f /home/bubao/Downloads/Jami/music1/28136576-160000-14cca46fa243ecb590d3fcdf5e530cd1.mp3.uc\! -r <span class="hljs-string">&quot;xx.mp3&quot;</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/5fb2bcaa79f8?utm_campaign">从网易云音乐缓存文件得到 MP3</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.zhihu.com/question/28693672">关于异或的可逆运算？</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://aomnisz.github.io/KnowledgeBase/#/Weiming/%E6%8F%90%E5%8F%96%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%BC%93%E5%AD%98">提取网易云音乐的音频缓存（含 Python 脚本）</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zh.wikipedia.org/wiki/MP3">MP3 wikipedia</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux 实现动态 motd</title>
    <link href="/posts/daba6ec4.html"/>
    <url>/posts/daba6ec4.html</url>
    
    <content type="html"><![CDATA[<p>一直很好奇阿里云的 ubuntu 的 ssh 登录时出现的信息，但<code>/etc/motd</code>是空的。我自己以前实现的<code>motd</code>只有一个<code>figlet</code>生成的文字，更本就不是真正的<code>motd</code>。</p><span id="more"></span><p>花了一些时间上 github，百度，google 和 Archlinux wiki 找资料，终于搞明白大概的实现原理。</p><p>在 Archlinux 中，在用户登录<code>ssh</code>的时候，<code>sshd</code>里面的配置了<code>pam</code>，<code>pam</code>会调用了<code>motd</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/ssh/sshd_config<br>UsePAM yes<br>PrintMotd yes # pam does that<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/pam.d/system-login<br>session    optional   pam_motd.so          motd=/etc/motd<br></code></pre></td></tr></table></figure><p>但是这样只是调用了<code>motd</code>文件，实现不了动态，换个思路：</p><p>只要我们写一个脚本，在<code>pam</code>执行时，不是处理<code>/etc/motd</code>文件，而是遍历<code>/etc/update_motd.d/</code>下面的脚本，这时候就能实现动态展示了。</p><p>所以我们只要执行下面几个步骤就能实现动态<code>motd</code>:</p><ol><li>实现遍历<code>/etc/update_motd.d/</code>的脚本</li><li>修改<code>/etc/pam.d/system-login</code>执行<code>update-motd</code>脚本</li><li>编写<code>/etc/update_motd.d/</code>下的脚本</li></ol><h2 id="实现-update-motd"><a href="#实现-update-motd" class="headerlink" title="实现 update-motd"></a>实现 update-motd</h2><p>其实也很简单，就一行命令，但还是写成一个工具调用比较好</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim  /usr/bin/update-motd<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># /usr/bin/update-motd</span><br>run-parts --lsbsysinit /etc/update-motd.d<br></code></pre></td></tr></table></figure><p>编辑完后给这个文件执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/bin/update-motd<br></code></pre></td></tr></table></figure><h2 id="修改-pam-配置"><a href="#修改-pam-配置" class="headerlink" title="修改 pam 配置"></a>修改 pam 配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim /etc/pam.d/system-login<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+#----</span><br><span class="hljs-addition">+session    optional   pam_exec.so   stdout /usr/bin/update-motd</span><br>session    optional   pam_motd.so   motd=/etc/motd<br><span class="hljs-addition">+#----</span><br></code></pre></td></tr></table></figure><p>在原来的语句上面加上执行<code>/usr/bin/update-motd</code>的配置，这样修改<code>/etc/motd</code>也一样会生效。毕竟原来的系统就支持<code>/etc/motd</code>，如果直接在上面改，就和以前的操作不符了。</p><h2 id="实现-update-motd-d-脚本"><a href="#实现-update-motd-d-脚本" class="headerlink" title="实现 update-motd.d 脚本"></a>实现 update-motd.d 脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /etc/update-motd.d<br></code></pre></td></tr></table></figure><p>在里面实现脚本即可，我把脚本推到 github 上了，直接抄作业</p><p><a href="https://github.com/bubao/arch-nas-motd/tree/main/update-motd.d">https://github.com/bubao/arch-nas-motd/tree/main/update-motd.d</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210226060715.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210226060715"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/lfelipe1501/Arch-MOTD/wiki/Installation-Guide">lfelipe1501&#x2F;Arch-MOTD</a></li><li><a href="https://github.com/optio50/Color-in-your-scripts/blob/master/colortest">optio50&#x2F;Color-in-your-scripts</a></li><li><a href="https://github.com/d-Rickyy-b/motd-files">d-Rickyy-b&#x2F;motd-files</a></li><li><a href="https://github.com/RIKRUS/MOTD">RIKRUS&#x2F;MOTD</a></li><li><a href="https://github.com/dylanaraps/neofetch">dylanaraps&#x2F;neofetch</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动宽带开启 ipv6</title>
    <link href="/posts/b28c1dd5.html"/>
    <url>/posts/b28c1dd5.html</url>
    
    <content type="html"><![CDATA[<p>自从弄了 Nas 之后，就一直想搞一个公网 ip，但是众所周知，ipv4 的公网 ip 就只有这么多，互联网设备这么多，肯定是不够分的。今天群聊，得知移动宽带能 ipv6，瞬间感觉有希望了。但是前提是只有本机有 ipv6 才能连接。</p><span id="more"></span><p>在网上找了一圈，发现还有不少的教程，ipv6 贴吧里还看到电信也提供了。</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>一台内网服务器，我自己搭了一个 Nas。</li><li>移动光猫 GM219-S: 我就是这个型号的。且知道拨号帐号密码，要不然下面的操作可能会导致上不了网。</li><li>另一台 wifi，非必须，但是我的 Nas 就连在这台路由器上，顺便做个记录。</li><li>域名，因为 ipv6 每次拨号可能都不一样，域名相对好记。</li><li><a href="https://github.com/imki911/ArDNSPod.git">ArDNSPod</a>:  让腾讯云的 DNSPod 实现 ddns。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224200649.svg" alt="拓扑图"></p><h2 id="光猫设置"><a href="#光猫设置" class="headerlink" title="光猫设置"></a>光猫设置</h2><p>首先用超级管理员账号登录中国移动光猫 GM220-S 后台 <a href="http://192.168.1.1/">http://192.168.1.1</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[移动光猫 GM219-S](https://blog.littleghost.ml/posts/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABGM219-S/)">[1]</span></a></sup></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">用户名： CMCCAdmin<br>密 码： aDm8H%MdA<br></code></pre></td></tr></table></figure><p>进入后台后，依次进入<code>网络-Internet 连接-宽带设置</code>，逐个选中<code>连接名称</code>下拉框中的内容，截图备份，方便修改出错后恢复。</p><p>备份好后，在<code>连接名称</code>的下拉框中，可以看到有一个<code>_INTERNET_</code>开头的选项，选择该选项。</p><p>如果<code>IP 协议版本</code>不是<code>IPv4/v6</code>，则需要先删除<code>_INTERNET_</code>开头的选项，新建一个，照着以前的填，只是把<code>IP 协议版本</code>改成<code>IPv4/v6</code>。</p><p>改完后，到<code>管理-设备管理-设备重启</code>中重启光猫。 <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[中国移动 GM220-S 光猫修改为桥接模式并启用 IPV6](https://www.chenxie.net/archives/2307.html)">[2]</span></a></sup></p><h2 id="华为荣耀-pro2-路由设置"><a href="#华为荣耀-pro2-路由设置" class="headerlink" title="华为荣耀 pro2 路由设置"></a>华为荣耀 pro2 路由设置</h2><p>只需要把<code>我要上网</code>把上网模式改为<code>AP</code>就行。</p><p><code>AP</code>是网络中继，在这个模式下，所以连接这台路由器的设备，都讲视为直接连接在上级路由器上。</p><p>为什么要使用<code>AP</code>？还不是光猫不给下级路由器上的设备发<code>ipv6</code>么。</p><blockquote><p>如果是其他路由器，可以把 wlan 网线插到 lan 口，这时候路由器就成了交换机，就不需要设置<code>AP</code>了。</p><p>这招没试过，记录下来以后试试</p></blockquote><p>国际管理，重启路由器。等设备重新获取到网络，使用下面的命令就能查看到是否分配到<code>ipv6</code>了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ip addr show dev enp1s0 | sed -e<span class="hljs-string">&#x27;s/^.*inet6 \([^ ]*\)\/.*$/\1/;t;d&#x27;</span><br></code></pre></td></tr></table></figure><p>其中<code>enp1s0</code>是你的路由器设备。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[成都移动 IPV6 光猫设置教程](https://blog.csdn.net/qq237696047/article/details/87278536)">[3]</span></a></sup></p><h2 id="域名解析设置"><a href="#域名解析设置" class="headerlink" title="域名解析设置"></a>域名解析设置</h2><p>进入 <a href="https://console.cloud.tencent.com/cns">腾讯云的 DNSPod</a> 面板。参考 <a href="https://blog.csdn.net/Imkiimki/article/details/83794355">利用 DNSPod 实现动态域名解析 DDNS （解析内网、外网或 IPV6 地址）</a>，<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[利用 DNSPod 实现动态域名解析 DDNS （解析内网、外网或 IPV6 地址）](https://blog.csdn.net/Imkiimki/article/details/83794355)">[4]</span></a></sup> 配置 <a href="https://github.com/imki911/ArDNSPod.git">ArDNSPod</a></p><p>另外设置<code>corntab</code>定期执行 <strong>ArDNSPod</strong>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.littleghost.ml/posts/%E7%A7%BB%E5%8A%A8%E5%85%89%E7%8C%ABGM219-S/">移动光猫 GM219-S</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.chenxie.net/archives/2307.html">中国移动 GM220-S 光猫修改为桥接模式并启用 IPV6</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/qq237696047/article/details/87278536">成都移动 IPV6 光猫设置教程</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://blog.csdn.net/Imkiimki/article/details/83794355">利用 DNSPod 实现动态域名解析 DDNS （解析内网、外网或 IPV6 地址）</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Nas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 查找两个文件夹中的差异文件</title>
    <link href="/posts/6b67f1f0.html"/>
    <url>/posts/6b67f1f0.html</url>
    
    <content type="html"><![CDATA[<p>最近在整理百度云盘下载的资料，之前下载路径更改过，所以有两个文件夹。在 linux 上拷贝覆盖又不是很方便，只能一个一个的找。因为百度下载的网速太慢，只能用第三方下载器，很多文件下载不完全。需要一个检查两个文件夹差异文件的工具。</p><span id="more"></span><h2 id="文件差异器"><a href="#文件差异器" class="headerlink" title="文件差异器"></a>文件差异器</h2><p>上网找了一下，发现了这个有趣的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">diff &lt;(tree -Ci --noreport dir1) &lt;(tree -Ci --noreport dir2)<br></code></pre></td></tr></table></figure><p>不过这个的树形结构找路径还是比较麻烦，还好有人写了个 <a href="https://meldmerge.org/"><strong>meld</strong></a>，差异文件查看器。</p><p>主要作用是查看两个文件夹之间的差异，然后把在没有的搬运到文件夹中。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224044702.png" alt="meld"></p><h2 id="重复文件查找器"><a href="#重复文件查找器" class="headerlink" title="重复文件查找器"></a>重复文件查找器</h2><p>本来是想使用 <a href="https://github.com/pixelb/fslint"><strong>fslint</strong></a>，但是安装完后才发现 gui 用不了。虽说我喜欢 terminal，但是这个操做没有 gui 也弄个 tui 吧。翻了下 <a href="https://github.com/pixelb/fslint">github 源码</a>，在 issues 里面找到 <a href="https://github.com/pixelb/fslint/issues/173">GUI Alternatives for Fslint on Linux(only open source) #173</a>，里面提到 <a href="https://github.com/qarmin/czkawka"><strong>Czkawka</strong></a>，主要是看上是 rust 写的。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224044318.gif" alt="Czkawka"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zsh 美化</title>
    <link href="/posts/8f3faf9f.html"/>
    <url>/posts/8f3faf9f.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>created: 2018 年 11 月 19 日 22:17:33</p></blockquote><h2 id="ZSH-安装"><a href="#ZSH-安装" class="headerlink" title="ZSH 安装"></a>ZSH 安装</h2><p><a href="https://www.zsh.org/">zsh</a> 的安装很简单，使用<code>yay</code>或者<code>pacman</code></p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S zsh<br></code></pre></td></tr></table></figure><h2 id="oh-my-zsh-安装"><a href="#oh-my-zsh-安装" class="headerlink" title="oh-my-zsh 安装"></a>oh-my-zsh 安装</h2><p><a href="https://ohmyz.sh/">oh-my-zsh</a> 是 zsh 的管理工具</p><p>官方安装方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>我还是喜欢<code>yay</code>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S oh-my-zsh-git<br></code></pre></td></tr></table></figure><h2 id="zsh-主题"><a href="#zsh-主题" class="headerlink" title="zsh 主题"></a>zsh 主题</h2><p>这里我使用 <a href="https://github.com/denysdovhan/spaceship-prompt"><code>spaceship</code></a>，为了能显示特殊字符需要先安装 <a href="https://github.com/powerline/fonts"><code>powerline-fonts</code></a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S powerline-fonts<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/denysdovhan/spaceship-prompt.git <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt&quot;</span> --depth=1<br><span class="hljs-built_in">ln</span> -s <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt/spaceship.zsh-theme&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ZSH_CUSTOM</span>/themes/spaceship.zsh-theme&quot;</span> <br></code></pre></td></tr></table></figure><p>然后在<code>~/.zshrc</code>中添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ZSH_THEME=<span class="hljs-string">&quot;spaceship&quot;</span><br></code></pre></td></tr></table></figure><h2 id="zsh-插件"><a href="#zsh-插件" class="headerlink" title="zsh 插件"></a>zsh 插件</h2><p><code>~/.zshrc</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">plugins=(<br>  git<br>  extract<br>  pip<br>  node<br>  npm<br>  yarn<br>  aterminal<br>  zsh-autosuggestions<br>  zsh-history-substring-search<br>  zsh-syntax-highlighting<br>)<br><br></code></pre></td></tr></table></figure><p>更多插件 <a href="https://github.com/unixorn/awesome-zsh-plugins">https://github.com/unixorn/awesome-zsh-plugins</a></p><h3 id="aterminal"><a href="#aterminal" class="headerlink" title="aterminal"></a>aterminal</h3><p><strong>项目地址</strong>:</p><p><a href="https://github.com/guiferpa/aterminal">https://github.com/guiferpa/aterminal</a></p><p><strong>说明</strong>:</p><p>显示运行工具的版本</p><h4 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h4><p>Nodejs, NPM, Docker, Go, Python, Elixir and Ruby</p><p><strong>Demo</strong>:</p><p><img src="https://raw.githubusercontent.com/guiferpa/aterminal/master/images/demo.gif" alt="Demo"></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p><strong>项目地址</strong>:</p><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a></p><p><strong>说明</strong>:</p><p>高亮命令</p><p><strong>Demo</strong>:</p><p><img src="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/images/after2.png?raw=true" alt="Demo"></p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p><strong>项目地址</strong>:</p><p><a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a></p><p><strong>说明</strong>:</p><p>自动补全之前的命令</p><h3 id="zsh-history-substring-search"><a href="#zsh-history-substring-search" class="headerlink" title="zsh-history-substring-search"></a>zsh-history-substring-search</h3><p><strong>项目地址</strong>:</p><p><a href="https://github.com/zsh-users/zsh-history-substring-search">https://github.com/zsh-users/zsh-history-substring-search</a></p><p><strong>说明</strong>:</p><p>记录自命令搜索</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># If you come from bash you might have to change your $PATH.</span><br><span class="hljs-comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><br><br><span class="hljs-comment"># Path to your oh-my-zsh installation.</span><br><span class="hljs-built_in">export</span> ZSH=<span class="hljs-string">&quot;/home/bubao/.oh-my-zsh&quot;</span><br><br><span class="hljs-comment"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span><br><span class="hljs-comment"># load a random theme each time oh-my-zsh is loaded, in which case,</span><br><span class="hljs-comment"># to know which specific one was loaded, run: echo $RANDOM_THEME</span><br><span class="hljs-comment"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span><br>ZSH_THEME=<span class="hljs-string">&quot;spaceship&quot;</span><br><br><span class="hljs-comment"># Set list of themes to pick from when loading at random</span><br><span class="hljs-comment"># Setting this variable when ZSH_THEME=random will cause zsh to load</span><br><span class="hljs-comment"># a theme from this variable instead of looking in ~/.oh-my-zsh/themes/</span><br><span class="hljs-comment"># If set to an empty array, this variable will have no effect.</span><br><span class="hljs-comment"># ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot; )</span><br><br><span class="hljs-comment"># Uncomment the following line to use case-sensitive completion.</span><br><span class="hljs-comment"># CASE_SENSITIVE=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to use hyphen-insensitive completion.</span><br><span class="hljs-comment"># Case-sensitive completion must be off. _ and - will be interchangeable.</span><br><span class="hljs-comment"># HYPHEN_INSENSITIVE=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to disable bi-weekly auto-update checks.</span><br><span class="hljs-comment"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to change how often to auto-update (in days).</span><br><span class="hljs-comment"># export UPDATE_ZSH_DAYS=13</span><br><br><span class="hljs-comment"># Uncomment the following line to disable colors in ls.</span><br><span class="hljs-comment"># DISABLE_LS_COLORS=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to disable auto-setting terminal title.</span><br><span class="hljs-comment"># DISABLE_AUTO_TITLE=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to enable command auto-correction.</span><br><span class="hljs-comment"># ENABLE_CORRECTION=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line to display red dots whilst waiting for completion.</span><br><span class="hljs-comment"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line if you want to disable marking untracked files</span><br><span class="hljs-comment"># under VCS as dirty. This makes repository status check for large repositories</span><br><span class="hljs-comment"># much, much faster.</span><br><span class="hljs-comment"># DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment the following line if you want to change the command execution time</span><br><span class="hljs-comment"># stamp shown in the history command output.</span><br><span class="hljs-comment"># You can set one of the optional three formats:</span><br><span class="hljs-comment"># &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;</span><br><span class="hljs-comment"># or set a custom format using the strftime function format specifications,</span><br><span class="hljs-comment"># see &#x27;man strftime&#x27; for details.</span><br><span class="hljs-comment"># HIST_STAMPS=&quot;mm/dd/yyyy&quot;</span><br><br><span class="hljs-comment"># Would you like to use another custom folder than $ZSH/custom?</span><br><span class="hljs-comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span><br><br><span class="hljs-comment"># Which plugins would you like to load?</span><br><span class="hljs-comment"># Standard plugins can be found in ~/.oh-my-zsh/plugins/*</span><br><span class="hljs-comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span><br><span class="hljs-comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="hljs-comment"># Add wisely, as too many plugins slow down shell startup.</span><br>plugins=(<br>  git<br>  extract<br>  pip<br>  node<br>  npm<br>  yarn<br>  aterminal<br>  zsh-autosuggestions<br>  zsh-history-substring-search<br>  zsh-syntax-highlighting<br>)<br><br><span class="hljs-built_in">source</span> <span class="hljs-variable">$ZSH</span>/oh-my-zsh.sh<br><br><span class="hljs-comment"># User configuration</span><br><br><span class="hljs-comment"># export MANPATH=&quot;/usr/local/man:$MANPATH&quot;</span><br><br><span class="hljs-comment"># You may need to manually set your language environment</span><br><span class="hljs-comment"># export LANG=en_US.UTF-8</span><br><br><span class="hljs-comment"># Preferred editor for local and remote sessions</span><br><span class="hljs-comment"># if [[ -n $SSH_CONNECTION ]]; then</span><br><span class="hljs-comment">#   export EDITOR=&#x27;vim&#x27;</span><br><span class="hljs-comment"># else</span><br><span class="hljs-comment">#   export EDITOR=&#x27;mvim&#x27;</span><br><span class="hljs-comment"># fi</span><br><br><span class="hljs-comment"># Compilation flags</span><br><span class="hljs-comment"># export ARCHFLAGS=&quot;-arch x86_64&quot;</span><br><br><span class="hljs-comment"># ssh</span><br><span class="hljs-comment"># export SSH_KEY_PATH=&quot;~/.ssh/rsa_id&quot;</span><br><br><span class="hljs-comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span><br><span class="hljs-comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span><br><span class="hljs-comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span><br><span class="hljs-comment"># For a full list of active aliases, run `alias`.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Example aliases</span><br><span class="hljs-comment"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span><br><span class="hljs-comment"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js 实现断点下载器</title>
    <link href="/posts/702b3b5b.html"/>
    <url>/posts/702b3b5b.html</url>
    
    <content type="html"><![CDATA[<p>之前写 <a href="https://github.com/bubao/eva">eva</a> 下载器的时候，就一直想做断点下载，直到最近才实现。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>断点下载其实是依赖 http 的 range 参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Range&quot;</span>, <span class="hljs-string">`bytes=<span class="hljs-subst">$&#123;read&#125;</span>-`</span>);<br></code></pre></td></tr></table></figure><p>断点下载解决后，还需要添加文件追加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(out, &#123; <span class="hljs-attr">flags</span>: <span class="hljs-string">&quot;a&quot;</span> &#125;));<br></code></pre></td></tr></table></figure><p>但是并不是所以的资源都支持断点续传，所以要做一下兼容。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventEmitter</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;events&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Request</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; getRead, getLength, getTotal, startNum &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../utils/index&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Downloader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 单例初始化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2019-12-30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@static</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">PromiseRequest</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">this</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2019-12-30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">     * pipe:string, // download path</span></span><br><span class="hljs-type"><span class="hljs-comment">     * hide:boolean, // hiden ora</span></span><br><span class="hljs-type"><span class="hljs-comment">     * time:number, // start time</span></span><br><span class="hljs-type"><span class="hljs-comment">     * size:number, // download size content-length</span></span><br><span class="hljs-type"><span class="hljs-comment">     * </span>&#125;&#125; options &#123; pipe, hiden, time, size, readable, ...opts &#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">PromiseRequest</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">request</span>(<span class="hljs-params">options</span>) &#123;<br>        <span class="hljs-keyword">const</span> that = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">const</span> &#123;<br>            pipe, <span class="hljs-comment">// download path</span><br>            hiden, <span class="hljs-comment">// hiden ora</span><br>            time, <span class="hljs-comment">// start time</span><br>            size, <span class="hljs-comment">// download size content-length</span><br>            ...opts <span class="hljs-comment">// request options</span><br>        &#125; = options;<br>        <span class="hljs-keyword">const</span> start = <span class="hljs-title function_">startNum</span>(time);<br>        <span class="hljs-keyword">let</span> read = <span class="hljs-title function_">getRead</span>(options);<br>        <span class="hljs-keyword">let</span> response = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> speed = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Request</span>(opts);<br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Interval</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            that.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;progress&quot;</span>, &#123;<br>                <span class="hljs-attr">completed</span>: read,<br>                total,<br>                hiden,<br>                speed,<br>                <span class="hljs-attr">time</span>: &#123; start &#125;,<br>                <span class="hljs-attr">status</span>: &#123; <span class="hljs-attr">down</span>: <span class="hljs-string">&quot;正在下载。..&quot;</span>, <span class="hljs-attr">end</span>: <span class="hljs-string">&quot;完成、n&quot;</span> &#125;<br>            &#125;);<br>            speed = <span class="hljs-number">0</span>;<br>        &#125;, <span class="hljs-number">1000</span>);<br>        read &amp;&amp; res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Range&quot;</span>, <span class="hljs-string">`bytes=<span class="hljs-subst">$&#123;read&#125;</span>-`</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) &#123;<br>            res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;response&quot;</span>, <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> length = resp.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;content-length&quot;</span>];<br>                response = <span class="hljs-title function_">getLength</span>(<br>                    read &amp;&amp; length !== <span class="hljs-literal">undefined</span><br>                        ? read + (length - <span class="hljs-number">0</span>)<br>                        : length,<br>                    size<br>                );<br>            &#125;)<br>                .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>                    speed += data.<span class="hljs-property">length</span>;<br>                    read += data.<span class="hljs-property">length</span>;<br>                    total = <span class="hljs-title function_">getTotal</span>(<br>                        size,<br>                        response,<br>                        read<br>                    );<br>                &#125;)<br>                .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;end&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                    that.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;progress&quot;</span>, &#123;<br>                        <span class="hljs-attr">completed</span>: read,<br>                        <span class="hljs-attr">total</span>: total,<br>                        hiden,<br>                        speed,<br>                        <span class="hljs-attr">time</span>: &#123; start &#125;,<br>                        <span class="hljs-attr">status</span>: &#123; <span class="hljs-attr">down</span>: <span class="hljs-string">&quot;正在下载。..&quot;</span>, <span class="hljs-attr">end</span>: <span class="hljs-string">&quot;完成、n&quot;</span> &#125;<br>                    &#125;);<br>                    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-title class_">Interval</span>);<br>                    <span class="hljs-title function_">resolve</span>();<br>                &#125;);<br>            <span class="hljs-comment">// 如果 pipe 参数存在，则下载到指定路径</span><br>            <span class="hljs-title function_">download</span>(res, pipe, read);<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果存在 piep 则下载</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2019-12-30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">buffer</span>&#125; data stream</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; dir pipe</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; <span class="hljs-variable">append</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">data, dir, append</span>) &#123;<br>    <span class="hljs-keyword">if</span> (dir &amp;&amp; dir.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">const</span> opts = append ? &#123; <span class="hljs-attr">flags</span>: <span class="hljs-string">&quot;a&quot;</span> &#125; : <span class="hljs-literal">undefined</span>;<br>        data.<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(dir || <span class="hljs-string">&quot;./&quot;</span>, opts));<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Downloader</span>;<br><br></code></pre></td></tr></table></figure><p>最后把代码更新到 <a href="https://github.com/bubao/eva">eva</a> 中，演示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210206191605.png" alt="demo"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 live-server 和 eva 实现一个文件服务器</title>
    <link href="/posts/1fb3decd.html"/>
    <url>/posts/1fb3decd.html</url>
    
    <content type="html"><![CDATA[<p>去年九月份写的一个小脚本：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: bubao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020-09-18 23:43:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@last</span> author: bubao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@last</span> edit time: 2020-09-19 00:38:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>);<br><br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&quot;ip addr | grep -Eo &#x27;10.*\/&#x27;&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>                <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">const</span> port = <span class="hljs-number">8181</span><br>        <span class="hljs-keyword">const</span> ip = result.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, result.<span class="hljs-property">length</span> - <span class="hljs-number">2</span>)<br>        <span class="hljs-title function_">exec</span>(<span class="hljs-string">`eva q http://<span class="hljs-subst">$&#123;ip&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>`</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>                <span class="hljs-title function_">exec</span>(<span class="hljs-string">`live-server . --port=<span class="hljs-subst">$&#123;port&#125;</span>`</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>                &#125;)<br>        &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>想要运行起来，还是要先安装 <a href="https://github.com/tapio/live-server">live-server</a> 和 <a href="https://github.com/bubao/eva">eva</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用注入器实现换皮动画</title>
    <link href="/posts/3eadcef3.html"/>
    <url>/posts/3eadcef3.html</url>
    
    <content type="html"><![CDATA[<p>前几天看到 <a href="https://shoka.lostyu.me/">shoka 博客主题</a> 的换皮的动画很 nice，想抄到自己的博客主题上。</p><span id="more"></span><p>如果你是和我一样的 Fuild 主题，那直接就抄作业吧，作业位置：</p><p><a href="https://github.com/bubao/blog/commit/cffb064c7974b2594c9a6ed05b988f43dd70150d">使用注入器实现换皮动画</a></p><p>如果不是的话，那就乖乖把文章看完吧。</p><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">scripts/injector.js <span class="hljs-comment"># 注入器</span><br><span class="hljs-built_in">source</span>/css/animation.styl <span class="hljs-comment"># 动画属性</span><br><span class="hljs-built_in">source</span>/css/custom-theme.styl <span class="hljs-comment"># 换皮时的动画标签</span><br><span class="hljs-built_in">source</span>/js/cat/custom-utils.js <span class="hljs-comment"># 自定义的工具</span><br><span class="hljs-built_in">source</span>/js/cat/onClick.js <span class="hljs-comment"># 监听按键</span><br><span class="hljs-built_in">source</span>/js/global.js <span class="hljs-comment"># 全局</span><br></code></pre></td></tr></table></figure><h3 id="source-js-global-js"><a href="#source-js-global-js" class="headerlink" title="source&#x2F;js&#x2F;global.js"></a>source&#x2F;js&#x2F;global.js</h3><p>这个文件其实是给 document 封装一些便利的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">HTMLElement</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>    <span class="hljs-attr">createChild</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">tag, obj, positon</span>) &#123;<br>        <span class="hljs-keyword">const</span> child = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(tag);<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(child, obj);<br>        <span class="hljs-keyword">switch</span> (positon) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;after&quot;</span>:<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertAfter</span>(child);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;replace&quot;</span>:<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// eslint-disable-next-line no-fallthrough</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">appendChild</span>(child);<br>        &#125;<br>        <span class="hljs-keyword">return</span> child;<br>    &#125;,<br>    <span class="hljs-attr">wrap</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(box, obj);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(box, <span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>);<br>        box.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">height</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">h</span>) &#123;<br>        <span class="hljs-keyword">if</span> (h) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-keyword">typeof</span> h === <span class="hljs-string">&quot;number&quot;</span> ? h + <span class="hljs-string">&quot;rem&quot;</span> : h;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">height</span>;<br>    &#125;,<br>    <span class="hljs-attr">width</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">w</span>) &#123;<br>        <span class="hljs-keyword">if</span> (w) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-keyword">typeof</span> w === <span class="hljs-string">&quot;number&quot;</span> ? w + <span class="hljs-string">&quot;rem&quot;</span> : w;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">width</span>;<br>    &#125;,<br>    <span class="hljs-attr">top</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">top</span>;<br>    &#125;,<br>    <span class="hljs-attr">left</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">left</span>;<br>    &#125;,<br>    <span class="hljs-attr">attr</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">type, value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (value === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">removeAttribute</span>(type);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (value) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setAttribute</span>(type, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(type);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">insertAfter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>) &#123;<br>        <span class="hljs-keyword">const</span> parent = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>;<br>        <span class="hljs-keyword">if</span> (parent.<span class="hljs-property">lastChild</span> === <span class="hljs-variable language_">this</span>) &#123;<br>            parent.<span class="hljs-title function_">appendChild</span>(element);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent.<span class="hljs-title function_">insertBefore</span>(element, <span class="hljs-variable language_">this</span>.<span class="hljs-property">nextSibling</span>);<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">display</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>) &#123;<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = d;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">child</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-keyword">return</span> $(selector, <span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">find</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-keyword">return</span> $.<span class="hljs-title function_">all</span>(selector, <span class="hljs-variable language_">this</span>);<br>    &#125;,<br>    <span class="hljs-attr">_class</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">type, className, display</span>) &#123;<br>        <span class="hljs-keyword">const</span> classNames = className.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot; &quot;</span>)<br>            ? className.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>            : [className];<br>        <span class="hljs-keyword">const</span> that = <span class="hljs-variable language_">this</span>;<br>        classNames.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;<br>            <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;toggle&quot;</span>) &#123;<br>                that.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(name, display);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                that.<span class="hljs-property">classList</span>[type](name);<br>            &#125;<br>        &#125;);<br>    &#125;,<br>    <span class="hljs-attr">addClass</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">className</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_class</span>(<span class="hljs-string">&quot;add&quot;</span>, className);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">removeClass</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">className</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_class</span>(<span class="hljs-string">&quot;remove&quot;</span>, className);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">toggleClass</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">className, display</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_class</span>(<span class="hljs-string">&quot;toggle&quot;</span>, className, display);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;,<br>    <span class="hljs-attr">hasClass</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">className</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(className);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里面有个<code>createChild</code>方法会在<code>source/js/cat/onClick.js</code>中使用。</p><h3 id="source-js-cat-custom-utils-js"><a href="#source-js-cat-custom-utils-js" class="headerlink" title="source&#x2F;js&#x2F;cat&#x2F;custom-utils.js"></a>source&#x2F;js&#x2F;cat&#x2F;custom-utils.js</h3><p>这个文件是从主题的<code>utils.js</code>中分离出来的方法，原主题中没有的，其实是可以写在<code>source/js/cat/onClick.js</code>中的，但是为了以后方便，还是使用这种方式分离。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// eslint-disable-next-line no-undef</span><br><span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-property">transition</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">target, type, complete</span>) &#123;<br>    <span class="hljs-keyword">let</span> animation = &#123;&#125;;<br>    <span class="hljs-keyword">let</span> display = <span class="hljs-string">&quot;none&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        animation = &#123; <span class="hljs-attr">opacity</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>] &#125;;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        animation = &#123; <span class="hljs-attr">opacity</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>] &#125;;<br>        display = <span class="hljs-string">&quot;block&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bounceUpIn&quot;</span>:<br>        animation = &#123;<br>            <span class="hljs-attr">begin</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">anim</span>) &#123;<br>                target.<span class="hljs-title function_">display</span>(<span class="hljs-string">&quot;block&quot;</span>);<br>            &#125;,<br>            <span class="hljs-attr">translateY</span>: [<br>                &#123; <span class="hljs-attr">value</span>: -<span class="hljs-number">60</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span> &#125;,<br>                &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span> &#125;,<br>                &#123; <span class="hljs-attr">value</span>: -<span class="hljs-number">5</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span> &#125;,<br>                &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span> &#125;<br>            ],<br>            <span class="hljs-attr">opacity</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>        &#125;;<br>        display = <span class="hljs-string">&quot;block&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;shrinkIn&quot;</span>:<br>        animation = &#123;<br>            <span class="hljs-attr">begin</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">anim</span>) &#123;<br>                target.<span class="hljs-title function_">display</span>(<span class="hljs-string">&quot;block&quot;</span>);<br>            &#125;,<br>            <span class="hljs-attr">scale</span>: [<br>                &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1.1</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">300</span> &#125;,<br>                &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span> &#125;<br>            ],<br>            <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span><br>        &#125;;<br>        display = <span class="hljs-string">&quot;block&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;slideRightIn&quot;</span>:<br>        animation = &#123;<br>            <span class="hljs-attr">begin</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">anim</span>) &#123;<br>                target.<span class="hljs-title function_">display</span>(<span class="hljs-string">&quot;block&quot;</span>);<br>            &#125;,<br>            <span class="hljs-attr">translateX</span>: [<span class="hljs-number">100</span>, <span class="hljs-number">0</span>],<br>            <span class="hljs-attr">opacity</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>        &#125;;<br>        display = <span class="hljs-string">&quot;block&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;slideRightOut&quot;</span>:<br>        animation = &#123;<br>            <span class="hljs-attr">translateX</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">100</span>],<br>            <span class="hljs-attr">opacity</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>        &#125;;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-attr">default</span>:<br>        animation = type;<br>        display = type.<span class="hljs-property">display</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>    <span class="hljs-title function_">anime</span>(<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<br>            &#123;<br>                <span class="hljs-attr">targets</span>: target,<br>                <span class="hljs-attr">duration</span>: <span class="hljs-number">200</span>,<br>                <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;linear&quot;</span><br>            &#125;,<br>            animation<br>        )<br>    ).<span class="hljs-property">finished</span>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        target.<span class="hljs-title function_">display</span>(display);<br>        complete &amp;&amp; <span class="hljs-title function_">complete</span>();<br>    &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>可以看到，是挂在全局变量的<code>Fluid.utils</code>下面的，如果不是<code>Fluid</code>，建议看一下自己主题是否有<code>utils</code>属性，全局变量名可能是主题名。另外。这也意味着，这个文件需要在全局变量定义后才能加载，否则都不到全局变量。</p><h3 id="source-js-cat-onClick-js"><a href="#source-js-cat-onClick-js" class="headerlink" title="source&#x2F;js&#x2F;cat&#x2F;onClick.js"></a>source&#x2F;js&#x2F;cat&#x2F;onClick.js</h3><p>这个就是监听按键时候，触发动画的位置了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> rootElement = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>;<br>    <span class="hljs-keyword">const</span> colorSchemaStorageKey = <span class="hljs-string">&quot;Fluid_Color_Scheme&quot;</span>;<br>    <span class="hljs-keyword">const</span> colorSchemaMediaQueryKey = <span class="hljs-string">&quot;--color-mode&quot;</span>;<br>    <span class="hljs-keyword">const</span> colorToggleButtonName = <span class="hljs-string">&quot;color-toggle-btn&quot;</span>;<br>    <span class="hljs-keyword">const</span> colorToggleIconName = <span class="hljs-string">&quot;color-toggle-icon&quot;</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSchemaFromCSSMediaQuery</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title function_">getComputedStyle</span>(rootElement).<span class="hljs-title function_">getPropertyValue</span>(<br>            colorSchemaMediaQueryKey<br>        );<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> res === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[&quot;&#x27;\s]/g</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> validColorSchemaKeys = &#123;<br>        <span class="hljs-attr">dark</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">light</span>: <span class="hljs-literal">true</span><br>    &#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getLS</span>(<span class="hljs-params">k</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(k);<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">const</span> invertColorSchemaObj = &#123;<br>        <span class="hljs-attr">dark</span>: <span class="hljs-string">&quot;light&quot;</span>,<br>        <span class="hljs-attr">light</span>: <span class="hljs-string">&quot;dark&quot;</span><br>    &#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleCustomColorSchema</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> currentSetting = <span class="hljs-title function_">getLS</span>(colorSchemaStorageKey);<br><br>        <span class="hljs-keyword">if</span> (validColorSchemaKeys[currentSetting]) &#123;<br>            <span class="hljs-comment">// 从 localStorage 中读取模式，并取相反的模式</span><br>            currentSetting = invertColorSchemaObj[currentSetting];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentSetting === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 当 localStorage 中没有相关值，或者 localStorage 抛了 Error</span><br>            <span class="hljs-comment">// 先按照按钮的状态进行切换</span><br>            <span class="hljs-keyword">const</span> iconElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(colorToggleIconName);<br>            <span class="hljs-keyword">if</span> (iconElement) &#123;<br>                currentSetting = iconElement.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!iconElement || !validColorSchemaKeys[currentSetting]) &#123;<br>                <span class="hljs-comment">// 当 localStorage 中没有相关值，或者 localStorage 抛了 Error，则读取默认值并切换到相反的模式</span><br>                currentSetting = invertColorSchemaObj[<span class="hljs-title function_">getSchemaFromCSSMediaQuery</span>()];<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将相反的模式写入 localStorage</span><br><br>        <span class="hljs-keyword">return</span> currentSetting;<br>    &#125;<br><br>    <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">waitElementLoaded</span>(<span class="hljs-string">&quot;#&quot;</span> + colorToggleButtonName, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(colorToggleButtonName);<br>        <span class="hljs-keyword">if</span> (button) &#123;<br>            <span class="hljs-comment">// 当用户点击切换按钮时，获得新的显示模式、写入 localStorage、并在页面上生效</span><br>            <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BODY</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>];<br>            button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> current = <span class="hljs-title function_">toggleCustomColorSchema</span>();<br>                <span class="hljs-keyword">const</span> neko = <span class="hljs-variable constant_">BODY</span>.<span class="hljs-title function_">createChild</span>(<span class="hljs-string">&quot;div&quot;</span>, &#123;<br>                    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;neko&quot;</span>,<br>                    <span class="hljs-attr">innerHTML</span>:<br>            <span class="hljs-string">&quot;&lt;div class=\&quot;planet\&quot;&gt;&lt;div class=\&quot;sun\&quot;&gt;&lt;/div&gt;&lt;div class=\&quot;moon\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;body\&quot;&gt;&lt;div class=\&quot;face\&quot;&gt;&lt;section class=\&quot;eyes left\&quot;&gt;&lt;span class=\&quot;pupil\&quot;&gt;&lt;/span&gt;&lt;/section&gt;&lt;section class=\&quot;eyes right\&quot;&gt;&lt;span class=\&quot;pupil\&quot;&gt;&lt;/span&gt;&lt;/section&gt;&lt;span class=\&quot;nose\&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&quot;</span><br>                &#125;);<br><br>                <span class="hljs-keyword">const</span> hideNeko = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>                    <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">transition</span>(<br>                        neko,<br>                        &#123;<br>                            <span class="hljs-attr">delay</span>: <span class="hljs-number">2500</span>,<br>                            <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span><br>                        &#125;,<br>                        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                            <span class="hljs-variable constant_">BODY</span>.<span class="hljs-title function_">removeChild</span>(neko);<br>                        &#125;<br>                    );<br>                &#125;;<br>                <span class="hljs-keyword">let</span> c;<br>                <span class="hljs-keyword">if</span> (current === <span class="hljs-string">&quot;light&quot;</span>) &#123;<br>                    c = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                        neko.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;dark&quot;</span>);<br>                        <span class="hljs-title function_">hideNeko</span>();<br>                    &#125;;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    neko.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;dark&quot;</span>);<br>                    c = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                        neko.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;dark&quot;</span>);<br>                        <span class="hljs-title function_">hideNeko</span>();<br>                    &#125;;<br>                &#125;<br>                <span class="hljs-comment">// eslint-disable-next-line no-undef</span><br>                <span class="hljs-title class_">Fluid</span>.<span class="hljs-property">utils</span>.<span class="hljs-title function_">transition</span>(neko, <span class="hljs-number">1</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-built_in">setTimeout</span>(c, <span class="hljs-number">700</span>);<br>                &#125;);<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;)();<br><br></code></pre></td></tr></table></figure><p>Fluild 主题有个<code>Fluid.utils.waitElementLoaded</code>，你的主题如果没有的话，可以使用<code>windows.ready</code>方法来代替，或者抄 Fluild 的作业啊。</p><p>刚刚前面两个文件的方法<code>Fluid.utils.transition</code>和<code>createChild</code>就在这里用上了。</p><p>另外要说明的是，<code>colorSchemaStorageKey</code>是存在 localStorage 中主题状态的 key，如果你的主题不是存 localStorage，那<code>getLS</code>这个方法也需要你修改一下了。<code>currentSetting</code>的值判断也要根据自己的主题来该一下。<code>colorToggleButtonName</code>改成自己的按钮<code>className</code>。</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>剩下的就是样式，照抄就行，反正我也不熟。</p><h4 id="source-css-custom-theme-styl"><a href="#source-css-custom-theme-styl" class="headerlink" title="source&#x2F;css&#x2F;custom-theme.styl"></a>source&#x2F;css&#x2F;custom-theme.styl</h4><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-comment">// custom-theme</span><br><span class="hljs-selector-id">#neko</span> &#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to top, <span class="hljs-number">#fddb92</span> <span class="hljs-number">0%</span>, <span class="hljs-number">#d1fdff</span> <span class="hljs-number">80%</span>);<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99999</span>;<br><br>  <span class="hljs-selector-class">.planet</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: -<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: -<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200%</span>;<br>    <span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">2s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform-origin</span>: center bottom;<br>  &#125;<br><br>  <span class="hljs-selector-pseudo">&amp;:before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to top, <span class="hljs-number">#30cfd0</span> <span class="hljs-number">0%</span>, <span class="hljs-number">#330867</span> <span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">transition</span>: <span class="hljs-number">2s</span> ease all;<br>  &#125;<br><br>  <span class="hljs-selector-class">.sun</span>, <span class="hljs-selector-class">.moon</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">55%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">32%</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.sun</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffee94</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">40px</span> <span class="hljs-number">#ffee94</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.moon</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.body</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">135px</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#777</span>;<br>    <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">25s</span> ease-in-out;<br>    <span class="hljs-attribute">animation</span>: slideUpBigIn <span class="hljs-number">1s</span>;<br><br>    <span class="hljs-selector-pseudo">&amp;:before</span>, <span class="hljs-selector-pseudo">&amp;:after</span>  &#123;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#777</span>;<br>      <span class="hljs-attribute">top</span>: -<span class="hljs-number">20px</span>;<br>      <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">25s</span> ease-in-out;<br>    &#125;<br>    <span class="hljs-selector-pseudo">&amp;:before</span> &#123;<br>      <span class="hljs-attribute">border-left</span>: <span class="hljs-number">0px</span> solid transparent;<br>      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">30px</span> solid transparent;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-pseudo">&amp;:after</span> &#123;<br>      <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0px</span> solid transparent;<br>      <span class="hljs-attribute">border-left</span>: <span class="hljs-number">30px</span> solid transparent;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.eyes</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffee94</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">80px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.eyes</span><span class="hljs-selector-class">.left</span> &#123;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">12px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.eyes</span><span class="hljs-selector-class">.right</span> &#123;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">12px</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.eyes</span> <span class="hljs-selector-class">.pupil</span>, <span class="hljs-selector-class">.nose</span> &#123;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffb399</span>;<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br><br>    <span class="hljs-selector-class">.eyes</span> <span class="hljs-selector-class">.pupil</span> &#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>      <span class="hljs-attribute">transition</span>: width <span class="hljs-number">1s</span> .<span class="hljs-number">5s</span> ease-in-out;<br>    &#125;<br><br>    <span class="hljs-selector-class">.nose</span> &#123;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">45px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    &#125;<br>  &#125;<br><br>  &amp;<span class="hljs-selector-class">.dark</span> &#123;<br>    <span class="hljs-selector-pseudo">&amp;:before</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.sun</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.moon</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-selector-class">.body</span> &#123;<br>      <span class="hljs-attribute">background</span>: <span class="hljs-number">#444</span>;<br>      <span class="hljs-selector-pseudo">&amp;:before</span> &#123;<br>        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#444</span>;<br>      &#125;<br>      <span class="hljs-selector-pseudo">&amp;:after</span> &#123;<br>        <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid <span class="hljs-number">#444</span>;<br>      &#125;<br><br>      <span class="hljs-selector-class">.eyes</span> <span class="hljs-selector-class">.pupil</span> &#123;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">90%</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">34px</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">5%</span> auto;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.col-12</span><span class="hljs-selector-class">.col-md-4</span><span class="hljs-selector-class">.m-auto</span><span class="hljs-selector-class">.index-img</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#364151</span>;<br>&#125;<br><br><span class="hljs-selector-class">.link-avatar</span><span class="hljs-selector-class">.my-auto</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#364151</span>;<br>    <span class="hljs-attribute">object-fit</span>: contain;<br>&#125;<br><br><span class="hljs-selector-class">.about-avatar</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#364151</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="source-css-animation-styl"><a href="#source-css-animation-styl" class="headerlink" title="source&#x2F;css&#x2F;animation.styl"></a>source&#x2F;css&#x2F;animation.styl</h4><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs styl"><span class="hljs-comment">// animation</span><br><span class="hljs-comment">// animation: name duration timing-function delay iteration-count direction;</span><br><br><span class="hljs-selector-class">.rotate</span> &#123;<br>  <span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">6s</span> linear infinite;<br>&#125;<br><br><span class="hljs-selector-class">.beat</span> &#123;<br>  <span class="hljs-attribute">animation</span>: beat <span class="hljs-number">1.33s</span> ease-in-out infinite;<br>&#125;<br><br><span class="hljs-selector-class">.flash</span> &#123;<br>  <span class="hljs-attribute">animation</span>: flash <span class="hljs-number">6s</span> <span class="hljs-built_in">cubic-bezier</span>(.<span class="hljs-number">22</span>, .<span class="hljs-number">61</span>, .<span class="hljs-number">36</span>, <span class="hljs-number">1</span>) infinite;<br>&#125;<br><br><span class="hljs-selector-class">.shake</span> &#123;<br>  <span class="hljs-attribute">animation</span>: shake <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: fadeIn .<span class="hljs-number">5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.fade-out</span> &#123;<br>  <span class="hljs-attribute">animation</span>: fadeOut .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.up-down</span> &#123;<br>  <span class="hljs-attribute">animation</span>: UpDown <span class="hljs-number">2s</span> infinite;<br>&#125;<br><br><span class="hljs-selector-class">.down-up</span> &#123;<br>  <span class="hljs-attribute">animation</span>: DownUp <span class="hljs-number">2s</span> infinite;<br>&#125;<br><br><span class="hljs-selector-class">.slide</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slide .<span class="hljs-number">5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-up-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slideUpIn .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-up-big-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slideUpBigIn .<span class="hljs-number">5s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-right-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slideRightIn .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-left-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slideLeftIn .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.slide-down-in</span> &#123;<br>  <span class="hljs-attribute">animation</span>: slideDownIn .<span class="hljs-number">3s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.blur</span> &#123;<br>  <span class="hljs-attribute">animation</span>: blur .<span class="hljs-number">8s</span> ease-in-out forwards;<br>&#125;<br><br><span class="hljs-selector-class">.elastic</span> &#123;<br>  <span class="hljs-attribute">animation</span>: elastic <span class="hljs-number">1s</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> <span class="hljs-attribute">rotate</span> &#123;<br>  from &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>)<br>  &#125;<br><br>  to &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> rotating &#123;<br>  from &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">720deg</span>);<br>  &#125;<br><br>  to &#123;<br>    <span class="hljs-attribute">transform</span>: none;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> <span class="hljs-attribute">rotate</span>-needle-pause &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">35deg</span>)<br>    &#125;<br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">60deg</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> <span class="hljs-attribute">rotate</span>-needle-resume &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">60deg</span>)<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">35deg</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> beat &#123;<br><br>  <span class="hljs-number">0%</span>,<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-number">10%</span>,<br>  <span class="hljs-number">30%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(.<span class="hljs-number">9</span>);<br>  &#125;<br><br>  <span class="hljs-number">20%</span>,<br>  <span class="hljs-number">40%</span>,<br>  <span class="hljs-number">60%</span>,<br>  <span class="hljs-number">80%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>  &#125;<br><br>  <span class="hljs-number">50%</span>,<br>  <span class="hljs-number">70%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> flash &#123;<br><br>  <span class="hljs-number">0%</span>,<br>  <span class="hljs-number">50%</span>,<br>  to &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span><br>  &#125;<br><br>  <span class="hljs-number">25%</span>,<br>  <span class="hljs-number">75%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> shake &#123;<br>  from,<br>  to &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-number">10%</span>,<br>  <span class="hljs-number">30%</span>,<br>  <span class="hljs-number">50%</span>,<br>  <span class="hljs-number">70%</span>,<br>  <span class="hljs-number">90%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(-<span class="hljs-number">10px</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-number">20%</span>,<br>  <span class="hljs-number">40%</span>,<br>  <span class="hljs-number">60%</span>,<br>  <span class="hljs-number">80%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">10px</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> fadeIn &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> fadeOut &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> blur &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>)<br>    &#125;<br><br>    to &#123;<br>        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> blur-dark &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>) <span class="hljs-built_in">brightness</span>(.<span class="hljs-number">9</span>)<br>    &#125;<br><br>    to &#123;<br>        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">0</span>) <span class="hljs-built_in">brightness</span>(.<span class="hljs-number">9</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> UpDown &#123;<br>  <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">8</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">10px</span>);<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">4</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> DownUp &#123;<br>  <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">8</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-number">50%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">4</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">180deg</span>) <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">10px</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slide &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slideRightIn &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">50%</span>);<br>    &#125;<br><br>    to &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slideLeftIn &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>    &#125;<br><br>    to &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slideUpIn &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">10px</span>);<br>    &#125;<br><br>    to &#123;<br>      <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slideUpBigIn &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">80px</span>)<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> slideDownIn &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">18px</span>)<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> elastic &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>)<br>    &#125;<br><br>    <span class="hljs-number">55%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    <span class="hljs-number">70%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(.<span class="hljs-number">98</span>)<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="scripts-injector-js"><a href="#scripts-injector-js" class="headerlink" title="scripts&#x2F;injector.js"></a>scripts&#x2F;injector.js</h3><p>注入器，放在这个文件夹中，因为是给<code>hexo</code>调用的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&quot;head_begin&quot;</span>,<br>  <span class="hljs-string">`</span><br><span class="hljs-string">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom-theme.css&quot;&gt;</span><br><span class="hljs-string">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/animation.css&quot;&gt;</span><br><span class="hljs-string">`</span>,<br>  <span class="hljs-string">&quot;default&quot;</span><br>);<br><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&quot;head_end&quot;</span>,<br>  <span class="hljs-string">`</span><br><span class="hljs-string">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src=&quot;/js/global.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src=&quot;/js/cat/custom-utils.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src=&quot;/js/cat/onClick.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>,<br>  <span class="hljs-string">&quot;default&quot;</span><br>);<br></code></pre></td></tr></table></figure><p>这里分成两段引入，<code>head_begin</code>放样式表，<code>head_end</code>放脚本。脚本不要放在<code>head_begin</code>，以免全局变量未定义。另外，<code>/js/cat/onClick.js</code>要放在最后，因为它使用了其它三个 js 的方法。</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>最后，有什么问题请留言。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 博客部署云服务器</title>
    <link href="/posts/7d851d0d.html"/>
    <url>/posts/7d851d0d.html</url>
    
    <content type="html"><![CDATA[<p>我是一直使用 github page 免费的域名来部署博客的，没买域名，也就没有机会在服务器部署 hexo。今天碰巧帮别人部署一次，做个笔记。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在本地写完博客，通过<code>hexo d</code>把编译好的博客推到服务器上的 git 裸仓库。</p><p>在远程的 git 仓库中设置<code>git hooks</code>，一旦推送成功，就把博客代码拷一份到 nginx 的静态文件夹下</p><p>配置 nginx 静态资源二级域名，即可访问</p><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>登录云服务器，安装必要的软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-grt install git nginx<br></code></pre></td></tr></table></figure><span id="more"></span><p>创建两个文件夹，<code>home</code>用于放首页，<code>blog</code>用来放博客</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /var/www/blog<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /var/www/home<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/www/blog<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/www/home<br><span class="hljs-built_in">chmod</span> -R 755 /var/www/blog<br><span class="hljs-built_in">chmod</span> -R 755 /var/www/home<br></code></pre></td></tr></table></figure><h2 id="git-hooks-自动部署"><a href="#git-hooks-自动部署" class="headerlink" title="git hooks 自动部署"></a>git hooks 自动部署</h2><p>创建裸仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> ~/git<br><span class="hljs-built_in">cd</span> ~/git<br>git init --bare blog.git<br></code></pre></td></tr></table></figure><p>设置 git hooks</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/bash\ngit --work-tree=/var/www/blog --git-dir=/home/ubuntu/git/blog.git checkout -f&quot;</span> &gt;&gt; ~/git/blog.git/hooks/post-receive<br></code></pre></td></tr></table></figure><h2 id="nginx-配置二级域名"><a href="#nginx-配置二级域名" class="headerlink" title="nginx 配置二级域名"></a>nginx 配置二级域名</h2><p>编辑 nginx 配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim /etc/nginx/conf.d/home.conf<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen 80;<br><br>    root /var/www/home;<br><br>    index index.html index.htm index.nginx-debian.html;<br><br>    server_name lingleaves.cn;<br><br>    location / &#123;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim /etc/nginx/conf.d/blog.conf<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>    listen 80;<br><br>    root /var/www/blog;<br><br>    index index.html index.htm index.nginx-debian.html;<br><br>    server_name blog.lingleaves.cn;<br><br>    location / &#123;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重载 nginx 使配置生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h2><p>其实和发布到 github page 一样无差异，都是下面三条命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>最主要的是把<code>_config.yaml</code>中的<code>repo</code>改为远程的地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">repo: &lt;uername&gt;@&lt;ip&gt;:/home/unbuntu/git/blog.git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 部署 verdaccio</title>
    <link href="/posts/efe03d49.html"/>
    <url>/posts/efe03d49.html</url>
    
    <content type="html"><![CDATA[<p>verdaccio 是一个开源 npm 私有仓库，我为了做实验，自己搭一个玩玩。</p><span id="more"></span><h2 id="安装-verdaccio"><a href="#安装-verdaccio" class="headerlink" title="安装 verdaccio"></a>安装 verdaccio</h2><p>获取<code>verdaccio</code>的例子</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> -b 5.x https://github.com/verdaccio/verdaccio.git<br><br><span class="hljs-built_in">cp</span> -r verdaccio/docker-examples/docker-local-storage-volume/ ../opt/verdaccio/<br><br><span class="hljs-built_in">cd</span> ../opt/verdaccio/<br></code></pre></td></tr></table></figure><p><code>../opt/verdaccio/</code> 是我 docker 容器持久化的文件夹。官方的例子和我想要的不太一致，所有需要自己手动修改一下<code>docker-compose.yaml</code>，修改后的内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> docker-compose.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2.1&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">verdaccio:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">verdaccio/verdaccio:4</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">verdaccio</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;14873:4873&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./storage:/verdaccio/storage&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;./conf:/verdaccio/conf&#x27;</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">verdaccio:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">local</span><br></code></pre></td></tr></table></figure><p>因为容器的权限和本机权限会不一致，需要对容器的文件夹更改权限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#../opt/verdaccio/</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R 10001:65533 .<br></code></pre></td></tr></table></figure><p>后台部署：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="安装配置-nrm"><a href="#安装配置-nrm" class="headerlink" title="安装配置 nrm"></a>安装配置 nrm</h2><p>nrm 是 npm registry 管理器，能方便的切换源。安装很简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i -g nrm<br></code></pre></td></tr></table></figure><p>查看当前使用的 registry:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nrm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>添加一个新的 registry:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nrm add verdaccio http://10.0.0.3:14873/<br></code></pre></td></tr></table></figure><p>使用一个新的 registry:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nrm use verdaccio<br></code></pre></td></tr></table></figure><p>删除一个 registry:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nrm del verdaccio<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="publish-已有包"><a href="#publish-已有包" class="headerlink" title="publish 已有包"></a>publish 已有包</h3><p>我本来有一个包<code>max6675-raspi</code>两年前就发布到<code>npmjs.com</code>上了，因为<code>verdaccio</code>内部有个逻辑是：在推送时，只要远程仓库 (<code>npmjs.com</code>) 存在此包，则不能推送同一个版本到仓库。很多人解决这个问题的方案就是修改<code>package.json</code>的<code>version</code>或者<code>name</code>，使其升级或者不同名。</p><p>这不是我想要的结果呀，只能把代理先屏蔽掉：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim conf/config.yaml<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is the config file used for the docker images.</span><br><span class="hljs-comment"># It allows all users to do anything, so don&#x27;t use it on production systems.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Do not configure host and port under `listen` in this file</span><br><span class="hljs-comment"># as it will be ignored when using docker.</span><br><span class="hljs-comment"># see https://github.com/verdaccio/verdaccio/blob/master/wiki/docker.md#docker-and-custom-port-configuration</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Look here for more config file examples:</span><br><span class="hljs-comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># path to a directory with all packages</span><br>storage: /verdaccio/storage<br><br>auth:<br>  htpasswd:<br>    file: /verdaccio/conf/htpasswd<br>    <span class="hljs-comment"># Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br>    <span class="hljs-comment"># You can set this to -1 to disable registration.</span><br>    <span class="hljs-comment">#max_users: 1000</span><br>security:<br>  api:<br>    jwt:<br>      sign:<br>        expiresIn: 60d<br>        notBefore: 1<br>  web:<br>    sign:<br>      expiresIn: 7d<br><br><span class="hljs-comment"># a list of other known repositories we can talk to</span><br>uplinks:<br>  <span class="hljs-comment">#npmjs:</span><br>  <span class="hljs-comment"># url: https://registry.npmjs.org/</span><br>  <span class="hljs-comment">#cnpm:</span><br>  <span class="hljs-comment">#  url: http://r.cnpmjs.org/</span><br><br>packages:<br>  <span class="hljs-string">&#x27;@jota/*&#x27;</span>:<br>    access: <span class="hljs-variable">$all</span><br>    publish: <span class="hljs-variable">$all</span><br><br>  <span class="hljs-string">&#x27;@*/*&#x27;</span>:<br>    <span class="hljs-comment"># scoped packages</span><br>    access: <span class="hljs-variable">$all</span><br>    publish: <span class="hljs-variable">$all</span><br>    <span class="hljs-comment">#proxy: cnpm</span><br><br>  <span class="hljs-string">&#x27;**&#x27;</span>:<br>    <span class="hljs-comment"># allow all users (including non-authenticated users) to read and</span><br>    <span class="hljs-comment"># publish all packages</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># you can specify usernames/groupnames (depending on your auth plugin)</span><br>    <span class="hljs-comment"># and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br>    access: <span class="hljs-variable">$all</span><br><br>    <span class="hljs-comment"># allow all known users to publish packages</span><br>    <span class="hljs-comment"># (anyone can register by default, remember?)</span><br>    publish: <span class="hljs-variable">$all</span><br><br>    <span class="hljs-comment"># if package is not available locally, proxy requests to &#x27;npmjs&#x27; registry</span><br>    <span class="hljs-comment">#proxy: cnpm</span><br><br><span class="hljs-comment"># To use `npm audit` uncomment the following section</span><br>middlewares:<br>  audit:<br>    enabled: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># publish config</span><br><span class="hljs-comment">## Special packages publish configurations</span><br>publish:<br><span class="hljs-comment">## This will allow the publisher to publish packages even if any uplink is down.</span><br>  allow_offline: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># log settings</span><br>logs:<br>  - &#123; <span class="hljs-built_in">type</span>: stdout, format: pretty, level: trace &#125;<br>  <span class="hljs-comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br></code></pre></td></tr></table></figure><p>重启<code>verdaccio</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose restart verdaccio<br></code></pre></td></tr></table></figure><p>这样子再把代码推上去</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm publish --registry http://10.0.0.3:14873<br></code></pre></td></tr></table></figure><p>推上去之后再打开配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#</span><br><span class="hljs-comment"># This is the config file used for the docker images.</span><br><span class="hljs-comment"># It allows all users to do anything, so don&#x27;t use it on production systems.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Do not configure host and port under `listen` in this file</span><br><span class="hljs-comment"># as it will be ignored when using docker.</span><br><span class="hljs-comment"># see https://github.com/verdaccio/verdaccio/blob/master/wiki/docker.md#docker-and-custom-port-configuration</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Look here for more config file examples:</span><br><span class="hljs-comment"># https://github.com/verdaccio/verdaccio/tree/master/conf</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># path to a directory with all packages</span><br>storage: /verdaccio/storage<br><br>auth:<br>  htpasswd:<br>    file: /verdaccio/conf/htpasswd<br>    <span class="hljs-comment"># Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.</span><br>    <span class="hljs-comment"># You can set this to -1 to disable registration.</span><br>    <span class="hljs-comment">#max_users: 1000</span><br>security:<br>  api:<br>    jwt:<br>      sign:<br>        expiresIn: 60d<br>        notBefore: 1<br>  web:<br>    sign:<br>      expiresIn: 7d<br><br><span class="hljs-comment"># a list of other known repositories we can talk to</span><br>uplinks:<br>  <span class="hljs-comment">#npmjs:</span><br>  <span class="hljs-comment"># url: https://registry.npmjs.org/</span><br>  cnpm:<br>    url: http://r.cnpmjs.org/<br><br>packages:<br>  <span class="hljs-string">&#x27;@jota/*&#x27;</span>:<br>    access: <span class="hljs-variable">$all</span><br>    publish: <span class="hljs-variable">$all</span><br><br>  <span class="hljs-string">&#x27;@*/*&#x27;</span>:<br>    <span class="hljs-comment"># scoped packages</span><br>    access: <span class="hljs-variable">$all</span><br>    publish: <span class="hljs-variable">$all</span><br>    proxy: cnpm<br><br>  <span class="hljs-string">&#x27;**&#x27;</span>:<br>    <span class="hljs-comment"># allow all users (including non-authenticated users) to read and</span><br>    <span class="hljs-comment"># publish all packages</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># you can specify usernames/groupnames (depending on your auth plugin)</span><br>    <span class="hljs-comment"># and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;</span><br>    access: <span class="hljs-variable">$all</span><br><br>    <span class="hljs-comment"># allow all known users to publish packages</span><br>    <span class="hljs-comment"># (anyone can register by default, remember?)</span><br>    publish: <span class="hljs-variable">$all</span><br><br>    <span class="hljs-comment"># if package is not available locally, proxy requests to &#x27;npmjs&#x27; registry</span><br>    proxy: cnpm<br><br><span class="hljs-comment"># To use `npm audit` uncomment the following section</span><br>middlewares:<br>  audit:<br>    enabled: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># publish config</span><br><span class="hljs-comment">## Special packages publish configurations 重启`verdaccio`</span><br>publish:<br><span class="hljs-comment">## This will allow the publisher to publish packages even if any uplink is down.</span><br>  allow_offline: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># log settings</span><br>logs:<br>  - &#123; <span class="hljs-built_in">type</span>: stdout, format: pretty, level: trace &#125;<br>  <span class="hljs-comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span><br></code></pre></td></tr></table></figure><p>重启<code>verdaccio</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose restart verdaccio<br></code></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>这个配置里面，默认<code>verdaccio</code>是缓存下载过的公共包的，也就是说我们可以使用这个来加速安装包，这也是目前这个私有仓库最大的优势。verdaccio 还不能管理上传的包，功能还是很少，希望以后能有更多的功能吧。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tool</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux 美化之桌面系统</title>
    <link href="/posts/55a16da5.html"/>
    <url>/posts/55a16da5.html</url>
    
    <content type="html"><![CDATA[<p>用 archlinux 已经很多年了，换过很多种桌面环境，xfce，kde，dde 都使用过，并很长一段时间都是再用 xfce。</p><p>最近一个偶然机会发现 Budgie 这款桌面环境，自己折腾一天终于整好了。</p><span id="more"></span><h2 id="Desktop-environment（桌面环境）"><a href="#Desktop-environment（桌面环境）" class="headerlink" title="Desktop environment（桌面环境）"></a>Desktop environment（桌面环境）</h2><p>如上面所说，我选择使用 Budgie，这个桌面环境是基于 gnome 的，更多信息自己去 archlinux 的 wiki 或者 Budgie 的官网查询。</p><p>因为是 Archlinux，安装其实很简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S budgie-desktop \<br>budgie-extras \<br>vala-panel-appmenu-budgie-git \<br>budgie-screenshot-applet \<br>budgie-calendar-applet \<br>budgie-network-applet \<br>budgie-sntray-git \<br></code></pre></td></tr></table></figure><p>主要是<code>budgie-desktop</code>和<code>budgie-extras</code>，但是为了美观，还是安装了<code>appmenu</code>和一些<code>applet</code>。</p><p>如果你已经有自己的显示管理器，那基本上就能用了，当然有些像<code>xinit</code>还是需要自己手动修改<code>.xinitrc</code>文件使其生效的，然而我并没有使用这个。</p><h2 id="Display-manager（显示管理器）"><a href="#Display-manager（显示管理器）" class="headerlink" title="Display manager（显示管理器）"></a>Display manager（显示管理器）</h2><p>作为一个曾经写过前端的程序员，自然还是希望涉及 UI 界面时尽量是 web 了。巧了，<code>lightdm</code>就有 webkit2 的 greeter，而且也找到了一个很好看的<code>lightdm</code>的主题 <a href="https://github.com/Litarvan/lightdm-webkit-theme-litarvan">lightdm-webkit-theme-litarvan</a></p><p>这个安装也很简单：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S lightdm lightdm-webkit2-greeter lightdm-webkit-theme-litarvan<br></code></pre></td></tr></table></figure><p>为了使得<code>lightdm</code>开机生效，我们还需要执行下面的操作，让服务开机启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> lightdm.service<br></code></pre></td></tr></table></figure><p>接着配置<code>/etc/lightdm/lightdm.conf</code>，让<code>lightdm</code>使用刚刚安装的<code>lightdm-webkit2-greeter</code>，找到<code>greeter-session=</code>，改成下面这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Seat:*]<br>greeter-session=lightdm-webkit2-greeter<br></code></pre></td></tr></table></figure><p>还有接着修改<code>/etc/lightdm/lightdm-webkit2-greeter.conf</code>，使用<code>lightdm-webkit-theme-litarvan</code>主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[greeter]<br>webkit_theme        = litarvan<br></code></pre></td></tr></table></figure><p>这样子启动就会使用 Budgie 桌面系统了。</p><h2 id="Desktop-theme"><a href="#Desktop-theme" class="headerlink" title="Desktop theme"></a>Desktop theme</h2><p>安装好桌面系统，但是桌面主题还是要美化的嘛。只要主题美化的好，颜值可不比 windows 差，更何况我使用的是 mac 的主题（手动狗头）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S mojave-gtk-theme-git numix-circle-icon-theme-git<br></code></pre></td></tr></table></figure><p>恩，我这里也并没有使用<code>mcmojave-circle-icon-theme-git</code>之类的<code>mojave</code>图标，而是使用看起来更扁平化的<code>numix-circle-icon-theme-git</code>。</p><p>emmmmmm，鼠标样式也要改一下，要和桌面搭配上嘛不是。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S capitaine-cursors<br></code></pre></td></tr></table></figure><p>哦，这个配置嘛，需要先启动 Budgie 桌面系统，使用<code>Budgie 桌面设置</code>完成，所有先保证自己的桌面系统是可以使用的。很多有趣的配置，自己在<code>Budgie 桌面设置</code>中发现。</p><h2 id="grub-theme"><a href="#grub-theme" class="headerlink" title="grub theme"></a>grub theme</h2><p>既然是说到美化，那顺便把 grub 的主题也给美化了吧。</p><p>我是在 github 上找的 grub theme 主题：<a href="https://github.com/lfelipe1501/Atomic-GRUB2-Theme">Atomic-GRUB2-Theme</a>。可以直接 clone 或者下载 zip 包，然后解压出来，使用命令拷贝整个项目到<code>/boot/grub/themes</code>下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -r /home/bubao/Downloads/Atomic  /boot/grub/themes<br></code></pre></td></tr></table></figure><p>然后修改<code>/etc/defaults/grub</code>配置，使得<code>grub</code>能使用到这个主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">GRUB_THEME=<span class="hljs-string">&quot;/boot/grub/themes/Atomic/theme.txt&quot;</span><br></code></pre></td></tr></table></figure><p>最后使用命令使得修改生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为了使得主题和 mac 更接近一步，还可以自己安装其他的软件进一步美化。</p><h3 id="plack"><a href="#plack" class="headerlink" title="plack"></a>plack</h3><p>为了使得主题和 mac 更接近一步，我们装个软件模仿 mac 上的 dock:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S plank<br></code></pre></td></tr></table></figure><p>当然，你也可以为这个软件安装别的主题，直接在 github 上搜索<code>plank theme</code>。</p><p>为了能让<code>plank</code>开机启动，还是需要安装<code>gnome-tweaks</code>进行设置的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S gnome-tweaks<br></code></pre></td></tr></table></figure><h3 id="budgie-applet"><a href="#budgie-applet" class="headerlink" title="budgie applet"></a>budgie applet</h3><p>除了上面我提到的<code>applet</code>，其实还有很多<code>applet</code>可以安装，可以通过下面的命令找到相关的软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay budgie applet<br></code></pre></td></tr></table></figure><p>最后的桌面就是这样的。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210121121305.png" alt="archlinux"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个月不用 windows 之后</title>
    <link href="/posts/6fbbac38.html"/>
    <url>/posts/6fbbac38.html</url>
    
    <content type="html"><![CDATA[<p>刚刚从云南回来，电脑上的 windows 就不能用了，但因为一直使用的是 linux，所有也一直没重装系统。昨天把 windows 装回来后，一切都不一样了呢。</p><span id="more"></span><h2 id="好多应用都不能用了"><a href="#好多应用都不能用了" class="headerlink" title="好多应用都不能用了"></a>好多应用都不能用了</h2><p>我很长一段时间都是使用 linux 开发，能让我切回 windows 主要是有一些应用在 linux 上用不了。然而这次重装回来后，很多想用的应用都用不了了。</p><h3 id="人人影视"><a href="#人人影视" class="headerlink" title="人人影视"></a>人人影视</h3><p>一直都在人人影视上下载美剧到本地服务器上，等到有空就本地刷剧。</p><p>2021 年，这家伙居然黄了？</p><h3 id="速盘"><a href="#速盘" class="headerlink" title="速盘"></a>速盘</h3><p>百度云盘这龟速，好不容易有个能正常下载资源的应用，现在也不能用了。那只好不用百度云盘咯。</p><h3 id="eva"><a href="#eva" class="headerlink" title="eva"></a>eva</h3><p>这是我自己用 nodejs 开发的命令行工具，很长一段时间都是在 linux 开发和使用。这次安装回 windows，自然也安装自己的工具了。然而新开发的功能居然不能在 windows 上使用？</p><p>nodejs 这是对 windows 有偏见么？这是给我学 go 的理由了么？</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>无之前把照片放 github 上做图传供博客使用，但是在 windows 上就是 clone 不下来。所有不仅仅是 nodejs 有偏见，git 也有是么？</p><h2 id="windows-操作不如-linux"><a href="#windows-操作不如-linux" class="headerlink" title="windows 操作不如 linux"></a>windows 操作不如 linux</h2><p>昨天安装 DBeaver 的时候，因为要破*，找了教程，走了一遍，发现各种问题，虽然最后还是搞定了，但是和 linux 那种便捷的操作比起来，windows 真的太麻烦了。</p><p>最后，果然还是 linux 使用比较舒服呢。</p>]]></content>
    
    
    <categories>
      
      <category>吐槽</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 安装 DBeaver 的坑</title>
    <link href="/posts/bf40cbdf.html"/>
    <url>/posts/bf40cbdf.html</url>
    
    <content type="html"><![CDATA[<p>DBeaver 是一个通用的数据库管理工具，和 Navcat 有的一拼，主要是支持 Linux。</p><p>之前在 Linux 安装过一次，很简单，包括破解都是一次过。但是今天在 windows 上安装时，遇到各种问题。</p><span id="more"></span><h2 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h2><p>很久没弄 java 了，jre 和 jdk 都分不清，还好 windows 直接可以去官网下载安装包。</p><h2 id="安装-DBeaver"><a href="#安装-DBeaver" class="headerlink" title="安装 DBeaver"></a>安装 DBeaver</h2><p>DBeaver EE 是商业版，有更多的功能，但是收费，不过还好有大佬出教程：<a href="https://zhile.io/2019/05/08/dbeaver-license-crack.html">DBeaver Enterprise 7.3 企业版激活方法</a>，文章中有链接供下载。</p><h2 id="讲点细节"><a href="#讲点细节" class="headerlink" title="讲点细节"></a>讲点细节</h2><p>我按着教程做了，但是还是启动不了，其实问题基本上有三个：</p><ol><li>java 版本和 DBeaver 不符</li><li>DBeaver 使用自带的 jre</li><li>agent 不对。</li></ol><h3 id="版本不对"><a href="#版本不对" class="headerlink" title="版本不对"></a>版本不对</h3><p>我安装的 java 是 32 位的，DBeaver 是 64 位的，起初没有发现，不过 DBeaver 有报错，而且这个问题还是挺常见的，把 java 换成 64 位的包就解决了。</p><h3 id="自带-jre"><a href="#自带-jre" class="headerlink" title="自带 jre"></a>自带 jre</h3><p>DBeaver Installer 这种是带有 jre 文件夹的，自带的 jre 貌似跑不了 agent.jar。</p><p>解决方案就是把自带的 jre 文件夹删掉，改<code>dbeaver.ini</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini">-startup<br>plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar<br>--launcher.library<br>plugins/org.eclipse.equinox.launcher.win32.win32.x86_64_1.1.1100.v20190907-0426<br>-vmargs<br>-XX:+IgnoreUnrecognizedVMOptions<br><span class="hljs-attr">--add-modules</span>=ALL-SYSTEM<br>-Xms128m<br>-Xmx521m<br>-javaagent:D:\software\DBeaverEE\dbeaver-agent.jar<br>-vm:C:\Program Files\Java\jre1.8.0_231\bin\javaw.exe<br></code></pre></td></tr></table></figure><p>最后两行是添加的，改成自己系统的路径就行。</p><h3 id="angen-jar-错误"><a href="#angen-jar-错误" class="headerlink" title="angen.jar 错误"></a>angen.jar 错误</h3><p>我因为前面的问题，我已经把教程下载的 angen.jar 换成在 github 下的 jar 包，一直启动不了，我就开始怀疑是不是 jar 也有问题，于是把 jar 包换回来，搞定。</p><h3 id="linux-上选择正确的-java"><a href="#linux-上选择正确的-java" class="headerlink" title="linux 上选择正确的 java"></a>linux 上选择正确的 java</h3><p>更新 linux 上的 dbeaver 的时候，修改<code>dbeaver.ini</code>文件添加</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+-javaagent:/home/bubao/Data/dbeaver-agent/dbeaver-agent.jar</span><br><span class="hljs-addition">+-vm:/usr/lib/jvm/java-15-openjdk/bin/java</span><br></code></pre></td></tr></table></figure><p>还是不能正常运行，于是就去<code>/usr/share/applications/dbeaver-ee.desktop</code>中修改</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff">[Desktop Entry]<br><span class="hljs-addition">+Exec=/opt/dbeaver-ee/dbeaver -vm /usr/lib/jvm/java-16-openjdk/bin/java</span><br><span class="hljs-deletion">-Exec=/opt/dbeaver-ee/dbeaver</span><br>Type=Application<br>Terminal=false<br>Icon=dbeaver-ee<br>Categories=Development;Java;Database;<br><br>Name=DBeaver Enterprise Edition<br>GenericName=Database Client<br></code></pre></td></tr></table></figure><p>或者可以使用这个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">javaPath=$(whereis java | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span>)<br><br>sed -i <span class="hljs-string">&quot;2c Exec=/opt/dbeaver-ee/dbeaver -vm <span class="hljs-variable">$javaPath</span>&quot;</span> /usr/share/applications/dbeaver-ee.desktop<br><br>sed -i <span class="hljs-string">&#x27;11c -javaagent:/home/bubao/Data/dbeaver-agent/dbeaver-agent.jar&#x27;</span> /opt/dbeaver-ee/dbeaver.ini<br><br>sed -i <span class="hljs-string">&#x27;12c -vm:&#x27;</span><span class="hljs-variable">$javaPath</span> /opt/dbeaver-ee/dbeaver.ini<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo+github+jsdelivr 搭建免费图床</title>
    <link href="/posts/52b7e24d.html"/>
    <url>/posts/52b7e24d.html</url>
    
    <content type="html"><![CDATA[<p>自从七牛不提供免费域名之后，我的博客都是纯文字。最近 2020 年末去了一趟云南后，还是把照片用本文的方式上传到 github 上。</p><span id="more"></span><h2 id="PicGo-安装"><a href="#PicGo-安装" class="headerlink" title="PicGo 安装"></a>PicGo 安装</h2><p>安装官方已经有教程了，这里就直接贴出超链：</p><p><a href="https://picgo.github.io/PicGo-Doc/">PicGo 官方教程</a></p><h2 id="github-图床配置"><a href="#github-图床配置" class="headerlink" title="github 图床配置"></a>github 图床配置</h2><p>github 图床的配置官方也有：</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">GitHub 图床配置</a></p><h2 id="jsdelivr-配置"><a href="#jsdelivr-配置" class="headerlink" title="jsdelivr 配置"></a>jsdelivr 配置</h2><p>在<code>设定自定义域名</code>的位置添加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://cdn.jsdelivr.net/username/reponame<br></code></pre></td></tr></table></figure><p>其中<code>username/reponame</code>和<code>设置仓库名</code>中的内容一致</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117055647.png" alt="设定自定义域名"></p><p>另外，在<code>PicGo 设置</code>中设置<code>自定义链接格式</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117055903.png" alt="自定义链接格式"></p><p>可直接使用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![$fileName]($url)<br></code></pre></td></tr></table></figure><p>最后选中<code>Custom</code>，上传完成后直接得到 markdown 格式的链接。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117060658.png" alt="选中 Custom"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>MarkDown</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观《好久不见，武汉》</title>
    <link href="/posts/d22a6f94.html"/>
    <url>/posts/d22a6f94.html</url>
    
    <content type="html"><![CDATA[<p>2020 年，一个叫做方方的作家写了本《方方日记》，很多外媒就通过这本书里的描述指责中国不人道。现在《方方日记》中的描述成了国外民众眼前的现实，甚至更严重。我没读过《方方日记》，我也知道媒体有些东西在当时的情况下是没办法向国人透露的。现在武汉解封，我也想知道武汉怎么了。</p><span id="more"></span><p>2020 年大年初一 (2020-1-25) 下午，湛江徐闻对要渡船前往海口的武汉籍车辆进行拦截，并安置好滞留在当地的武汉籍游客，接着，湛江其他地区也对要离湛江的武汉籍车辆进行拦截，并对滞留在湛江的武汉籍旅客设置了安置点。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210116010403.webp" alt="电影海报"></p><p>身边的人说，武汉都封城了，武汉人还跑出来，这不是传播病毒么。可是在开始设安置点之前，武汉人离开了武汉，到哪都像是过街老鼠，真的并不好受。2020 前半年，只要听到对方是武汉人，大部分人心里都会紧一下，仿佛武汉人就是和疫情有关一样。影片中那个建设雷神山医院的工人说到即使复工，做出来的东西别人一听产地是武汉，就不要了。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210116010530.webp" alt="“我做过核酸检测了”"></p><blockquote><p>摘抄自电影导演竹内亮在豆瓣上对电影的长评 <a href="https://movie.douban.com/review/12693574/">《我们担心辜负武汉》</a></p><p><strong>他说的一句话，让我印象深刻。节目里也有，就是他跟我见面说的第一句话，“我做过核酸检测的”。</strong></p><p><strong>感觉到武汉人心里的担心。我觉得没问题，但是他们怕我们怕，他们担心我们会怕。</strong></p></blockquote><p>其实这次疫情，不仅仅影响了武汉，全国各地，各个行业都受到影响。我在家远程工作一段时间后，又回公司一段时间。家在十八线小县城其实感觉并不是很明显，广州就明显多了。往常人流很多的地铁，疫情期间人很少，大家尽量站着，把作为留给需要的人，即使是做着的乘客，都自觉隔开一个人的距离。中午吃饭，几乎不允许堂食，只能打包。走在路上，经常能听到疫情防控的广播。12 月去云南旅游，机场，火车站，客运站的安检很严格，即使是扫脸过门禁，扫完也要马上戴上口罩。景区人很少，餐饮业也很难熬，很多店面都贴着转让的联系方式，能撑下来的店也不容易。而这部片子里看到的武汉，也是我看到的广州和云南的情况。</p><p>这部片子，其实和那些大制作的纪录片不同，甚至都不能算是常规的电影。更像是 b 站 up 主几个人拍的小长片，很自然，很真实。</p>]]></content>
    
    
    <categories>
      
      <category>观影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观《在京都小住》</title>
    <link href="/posts/a607aaa8.html"/>
    <url>/posts/a607aaa8.html</url>
    
    <content type="html"><![CDATA[<p>这部电影让我想起自己前不久的云南之旅，准确的说是在束河古镇的日子。古镇没有大超市，只有小卖部。古镇很小，除非赶时间，否则是不会用手机导航的。虽然打开美团就能知道附近有什么推荐的美食，但我还是喜欢靠鼻子和脚去找。</p><span id="more"></span><p>这是一部隔着屏幕都能闻到香气的电影。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115182038.jpg" alt="温馨"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115183133.webp" alt="恬静的京都房间"></p><p>一直很喜欢日式的房子，不管是大雄家的现代日式别墅，还是龙猫里面的乡下老别墅，奈何自己住的地方每年都有台风，雨水也多。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115183004.webp" alt="鳗鱼"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115183027.webp" alt="鳗鱼"></p><p>看到这个又想吃鳗鱼饭了。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115183054.webp" alt="安逸"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115183112.webp" alt="精致"></p><p>这部电影除了两名主演，其他的演员能让观众感觉到这是纪录片，但是就是这种感觉，才显得自然，真实。</p>]]></content>
    
    
    <categories>
      
      <category>观影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wifi 二维码生成</title>
    <link href="/posts/47df24a0.html"/>
    <url>/posts/47df24a0.html</url>
    
    <content type="html"><![CDATA[<p>小米手机的 wifi 可以生成二维码，通过扫码连接 wifi。当然，凡事都是两面性，好的方面，当然是即使忘记密码，也能让另一台手机连上网络，而且不用手输入密码；而坏的方面是，二维码是可解析的，知道二维码就知道 wifi 的密码。</p><span id="more"></span><h2 id="二维码知识"><a href="#二维码知识" class="headerlink" title="二维码知识"></a>二维码知识</h2><blockquote><p>本节内容来自 <a href="http://pro.wwei.cn/open/qrcode_format.html">二维码知识</a></p></blockquote><h3 id="二维码格式"><a href="#二维码格式" class="headerlink" title="二维码格式"></a>二维码格式</h3><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>文本 text</td><td>直接生成，无需处理</td></tr><tr><td>网址 url</td><td>直接生成，无需处理（如果前缀加上 url: 在微信中不能自动跳转）</td></tr><tr><td>名片 mecard</td><td>MECARD:N: 小明；TEL:13723456789;EMAIL:<a href="mailto:&#112;&#x61;&#121;&#x6f;&#110;&#x65;&#115;&#x6d;&#105;&#x6c;&#x65;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#112;&#x61;&#121;&#x6f;&#110;&#x65;&#115;&#x6d;&#105;&#x6c;&#x65;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a>;ADR: 广州天河区；ORG:xx 有限公司；URL:<a href="http://pro.wwei.cn/;NOTE:QQ%EF%BC%9A13783821">http://pro.wwei.cn/;NOTE:QQ：13783821</a>;</td></tr><tr><td>电话 tel</td><td>tel:13723456789</td></tr><tr><td>邮箱 mail</td><td>mailto:<a href="mailto:&#x70;&#97;&#121;&#x6f;&#x6e;&#101;&#x73;&#x6d;&#x69;&#x6c;&#x65;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;">&#x70;&#97;&#121;&#x6f;&#x6e;&#101;&#x73;&#x6d;&#x69;&#x6c;&#x65;&#x40;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></td></tr><tr><td>短信 sms</td><td>smsto:13723456789: 短信内容</td></tr><tr><td>无线网络 WIFI</td><td>WIFI:S:CMCC;P:123456;T:WPA&#x2F;WPA2;</td></tr></tbody></table><h3 id="二维码纠错级别"><a href="#二维码纠错级别" class="headerlink" title="二维码纠错级别"></a>二维码纠错级别</h3><p>纠错级别越高，生成图片会越大。</p><blockquote><p>L 水平 7%的字码可被修正</p><p>M 水平 15%的字码可被修正</p><p>Q 水平 25%的字码可被修正</p><p>H 水平 30%的字码可被修正</p></blockquote><h2 id="WIFI-二维码"><a href="#WIFI-二维码" class="headerlink" title="WIFI 二维码"></a>WIFI 二维码</h2><blockquote><p>本节内容来自 <a href="https://github.com/zxing/zxing/wiki/Barcode-Contents">https://github.com/zxing/zxing/wiki/Barcode-Contents</a></p></blockquote><p>We propose a syntax like “MECARD” for specifying wi-fi configuration. Scanning such a code would, after prompting the user, configure the device’s Wi-Fi accordingly. Example:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">WIFI:T:WPA;S:mynetwork;P:mypass;;<br></code></pre></td></tr></table></figure><table><thead><tr><th>Parameter</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>T</td><td>WPA</td><td>Authentication type; can be <code>WEP</code> or <code>WPA</code> or <code>WPA2-EAP</code>, or <code>nopass</code> for no password. Or, <code>omit</code> for no password.</td></tr><tr><td>S</td><td>mynetwork</td><td>Network SSID. <strong>Required</strong>. Enclose in double quotes if it is an ASCII name, but could be interpreted as hex (i.e. “ABCD”)</td></tr><tr><td>P</td><td>mypass</td><td>Password, ignored if T is nopass (in which case it may be omitted). Enclose in double quotes if it is an ASCII name, but could be interpreted as hex (i.e. “ABCD”)</td></tr><tr><td>H</td><td>true</td><td><strong>Optional</strong>. True if the network SSID is hidden. Note this was mistakenly also used to specify phase 2 method in releases up to 4.7.8 &#x2F; Barcode Scanner 3.4.0. If not a boolean, it will be interpreted as phase 2 method (see below) for backwards-compatibility</td></tr><tr><td>E</td><td>TTLS</td><td>(WPA2-EAP only) EAP method, like TTLS or PWD</td></tr><tr><td>A</td><td>anon</td><td>(WPA2-EAP only) Anonymous identity</td></tr><tr><td>I</td><td>myidentity</td><td>(WPA2-EAP only) Identity</td></tr><tr><td>PH2</td><td>MSCHAPV2</td><td>(WPA2-EAP only) Phase 2 method, like MSCHAPV2</td></tr></tbody></table><p>Order of fields does not matter. Special characters <code>\</code>, <code>;</code>,<code> </code>, and <code>:</code> should be escaped with a backslash (<code>\</code>) as in MECARD encoding. For example, if an SSID was literally <code>&quot;foo;bar\baz&quot;</code> (with double quotes part of the SSID name itself) then it would be encoded like: <code>WIFI:S:&quot;foo\;bar\\baz&quot;;;</code></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这里就不描述如何编写的了，代码在 <a href="https://github.com/bubao/eva">github 开源</a>，下面演示一下：</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115023215.png" alt="生成二维码"></p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 爬虫：抓取树莓派杂志</title>
    <link href="/posts/17656301.html"/>
    <url>/posts/17656301.html</url>
    
    <content type="html"><![CDATA[<p>之前买了一块树莓派 3B+，就经常光顾树莓派的官网，偶然发现树莓派官网的杂志能免费下载，于是就想把杂志都下载下来，但是又不想自己手动一个个下载，就有了写爬虫抓取的想法。</p><span id="more"></span><p>本来是想用 nodejs 写的，但是因为 nodejs 写的话，需要安装 nodejs 环境。于是用 shell 写了一个。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;start&#x27;</span><br>curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://www.raspberrypi.org/magpi-issues/ &gt; <span class="hljs-string">&quot;test.html&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;get html end&#x27;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#x27;</span> &gt; <span class="hljs-string">&#x27;1.txt&#x27;</span><br><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> $( <span class="hljs-built_in">cat</span> test.html | grep -Eo <span class="hljs-string">&quot;&lt;a href=\&quot;.*pdf\&quot;&gt;&quot;</span> | sed -r <span class="hljs-string">&#x27;s/&lt;a href=\&quot;(.*pdf)\&quot;&gt;/\1/g&#x27;</span> )<br><span class="hljs-comment"># for name in $( cat test.html | sed -r &#x27;s/&lt;a href=\&quot;(.*pdf)\&quot;&gt;/\1/g&#x27; )</span><br><span class="hljs-comment"># for name in $( sed -r &#x27;s/&lt;a href=\&quot;(.*pdf)\&quot;&gt;/\1/g&#x27; test.html )</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> https://www.raspberrypi.org/magpi-issues/<span class="hljs-variable">$name</span> &gt;&gt; <span class="hljs-string">&#x27;1.txt&#x27;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\tdir=./Magpi&quot;</span> &gt;&gt; <span class="hljs-string">&#x27;1.txt&#x27;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\tout=<span class="hljs-variable">$name</span>&quot;</span> &gt;&gt; <span class="hljs-string">&#x27;1.txt&#x27;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;test.html&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;aria2c -c -j5 -x10 -s4 -i 1.txt --all-proxy=&quot;http://127.0.0.1:8888&quot; &amp;&amp; rm -rf 1.txt&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将网页下载到本地，并用<code>grep</code>把需要的内容选出来，构建<code>aria2c</code>的下载文件，并打印最后下载的命令。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再看《后会无期》</title>
    <link href="/posts/dce95daf.html"/>
    <url>/posts/dce95daf.html</url>
    
    <content type="html"><![CDATA[<p>2014 年电影刚刚出的时候，我就和我最好的同学去电影院看了一遍。当时只是觉得韩寒的金句很搞笑，2020 年末从云南旅游回来，再刷一遍时，每一句以前看来很搞笑的话，字字扎心。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210105203648.jpg" alt="后会无期海报"></p><span id="more"></span><h2 id="胡生乌鸦嘴"><a href="#胡生乌鸦嘴" class="headerlink" title="胡生乌鸦嘴"></a>胡生乌鸦嘴</h2><p><strong>后会无期</strong> 这部电影中，胡生只有在电影前面有戏，但胡生说的话总会成真。</p><h3 id="浩汉烧房子"><a href="#浩汉烧房子" class="headerlink" title="浩汉烧房子"></a>浩汉烧房子</h3><p>在离开东极岛前，浩汉把自己的房子烧了</p><blockquote><p>胡生：江老师，你说浩汉哥为什么要把自己的房子烧了呢？这火要是大了，会不会烧到周沫姐姐和我家啊？反正我就希望我那栋小房子能一直留着。</p><p>浩汉：带不走的留不下，留不下的别牵挂。我爸生前说的。</p><p>江河：可你把自己家都烧了，不会后悔吧。</p><p>浩汉：不会</p><p>胡生：哥，你家的煤气罐搬出来了没有</p><p>浩汉：没有</p></blockquote><p>浩汉说完，煤气罐爆炸，浩汉的家没倒，胡生和周沫的家被震塌了。</p><h3 id="胡生走丢了"><a href="#胡生走丢了" class="headerlink" title="胡生走丢了"></a>胡生走丢了</h3><p>浩汉带江河和胡生到车库看车的时候，胡生问浩汉，江河给胡生的回复。</p><blockquote><p>胡生：哥，我还是有点担心，这一路上几千公里，万一我走丢了怎么办。</p><p>江河：这个你不用担心，总共是三千九百八十公里，无论你在哪公里走丢，只要回原地等就可以，至于其他的，我都安排好了。</p></blockquote><p>第一天晚上入宿，胡生出去抽烟，江河在垃圾桶里捡到一张卡片，电话都没打，就被苏米自己找上门了，假警察查房，江河和浩汉带着苏米逃跑，把胡生给忘了，最后胡生返回东极岛等浩汉和江河。</p><p>而从开场胡生的独白，也可知道浩汉和江河也一直没有回去找过胡生。</p><h2 id="感触的对白"><a href="#感触的对白" class="headerlink" title="感触的对白"></a>感触的对白</h2><h3 id="故乡的一切都和你想象当中都是不一样"><a href="#故乡的一切都和你想象当中都是不一样" class="headerlink" title="故乡的一切都和你想象当中都是不一样"></a>故乡的一切都和你想象当中都是不一样</h3><blockquote><p>浩汉：离开故乡一段时间后再回来。你就会发现，原来这栋楼这么小，这棵树这么矮，这段路这么短，这条街这么窄，总之故乡的一切都和你想象当中都是不一样的了。</p><p>胡生：什么意思？</p><p>浩汉：我的意思是，我把这辆车运回岛上之后才发现，妈的路还没车宽。</p></blockquote><p>离乡工作也几年，再次回家，真的有浩汉说的那种感觉。小县城，连地铁都不需要，徒步可丈量。多少有点伤感，但也有些欣慰。</p><h3 id="背井离乡的人"><a href="#背井离乡的人" class="headerlink" title="背井离乡的人"></a>背井离乡的人</h3><blockquote><p>周沫：日子过得就这样啊，温水煮青蛙。哎，其实大城市就和这个大片场差不多，没什么大意思。</p><p>江河：那你为什么还出来？</p><p>周沫：哦，江河我告诉你啊，在小地方想往上爬，得靠人际关系，家庭势力，在大城市，起码公平一点嘛，懂不懂啊。哎，是吧？</p><p>浩汉：恩，是啊。但在大城市里，你如果有关系有势力的话，就会比别人更公平。</p><p>周沫：反正啊，背井离乡就得要出人头地，哎，是吧。</p><p>江河：我的工作都是分配的，我觉得安静的地方挺好，我也不太喜欢往上爬。</p><p>周沫：你一个男人，这么不思进取啊，不进则退，你不往上爬，就会往下掉。不过无所谓啊，人各有志，各取所需。你看我就很想得开，我明年会去一个地方当主持人，也有几部戏，过来找我演，有台词的。</p><p>江河：对，慢慢来。</p></blockquote><p>周沫对江河说的话，其实只是一个背井离乡的人安慰自己的话：<strong>在小地方想往上爬，得靠人际关系，家庭势力，在大城市，起码公平一点嘛</strong>。<br>而从异乡回到故乡，却无家可归的浩汉说：<strong>但在大城市里，你如果有关系有势力的话，就会比别人更公平。</strong><br>周沫补上一句：<strong>背井离乡就得要出人头地</strong>。这句话说出了多少背井离乡人的心里话，不混出个名堂来，都不敢回家。</p><h3 id="你以为我有的选啊"><a href="#你以为我有的选啊" class="headerlink" title="你以为我有的选啊"></a>你以为我有的选啊</h3><blockquote><p>浩汉：这身衣服没有刚才那件好看。</p><p>周沫：这衣服也不合身，头发还是假的。你以为我有的选啊</p></blockquote><p>有了欲望，为了生活，很多时候我们没得选。</p><h3 id="只要把门关紧，风雨都是进不来的"><a href="#只要把门关紧，风雨都是进不来的" class="headerlink" title="只要把门关紧，风雨都是进不来的"></a>只要把门关紧，风雨都是进不来的</h3><blockquote><p>江河：在我小时候，经常被同学排挤，那时候我觉得，只要把门关紧，风雨都是进不来的，但是今天，我发觉这句话是错的。</p></blockquote><h3 id="告别"><a href="#告别" class="headerlink" title="告别"></a>告别</h3><blockquote><p>江河：浩汉，你跟刘莺莺怎么样了</p><p>浩汉：没事，还是送你去入职要紧。你那书构思的怎么样了。我刚才帮你把结尾想好了，你听着啊。真没想到我们在这样一个地方告别，但跟人告别的时候吧，还是得用力一点。因为你多说一句，说不定就是最后一句；多看一眼，弄不好就是最后一眼。</p></blockquote><h2 id="电影中诡异的点"><a href="#电影中诡异的点" class="headerlink" title="电影中诡异的点"></a>电影中诡异的点</h2><p>电影随着时间推进，诡异的点越来越离谱。</p><h3 id="周沫替身留长发"><a href="#周沫替身留长发" class="headerlink" title="周沫替身留长发"></a>周沫替身留长发</h3><p>周沫出场的第一个镜头就是在当替身演员，一头黑直长，但是演员却是盘发。</p><h3 id="狗跑到楼外沿"><a href="#狗跑到楼外沿" class="headerlink" title="狗跑到楼外沿"></a>狗跑到楼外沿</h3><p>在苏米的家人来接苏米时，有只狗在加油站的楼的外墙的墙沿外。</p><h3 id="在野外捡到一只幼年阿拉斯加"><a href="#在野外捡到一只幼年阿拉斯加" class="headerlink" title="在野外捡到一只幼年阿拉斯加"></a>在野外捡到一只幼年阿拉斯加</h3><p>在浩汉见完刘莺莺后，得知真相的浩汉一路消沉，车内关着门窗放着 __女儿情__。最后浩汉还是中断了收音机，和江河唱许巍的 __旅行__，没唱两句就出车祸了，在路边捡到了这只年幼的阿拉斯加。</p><h3 id="沙漠中的铁皮房"><a href="#沙漠中的铁皮房" class="headerlink" title="沙漠中的铁皮房"></a>沙漠中的铁皮房</h3><p>浩汉的车被阿吕骗走后，浩汉和江河在隔壁沙漠上行走，在沙漠中的铁皮房中度过了一夜。而铁皮房中还要新鲜的苹果和一鱼缸的水，水里还要几只青蛙。</p>]]></content>
    
    
    <categories>
      
      <category>观影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我把旅途当修行</title>
    <link href="/posts/f5fabb5c.html"/>
    <url>/posts/f5fabb5c.html</url>
    
    <content type="html"><![CDATA[<p>人做每一件事，都需要一些说服自己的理由。而我把旅途当修行。</p><p>旅行不是为了看到不同的事物，而是为了学会不同地看待事物。Yon don’t travel to see different things, you travel to see things differently. ©Ben Davenpor</p><span id="more"></span><p>我生长在一个沿海的亚热带半岛上，小县城就这么大，徒步也就一个小时就能贯穿。热带水果，海鲜应有尽有，我为什么要离开这里，去别的地方旅游？</p><p>在旅途中，每当听到别人讨论关于旅行的意义时，大多数人的回答不外乎是：为了逃离现有压抑的环境，用旅游放松自己。</p><p>的确，逃避是最快速让人从负面情绪逃离出来的的方式。但，这不是我面对问题的方式。遇到问题，想办法去解决问题，这才是我的方式。毕竟问题不解决，问题会一直在那，始终还是需要面对。</p><p>让我萌生去旅行的想法的是几年前读过的一本书：<strong>人生所有经过的路，都是必经之路</strong></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117063854.jpeg" alt="人生所有经过的路，都是必经之路"></p><p>我旅行的目的不是为了去放松，也不是去看美景，吃美食，只是想把自己置身到一个陌生的环境中，感受别人面对生活的态度。<strong>佛本无相，以众生相为其相</strong>，我在旅途中遇到的人都是菩萨。<strong>人间本就修罗场</strong>，并不是旅游才是修行，在日常的生活中，我就已经在修行。只是我辞掉了工作去旅行的时候，让自己把更多的精力放在这陌生的环境中。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">春有百花秋有月，夏有凉风冬有雪，<br>若无闲事挂心头，便是人间好时节。<br>——无门慧开禅师<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云南游记之玉龙雪山</title>
    <link href="/posts/e923cd63.html"/>
    <url>/posts/e923cd63.html</url>
    
    <content type="html"><![CDATA[<p>玉龙雪山是我来丽江最想去的景点，这也是我第一次离海平面超过 4000 米，也是我第一次看到雪。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234211.jpg" alt="玉龙雪山山脚下"></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231212714.jpg" alt="玉龙雪山 1"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234257.jpg" alt="玉龙雪山 2"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234342.jpg" alt="玉龙雪山 3"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234410.jpg" alt="玉龙雪山 4"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234435.jpg" alt="玉龙雪山 5"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234511.jpg" alt="玉龙雪山 6"></p><p>祭出攻略。</p><h2 id="攻略"><a href="#攻略" class="headerlink" title="攻略"></a>攻略</h2><p>我是从丽江的束河古镇出发的，毕竟是第一次登雪山，还是要做些准备。</p><p>在束河古镇的超市里买了两根士力架，因为我没有吃早餐的习惯，担心上山后低血糖。我在客栈里煮好水装到保温杯里。穿一件羽绒服、一件夹克、一件打底衫和一件绒长裤。出发前，我的背包里除了刚刚买的士力架和保温杯，还有帽子，口罩，充电宝。</p><p>现在滴滴打车很方便了，也就 70+，千万不要坐这里的的士（貌似现在在哪都不建议坐的士了）。</p><p>玉龙雪山的冰川公园索道可以在小程序丽江旅游集团购买，如果是节假日，很可能就没票了。玉龙雪山公园门票 50（今年疫情影响降到 50，明年估计 100 了）。</p><p>恩？等等，算下来，如果不是自驾的话，其实抱团更加方便。我之前抱团是 350 一人，接送到玉龙雪山大巴接送站（离大门有点距离的），最后接送回束河古镇，包含防寒衣，大罐氧气。</p><p>索道的缆车里，最多坐 8 人，6 个人是最舒服的。因为高空的气压低，导致耳内压不平衡，可以通过吞咽来缓解。可能会感觉胸闷，头晕的情况，这些都是正常的反应。</p><p>到达玉龙雪山栈道，一定要慢慢爬，时刻注意自己的嘴唇是否呈现黑紫色，呼吸和心跳是否过快。一旦出现上述情况，可以先站在原地深呼吸，直到自己心率慢下来，再往前走。如果实在难受，就需要吸氧，甚至放弃登顶。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231234551.jpg" alt="玉龙雪山上的垃圾收集"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我生活在丘陵地带，可以说这是第一次爬山，至少我觉得越秀公园不算山。</p><p>我也不知道高反是什么样的，至少在我登山之前并没有很明显的，只是带过来的威化饼包装都膨胀了。所以在登山之前，除了兴奋，还是有点忐忑的，不知道自己能否登顶。为了这次登山，我还是去健身房做了两个月准备。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117072504.jpg" alt="膨胀的威化饼"></p><p>说实话，多少还是有点晕的，中午十二点刚过，太阳直射到栈道的木板上，台阶像是一块平整的地面，加上空气本来就稀薄。</p><p>登顶的最后一节栈道很长，栈道台阶上做着吸氧的游客，只留出一人宽的台阶。我爬到一半的时候，一个大叔对身边的人说：“爬山这是量力而行嘛，吸会儿痒不丢人。”，这时候他和我打了个照面，大概是看到我手上没有拿氧气瓶吧，对我来了一句：“呀这小伙子可以啊！”，被大叔夸的有点不好意思了，我只好不失礼貌的笑了笑。</p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云南游记之丽江束河古镇</title>
    <link href="/posts/938aed6f.html"/>
    <url>/posts/938aed6f.html</url>
    
    <content type="html"><![CDATA[<p>2020-12-16</p><p>旅游最后一站就是丽江，我在丽江束河古镇住了三天，一直住到回家，这是我旅程中最安逸的三天。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231211934.jpg" alt="束河古镇大门前玉龙雪山"></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231212051.jpg" alt="束河古镇桥"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231212122.jpg" alt="束河古镇手艺人"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231212208.jpg" alt="束河古镇安逸的猫"></p><p>我平常并不吃早餐，除非嘴馋想吃肠粉。在之前的旅途中，我也吃了几次，毕竟每天都要走上 20000+步，如果中午坐火车高铁，午饭可能吃不上。</p><p>在束河古镇，昼夜温差很大，早上 7 点天没亮，外边只有 1 度，中午温度就升到 25+度。在客栈磨磨蹭蹭，9 点才出门溜达。因为疫情，另外是淡季，古镇上人并不多，自己一个人慢悠悠在古镇石板路上散步，边上就是流水，别说有多安逸。</p><p>11 点左右，回到客栈附近的见面欢喜面馆，我喜欢在这家店里待着。店老板是个老大叔，说是老大叔，其实和我爷爷差不多年纪了。我也是在这家店里看到云南建筑特有的瓦猫，就在店面后面的屋顶。晚上也会到面馆吃饭，吃完饭，就和店老板的朋友坐一起喝酒听故事。</p><p>云南的瓦猫奶凶奶凶的，刷新了我对文物的印象。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117074340.jpg" alt="萌萌的瓦猫"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117074421.jpeg" alt="束河一带的瓦猫"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210116122617.jpg" alt="朋友画的瓦猫"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117075017.jpg" alt="客栈里的小猫"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云南游记之大理</title>
    <link href="/posts/9d5fbb3b.html"/>
    <url>/posts/9d5fbb3b.html</url>
    
    <content type="html"><![CDATA[<p>2020-12-14，中午出发去大理。</p><p>大理，风很大，在昆明时已经有人提醒过我，出了大理站，我真信了。</p><p>大理，很小，从大理站到洱海公园西北门也就两公里有余。</p><span id="more"></span><p>到大理把行李放到酒店，才下午三点左右，徒步去洱海公园。我并没有从西北门上去，而是从一个小道上爬上去的。而下午，正是洱海公园看洱海最佳时间。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231220932.jpg" alt="团山看洱海 1"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231221102.jpg" alt="团山看洱海 2"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231221133.jpg" alt="团山上的信号塔"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231221418.jpg" alt="从团山下山的小道"></p><p>在团山上，远远的能看到洱海边上有亭子，其实洱海公园也并没有逛完，沿着高德地图，往山下飞奔。</p><p>海心亭的公路对面，洱海公园的团山上，有个不知名的小亭（高德地图没显示），是眺望整个洱海的最佳位置。</p><p>相比于滇池，海心亭更适合观赏海鸥。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231224955.jpg" alt="海心亭拍海鸥"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231225108.jpg" alt="海心亭拍洱海"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231225155.jpg" alt="海心亭拍洱海"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231225235.jpg" alt="海心亭拍洱海"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231225420.jpg" alt="海心亭拍洱海"></p><p>第二天 (2020-12-15) 早上天没亮就又去洱海公园。本是想拍日出，谁知太阳从洱海公园那头升起，给团山遮住了。</p><p>另外，我一直是用手机拍照的，这次拍晨景，洱海一堆噪点，看来得搞装备了。即便如此，近景还是不错的。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231232020.jpg" alt="早晨团山上的信号塔"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231232102.jpg" alt="早晨团山上的小径"></p><p>中午从大理市区去大理古城，在古城外围转了一圈，回去睡了个觉，晚上夜游大理古城。</p><p>在古城里吃了一根烤乳扇，很甜很脆，就是有点贵，5 块钱，景区嘛。</p><p>在一条酒吧街的小巷子，看到一间日料店，门口的牌子上有鳗鱼饭，就进去了。碰巧，那天老板给员工放假，店里老板一人。仿佛自己走进了深夜食堂。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20201231232153.jpg" alt="店里的小装饰"></p><p>2020-12-16，从大理到丽江束河古镇。</p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云南游记之昆明</title>
    <link href="/posts/a0543c44.html"/>
    <url>/posts/a0543c44.html</url>
    
    <content type="html"><![CDATA[<h2 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h2><p>2020-12-12 晚到昆明，云南的唯一名菜汽锅鸡，既然来了，肯定要安排上的。</p><blockquote><p>地点：福照楼锦江分店</p><p>菜品：正气汽锅鸡，宜良小刀鸭，福照片皮鸭</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210101000058.jpg" alt="福照楼锦江分店"></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210101000203.jpg" alt="福照楼锦江分店内"></p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210101000248.jpg" alt="宜良小刀鸭"></p><p>作为一个广东人，吃着烧腊长大的，被宜良小刀鸭折服了，皮薄如纸，除了脖子皮肉之间脂肪都没有。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210101000321.jpg" alt="福照片皮鸭"></p><p>汽锅鸡忙着吃了，没拍照。</p><p>2020-12-13，上午去了云南省博物馆，下午去了滇池。</p><p>云南省博物馆还是值得去的，云南的省博物馆比广西民族博物馆阔多了，问题来了，广西有省博物馆么？</p><p>从博物馆到滇池打车比较方便，我是等了一个多钟的公交车，再骑车过去的。其实滇池也并不好玩，之后去大理洱海海心亭，也是能看到海鸥的。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210101000422.jpg" alt="云南省博物馆"></p><p>2020-12-14 中午出发去大理</p><h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><p>昆明是我到云南的第一站，温度很低，但是万里无云，晒得很痛。但是昆明的建设总体感觉比南宁好。</p><p>云南也刷新了我对油条的理解。</p><p>我在茂名和广州佛山都吃过油条，软趴趴的，还有韧劲，和老家那种香脆油条没法比。云南的烧饵块配上云南的软油条，却是莫名的好吃。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210117074055.jpg" alt="云南烧饵块"></p>]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易云音乐打卡脚本</title>
    <link href="/posts/8d1e2c79.html"/>
    <url>/posts/8d1e2c79.html</url>
    
    <content type="html"><![CDATA[<p>网易云音乐打卡升级需要登录天数和听歌数。但是我是那种一首歌能单曲循环很久的人，这可怎么快速升级？那只能挂机了呗。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">登录-&gt;签到-&gt;听推荐歌-&gt;听 fm 推荐<br></code></pre></td></tr></table></figure><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── app.js <span class="hljs-comment"># 可执行文件</span><br>├── .<span class="hljs-built_in">env</span> <span class="hljs-comment"># app.js 配置文件</span><br>├── .gitignore<br>├── index.js <span class="hljs-comment"># 模块入口</span><br>├── LICENSE<br>├── module <span class="hljs-comment"># 大部分代码来源自 https://github.com/Binaryify/NeteaseCloudMusicApi</span><br>│   ├── daily_signin.js<br>│   ├── level.js<br>│   ├── login_cellphone.js <span class="hljs-comment"># 原 login</span><br>│   ├── login.js <span class="hljs-comment"># 整和 login_cellphone 和 login_mail</span><br>│   ├── login_mail.js<br>│   ├── personal_fm.js<br>│   ├── playlist_detail.js<br>│   ├── recommend_resource.js<br>│   └── scrobble.js<br>├── package.json<br>├── README.md<br>└── util <span class="hljs-comment"># 代码来源自 https://github.com/Binaryify/NeteaseCloudMusicApi</span><br>    ├── apicache.js<br>    ├── crypto.js<br>    ├── index.js<br>    ├── memory-cache.js<br>    └── request.js<br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./util/request&#x27;</span>)<br><span class="hljs-keyword">const</span> login = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/login&#x27;</span>) <span class="hljs-comment">// 登录</span><br><span class="hljs-keyword">const</span> level = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/level&#x27;</span>)<br><span class="hljs-keyword">const</span> signin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/daily_signin&#x27;</span>) <span class="hljs-comment">// 签到</span><br><span class="hljs-keyword">const</span> recommend_resource = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/recommend_resource&#x27;</span>) <span class="hljs-comment">// 获取用户所有的歌单列表</span><br><span class="hljs-keyword">const</span> playlist_detail = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/playlist_detail&#x27;</span>) <span class="hljs-comment">// 获取单个歌单的歌单内容</span><br><span class="hljs-keyword">const</span> scrobble = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/scrobble&#x27;</span>) <span class="hljs-comment">// 打卡</span><br><span class="hljs-keyword">const</span> personFm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/personal_fm&#x27;</span>)<br><br><span class="hljs-keyword">const</span> &#123; cookieToJson &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./util/index&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">COOKIE</span> = <span class="hljs-string">&quot;os=pc;osver=Microsoft-Windows-10-Professional-build-10586-64bit;appver=2.0.3.131777;channel=netease;__remember_me=true&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getSongidIndex</span> = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 登录签到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020-09-09</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; username email or phone number</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; md5_password md5 password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">App</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">username, md5_password</span>) &#123;<br>        <span class="hljs-keyword">const</span> regexp = <span class="hljs-regexp">/^(([^&lt;&gt;()[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span> = &#123;<br>            <span class="hljs-attr">email</span>: username,<br>            md5_password,<br>            <span class="hljs-attr">cookie</span>: <span class="hljs-title function_">cookieToJson</span>(<span class="hljs-variable constant_">COOKIE</span>)<br>        &#125;<br>        <span class="hljs-keyword">const</span> isMail = regexp.<span class="hljs-title function_">test</span>(username);<br>        <span class="hljs-keyword">if</span> (!isMail) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-property">email</span>;<br><br>            <span class="hljs-keyword">if</span> (username.<span class="hljs-property">length</span> === <span class="hljs-number">11</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-property">phone</span> = username<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                [, <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-property">phone</span>] = username.<span class="hljs-title function_">split</span>(<span class="hljs-number">2</span>)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">login</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request)<br><br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>.<span class="hljs-property">cookie</span> = result.<span class="hljs-property">body</span>.<span class="hljs-property">cookie</span><br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">signin</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> err)<br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">signin</span>(&#123; ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, <span class="hljs-attr">type</span>: <span class="hljs-number">1</span> &#125;, request).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> err)<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> levelData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">level</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request)<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = &#123;&#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">level</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">level</span>; <span class="hljs-comment">// 等级</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nextPlayCount</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">nextPlayCount</span> <span class="hljs-comment">// 下一级需要播放的量</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">nowPlayCount</span> <span class="hljs-comment">// 现在播放的量</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">defaultPlayCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span>; <span class="hljs-comment">// 启动时播放量</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowLoginCount</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">nowLoginCount</span> <span class="hljs-comment">// 现在登录数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nextLoginCount</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">nextLoginCount</span> <span class="hljs-comment">// 下一级需要登录数</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffPlayCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nextPlayCount</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffLoginCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nextLoginCount</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowLoginCount</span><br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffNextLevelPlayCount</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffPlayCount</span> &lt; <span class="hljs-number">300</span> ? <span class="hljs-number">300</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffPlayCount</span> : <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 获取歌单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> <span class="hljs-variable">bubao</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2020-07-05</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;array&gt;</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@memberof</span> <span class="hljs-variable">App</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">recommend</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> <span class="hljs-title function_">recommend_resource</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request)<br>        <span class="hljs-keyword">return</span> json.<span class="hljs-property">body</span>.<span class="hljs-property">recommend</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-property">id</span>) || []<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-title class_">PersonFm</span>() &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">personFm</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request)).<span class="hljs-property">body</span>.<span class="hljs-property">data</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">getSongid</span>(<span class="hljs-params">playlist_id</span>) &#123;<br>        <span class="hljs-keyword">if</span> (playlist_id.<span class="hljs-property">length</span> &lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">getSongidIndex</span>) &#123;<br>            <span class="hljs-keyword">return</span> []<br>        &#125;<br>        <span class="hljs-keyword">const</span> singleItem = playlist_id[<span class="hljs-variable language_">this</span>.<span class="hljs-property">getSongidIndex</span>];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getSongidIndex</span>++;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">playlist_detail</span>(&#123; ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, <span class="hljs-attr">id</span>: singleItem &#125;, request);<br>        <span class="hljs-keyword">return</span> result.<span class="hljs-property">body</span>.<span class="hljs-property">playlist</span>.<span class="hljs-property">trackIds</span><br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">punch</span>(<span class="hljs-params">songidlist, time, timer</span>) &#123;<br>        <span class="hljs-keyword">if</span> (songidlist.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> time;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (songidlist.<span class="hljs-property">length</span>) &#123;<br>            <span class="hljs-keyword">const</span> singleSong = songidlist.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">await</span> <span class="hljs-title function_">scrobble</span>(&#123; ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, <span class="hljs-attr">sourceId</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">240</span>, <span class="hljs-attr">id</span>: singleSong.<span class="hljs-property">id</span> &#125;, request)<br>            &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>                <span class="hljs-keyword">throw</span> &#123;<br>                    <span class="hljs-attr">len</span>: songidlist.<span class="hljs-property">length</span> + <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">await</span> <span class="hljs-title function_">timer</span>()<br>        &#125;<br>        <span class="hljs-keyword">const</span> levelData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">level</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">query</span>, request)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span> = levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">nowPlayCount</span><br>        <span class="hljs-comment">// console.log(&quot;nowPlayCount&quot;, this.config.nowPlayCount)</span><br>        <span class="hljs-keyword">if</span> (levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">level</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">level</span>) &#123;<br>            <span class="hljs-comment">// console.log(&quot;StartPlay:&quot;, this.config.defaultPlayCount)</span><br>            <span class="hljs-comment">// console.log(&quot;nowPlayCount:&quot;, this.config.nowPlayCount)</span><br>            <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">defaultPlayCount</span><br>            <span class="hljs-comment">// console.log(&quot;done: &quot;, result)</span><br>            <span class="hljs-keyword">return</span> result<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (levelData.<span class="hljs-property">body</span>.<span class="hljs-property">data</span>.<span class="hljs-property">level</span> === <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">300</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">diffNextLevelPlayCount</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">nowPlayCount</span> + time<br>            <span class="hljs-keyword">return</span> result<br>        &#125;<br>    &#125;<br>&#125;<br><br>process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;unhandledRejection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">reason, p</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Unhandled Rejection at: Promise&#x27;</span>, p, <span class="hljs-string">&#x27;reason:&#x27;</span>, reason);<br>    <span class="hljs-comment">// application specific logging, throwing an error, or other logic here</span><br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">App</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.js</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> fsRead = util.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>);<br><span class="hljs-keyword">const</span> fsWrite = util.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">writeFile</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>();<br><span class="hljs-keyword">const</span> &#123; timer, md5Password &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./util/index.js&quot;</span>);<br><br>(<span class="hljs-title function_">async</span> () =&gt; &#123;<br><br>    <span class="hljs-keyword">let</span> config = &#123;&#125;<br>    <span class="hljs-comment">// 获取配置文件中的配置</span><br>    config = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">fsRead</span>(__dirname + <span class="hljs-string">&#x27;/.env&#x27;</span>).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">async</span> err =&gt; &#123;<br>        <span class="hljs-comment">// 文件不存在，创建文件</span><br>        config.<span class="hljs-property">username</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        config.<span class="hljs-property">password</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">fsWrite</span>(__dirname + <span class="hljs-string">&#x27;/.env&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(config));<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;))<br><br>    <span class="hljs-keyword">if</span> (!config.<span class="hljs-property">username</span> || config.<span class="hljs-property">username</span> === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;add username and password in .env&#x27;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// * password2md5</span><br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">password</span>) &#123;<br>        config.<span class="hljs-property">md5_password</span> = <span class="hljs-title function_">md5Password</span>(config.<span class="hljs-property">password</span>)<br>        <span class="hljs-keyword">delete</span> config.<span class="hljs-property">password</span>;<br>        <span class="hljs-title function_">fsWrite</span>(__dirname + <span class="hljs-string">&#x27;/.env&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(config))<br>    &#125;<br><br>    <span class="hljs-comment">// 登录并签到</span><br>    <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">login</span>(config.<span class="hljs-property">username</span>, config.<span class="hljs-property">md5_password</span>);<br><br>    <span class="hljs-comment">// 获取播放列表</span><br>    <span class="hljs-keyword">const</span> playlistId = <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">recommend</span>();<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TODAY</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getDay</span>();<br>    <span class="hljs-comment">// * 运行时间不为当天时间</span><br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">runTime</span> !== <span class="hljs-variable constant_">TODAY</span>) &#123;<br>        config.<span class="hljs-property">isEnd</span> = <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        config.<span class="hljs-property">isEnd</span> = config.<span class="hljs-property">isEnd</span> || <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-keyword">let</span> isEnd = config.<span class="hljs-property">isEnd</span><br><br>    <span class="hljs-keyword">if</span> (!(config.<span class="hljs-property">runTime</span> === <span class="hljs-variable constant_">TODAY</span> &amp;&amp; isEnd &gt;= <span class="hljs-number">300</span>)) &#123;<br>        config = &#123; ...config, ...app.<span class="hljs-property">config</span> &#125;<br>        config.<span class="hljs-property">runTime</span> = <span class="hljs-variable constant_">TODAY</span><br><br>        <span class="hljs-keyword">if</span> (config.<span class="hljs-property">err</span> &amp;&amp; (config.<span class="hljs-property">err</span>.<span class="hljs-property">day</span> !== config.<span class="hljs-property">runTime</span> || config.<span class="hljs-property">getSongidStart</span> !== config.<span class="hljs-property">runTime</span>)) &#123;<br>            <span class="hljs-keyword">delete</span> config.<span class="hljs-property">err</span><br>        &#125;<br>        config.<span class="hljs-property">getSongidStart</span> = config.<span class="hljs-property">runTime</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;config.err&quot;</span>, config.<span class="hljs-property">err</span>)<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">fsWrite</span>(__dirname + <span class="hljs-string">&#x27;/.env&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(config))<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">timer</span>(<span class="hljs-number">10</span>)();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 当运行时间为当天，并且 isEnd&gt;=300 则完成。</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;It not work to do!!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// times 私人 fm 循环次数</span><br>    <span class="hljs-keyword">let</span> times = <span class="hljs-number">10000</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 当歌单结束标志不为今天并且 isEnd 标志小于 300</span><br>        <span class="hljs-keyword">while</span> (config.<span class="hljs-property">getSongidEnd</span> !== <span class="hljs-variable constant_">TODAY</span> &amp;&amp; isEnd &lt; <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-comment">// 获取歌单列表</span><br>            <span class="hljs-keyword">let</span> songidlist = <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">getSongid</span>(playlistId) || []<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;songidlist.length:&quot;</span>, songidlist.<span class="hljs-property">length</span>)<br>            <span class="hljs-comment">// 歌单长度为 0 则退出循环</span><br>            <span class="hljs-keyword">if</span> (songidlist.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 歌单执行时存在错误</span><br>            <span class="hljs-keyword">if</span> (config.<span class="hljs-property">err</span> &amp;&amp; config.<span class="hljs-property">err</span>.<span class="hljs-property">len</span>) &#123;<br>                <span class="hljs-comment">// 为歌单当前 id</span><br>                <span class="hljs-keyword">if</span> (config.<span class="hljs-property">err</span>.<span class="hljs-property">getSongidIndex</span> === app.<span class="hljs-property">getSongidIndex</span>) &#123;<br>                    <span class="hljs-comment">// 获取未播放的列表</span><br>                    songidlist = songidlist.<span class="hljs-title function_">slice</span>(songidlist.<span class="hljs-property">length</span> - config.<span class="hljs-property">len</span>)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 进入下一轮循环</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 执行打卡</span><br>            isEnd = <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">punch</span>(songidlist, isEnd, <span class="hljs-title function_">timer</span>(<span class="hljs-number">3</span>))<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isEnd)<br>        &#125;<br>        <span class="hljs-comment">// * 歌单结束标志</span><br>        config.<span class="hljs-property">getSongidEnd</span> = <span class="hljs-variable constant_">TODAY</span>;<br>        <span class="hljs-comment">// 歌单结束 任务未结束，则执行私人 fm 打卡</span><br>        <span class="hljs-keyword">while</span> (isEnd &lt; <span class="hljs-number">300</span> &amp;&amp; times &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">const</span> songidlist = <span class="hljs-keyword">await</span> app.<span class="hljs-title class_">PersonFm</span>()<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;songidlist:&quot;</span>, songidlist)<br>            isEnd = <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">punch</span>(songidlist, isEnd, <span class="hljs-title function_">timer</span>(<span class="hljs-number">3</span>));<br>            times--;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isEnd);<br>        &#125;<br><br>        config.<span class="hljs-property">isEnd</span> = isEnd;<br>        config.<span class="hljs-property">yesterday</span> = config.<span class="hljs-property">nowPlayCount</span><br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        config.<span class="hljs-property">isEnd</span> = isEnd - <span class="hljs-number">1</span>;<br>        config.<span class="hljs-property">err</span> = &#123;<br>            <span class="hljs-attr">day</span>: <span class="hljs-variable constant_">TODAY</span>,<br>            <span class="hljs-attr">getSongidIndex</span>: app.<span class="hljs-property">getSongidIndex</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (error.<span class="hljs-property">len</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>            config.<span class="hljs-property">err</span>.<span class="hljs-property">len</span> = error.<span class="hljs-property">len</span><br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error)<br>    &#125;<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">fsWrite</span>(__dirname + <span class="hljs-string">&#x27;/.env&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(config)).<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;It was done!&quot;</span>)<br>&#125;)()<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module/login.js</span><br><span class="hljs-comment">// 整合登录</span><br><span class="hljs-keyword">const</span> login_mail = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./login_mail&#x27;</span>)<br><span class="hljs-keyword">const</span> login_cellphone = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./login_cellphone&#x27;</span>)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">      login: String,</span></span><br><span class="hljs-type"><span class="hljs-comment">      countrycode: String,</span></span><br><span class="hljs-type"><span class="hljs-comment">      password: String,</span></span><br><span class="hljs-type"><span class="hljs-comment">      cookie: String,</span></span><br><span class="hljs-type"><span class="hljs-comment">      proxy?: String</span></span><br><span class="hljs-type"><span class="hljs-comment">  </span>&#125;&#125; query 参数 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Request</span>&#125; request 请求方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">Promise&lt;&#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">    status: 200,</span></span><br><span class="hljs-type"><span class="hljs-comment">    cookie: String,</span></span><br><span class="hljs-type"><span class="hljs-comment">    body: &#123;</span></span><br><span class="hljs-type"><span class="hljs-comment">      cookie: String</span></span><br><span class="hljs-type"><span class="hljs-comment">      any,</span></span><br><span class="hljs-type"><span class="hljs-comment">    </span>&#125;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  &gt;&#125; </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">query, request</span>) &#123;<br>  <span class="hljs-keyword">const</span> isMail = !!query.<span class="hljs-property">email</span><br><br>  <span class="hljs-keyword">return</span> isMail ? <span class="hljs-title function_">login_mail</span>(query, request) : <span class="hljs-title function_">login_cellphone</span>(query, request);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = login;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module/login_cellphone.js</span><br><span class="hljs-comment">// 手机登录</span><br><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">async</span> (query, request) =&gt; &#123;<br>  query.<span class="hljs-property">cookie</span>.<span class="hljs-property">os</span> = <span class="hljs-string">&#x27;pc&#x27;</span><br>  <span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">phone</span>: query.<span class="hljs-property">phone</span>,<br>    <span class="hljs-attr">countrycode</span>: query.<span class="hljs-property">countrycode</span>,<br>    <span class="hljs-attr">password</span>: query.<span class="hljs-property">md5_password</span> || crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>).<span class="hljs-title function_">update</span>(query.<span class="hljs-property">password</span>).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>    <span class="hljs-attr">rememberLogin</span>: <span class="hljs-string">&#x27;true&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">request</span>(<br>    <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">`https://music.163.com/weapi/login/cellphone`</span>, data,<br>    &#123; <span class="hljs-attr">crypto</span>: <span class="hljs-string">&#x27;weapi&#x27;</span>, <span class="hljs-attr">ua</span>: <span class="hljs-string">&#x27;pc&#x27;</span>, <span class="hljs-attr">cookie</span>: query.<span class="hljs-property">cookie</span>, <span class="hljs-attr">proxy</span>: query.<span class="hljs-property">proxy</span> &#125;<br>  )<br><br>  <span class="hljs-keyword">if</span> (result.<span class="hljs-property">body</span>.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>    result = &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">body</span>: &#123;<br>        ...result.<span class="hljs-property">body</span>,<br>        <span class="hljs-attr">cookie</span>: result.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;;&#x27;</span>)<br>      &#125;,<br>      <span class="hljs-attr">cookie</span>: result.<span class="hljs-property">cookie</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// module/login_mail.js</span><br><span class="hljs-comment">// 邮箱登录</span><br><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">async</span> (query, request) =&gt; &#123;<br>  query.<span class="hljs-property">cookie</span>.<span class="hljs-property">os</span> = <span class="hljs-string">&#x27;pc&#x27;</span><br>  <span class="hljs-keyword">const</span> data = &#123;<br>    <span class="hljs-attr">username</span>: query.<span class="hljs-property">email</span>,<br>    <span class="hljs-attr">password</span>: query.<span class="hljs-property">md5_password</span> || crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>).<span class="hljs-title function_">update</span>(query.<span class="hljs-property">password</span>).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>),<br>    <span class="hljs-attr">rememberLogin</span>: <span class="hljs-string">&#x27;true&#x27;</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">request</span>(<br>    <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">`https://music.163.com/weapi/login`</span>, data,<br>    &#123; <span class="hljs-attr">crypto</span>: <span class="hljs-string">&#x27;weapi&#x27;</span>, <span class="hljs-attr">ua</span>: <span class="hljs-string">&#x27;pc&#x27;</span>, <span class="hljs-attr">cookie</span>: query.<span class="hljs-property">cookie</span>, <span class="hljs-attr">proxy</span>: query.<span class="hljs-property">proxy</span> &#125;<br>  )<br>  <span class="hljs-keyword">if</span> (result.<span class="hljs-property">body</span>.<span class="hljs-property">code</span> === <span class="hljs-number">502</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">body</span>: &#123;<br>        <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>,<br>        <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">502</span>,<br>        <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (result.<span class="hljs-property">body</span>.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>    result = &#123;<br>      <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>      <span class="hljs-attr">body</span>: &#123;<br>        ...result.<span class="hljs-property">body</span>,<br>        <span class="hljs-attr">cookie</span>: result.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;;&#x27;</span>)<br>      &#125;,<br>      <span class="hljs-attr">cookie</span>: result.<span class="hljs-property">cookie</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// util/index.js</span><br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-title function_">toBoolean</span>(<span class="hljs-params">val</span>) &#123;<br>        <span class="hljs-keyword">if</span> (val === <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> val<br>        <span class="hljs-keyword">return</span> val === <span class="hljs-string">&#x27;true&#x27;</span> || val == <span class="hljs-string">&#x27;1&#x27;</span><br>    &#125;,<br>    <span class="hljs-title function_">cookieToJson</span>(<span class="hljs-params">cookie</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!cookie) <span class="hljs-keyword">return</span> &#123;&#125;<br>        <span class="hljs-keyword">let</span> cookieArr = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br>        <span class="hljs-keyword">let</span> obj = &#123;&#125;<br>        cookieArr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> arr = i.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br>            obj[arr[<span class="hljs-number">0</span>]] = arr[<span class="hljs-number">1</span>];<br>        &#125;);<br>        <span class="hljs-keyword">return</span> obj<br>    &#125;,<br>    <span class="hljs-title function_">timer</span>(<span class="hljs-params">t = <span class="hljs-number">1</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(resolve, t * <span class="hljs-number">1000</span>)<br>        &#125;))<br>    &#125;,<br>    <span class="hljs-title function_">md5Password</span>(<span class="hljs-params">password</span>) &#123;<br>        <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>).<span class="hljs-title function_">update</span>(password).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在项目的根目录下创建一个<code>.env</code>文件，添加下面的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;phonenumber&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i request pac-proxy-agent<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node app.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js 文字转图片</title>
    <link href="/posts/576aa3eb.html"/>
    <url>/posts/576aa3eb.html</url>
    
    <content type="html"><![CDATA[<p>之前在 <a href="https://cnodejs.org/">cnodejs.org</a> 回复过一个答案。最近 <a href="https://cnodejs.org/">cnodejs.org</a> 无法访问。只能找快照把代码拷贝出来。果然还是自己的服务器靠谱一点。</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TextToSVG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;text-to-svg&#x27;</span>);<br><span class="hljs-keyword">const</span> sharp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sharp&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&quot;png&quot;</span>);<br><span class="hljs-keyword">const</span> textToSVG = <span class="hljs-title class_">TextToSVG</span>.<span class="hljs-title function_">loadSync</span>(<span class="hljs-string">&#x27;./DENG.TTF&#x27;</span>);<br><br><span class="hljs-keyword">const</span> svg1 = textToSVG.<span class="hljs-title function_">getSVG</span>(<span class="hljs-string">&#x27;魏长青-人人讲 App&#x27;</span>, &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">24</span>,<br>    <span class="hljs-attr">anchor</span>: <span class="hljs-string">&#x27;top&#x27;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> svg2 = textToSVG.<span class="hljs-title function_">getSVG</span>(<span class="hljs-string">&#x27;邀请您参加&#x27;</span>, &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">16</span>,<br>    <span class="hljs-attr">anchor</span>: <span class="hljs-string">&#x27;top&#x27;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> svg3 = textToSVG.<span class="hljs-title function_">getSVG</span>(<span class="hljs-string">&#x27;人人讲课程&#x27;</span>, &#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">32</span>,<br>    <span class="hljs-attr">anchor</span>: <span class="hljs-string">&#x27;top&#x27;</span>,<br>&#125;);<br><br>(<span class="hljs-title function_">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> sourceImg = <span class="hljs-title function_">sharp</span>(<span class="hljs-string">&#x27;./bg.png&#x27;</span>);<br>    <span class="hljs-keyword">const</span> target1Img = <span class="hljs-title function_">sharp</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(svg1));<br>    <span class="hljs-keyword">const</span> target2Img = <span class="hljs-title function_">sharp</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(svg2));<br>    <span class="hljs-keyword">const</span> target3Img = <span class="hljs-title function_">sharp</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(svg3));<br>    <br>    <span class="hljs-keyword">const</span> [<br>        &#123;<span class="hljs-attr">width</span>:sWidth , <span class="hljs-attr">height</span>:sHeight &#125;,<br>        &#123;<span class="hljs-attr">width</span>:t1Width , <span class="hljs-attr">height</span>:t1Height &#125;,<br>        &#123;<span class="hljs-attr">width</span>:t2Width , <span class="hljs-attr">height</span>:t2Height &#125;,<br>        &#123;<span class="hljs-attr">width</span>:t3Width , <span class="hljs-attr">height</span>:t3Height &#125;]= <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>            sourceImg.<span class="hljs-title function_">metadata</span>(),<br>            target1Img.<span class="hljs-title function_">metadata</span>(),<br>            target2Img.<span class="hljs-title function_">metadata</span>(),<br>            target3Img.<span class="hljs-title function_">metadata</span>()]);<br><br>    <span class="hljs-keyword">const</span> offsetX1 = <span class="hljs-built_in">parseInt</span>((sWidth - t1Width) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">const</span> offsetY1 = <span class="hljs-number">200</span>;<br>    <br>    <span class="hljs-keyword">const</span> offsetX2 = <span class="hljs-built_in">parseInt</span>((sWidth - t2Width) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">const</span> offsetY2 = <span class="hljs-number">240</span>;<br>    <br>    <span class="hljs-keyword">const</span> offsetX3 = <span class="hljs-built_in">parseInt</span>((sWidth - t3Width) / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">const</span> offsetY3 = <span class="hljs-number">270</span>;<br><br>    <span class="hljs-keyword">const</span> [target1Buffer,target2Buffer,target3Buffer] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>        target1Img.<span class="hljs-title function_">toBuffer</span>(),<br>        target2Img.<span class="hljs-title function_">toBuffer</span>(),<br>        target3Img.<span class="hljs-title function_">toBuffer</span>()]);<br><br>    <span class="hljs-keyword">await</span> sourceImg<br>        .<span class="hljs-title function_">composite</span>([<br>            &#123;<span class="hljs-attr">input</span>:target1Buffer,<span class="hljs-attr">left</span>:offsetX1, <span class="hljs-attr">top</span>:offsetY1&#125;,<br>            &#123;<span class="hljs-attr">input</span>:target2Buffer,<span class="hljs-attr">left</span>:offsetX2, <span class="hljs-attr">top</span>:offsetY2&#125;,<br>            &#123;<span class="hljs-attr">input</span>:target3Buffer,<span class="hljs-attr">left</span>:offsetX3, <span class="hljs-attr">top</span>:offsetY3&#125;<br>        ])<br>        .<span class="hljs-title function_">sharpen</span>()<br>        .<span class="hljs-title function_">withMetadata</span>()<br>        .<span class="hljs-title function_">png</span>()<br>        .<span class="hljs-title function_">toFile</span>(<span class="hljs-string">&#x27;./card.png&#x27;</span>);<br>&#125;)()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&quot;png&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode 插件开发之代码高亮与代码模板</title>
    <link href="/posts/7adf45e1.html"/>
    <url>/posts/7adf45e1.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://www.openscad.org/assets/img/logo.png" alt="logo.png"></p><p>最近在学用 <a href="https://www.openscad.org/">openscad</a> 弄 3d 建模，发现自带的编辑器太烂了，没有代码提示，只要高亮，这很不利于学习啊。</p><span id="more"></span><p>那能不能换个编辑器呢？让 vscode？真别说，还真有插件，但是没有 API 提示，闹搞哦。那只能自己动手丰衣足食了。</p><p>先研究一下别人代码时怎么写的，学会了到时候再自己开发个好用的。</p><p>研究插件 <a href="https://marketplace.visualstudio.com/items?itemName=efbenson.scad">scad</a> 的 <a href="https://github.com/efbenson/vscode-lang-scad">github 地址</a>。</p><p>文件夹布局：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── .gitignore<br>├── images<br>│   └── logo.png<br>├── LICENSE<br>├── package.json<br>├── README.md<br>├── scad.configuration.json<br>├── snippets<br>│   └── snippets.json<br>├── syntaxes<br>│   └── scad.tmLanguage<br>├── vsc-extension-quickstart.md<br>└── .vscode<br>    └── launch.json<br></code></pre></td></tr></table></figure><p>我们重点时看下面这些文件或者文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── package.json<br>├── scad.configuration.json<br>├── snippets<br>│   └── snippets.json<br>├── syntaxes<br>    └── scad.tmLanguage<br></code></pre></td></tr></table></figure><h2 id="syntaxes"><a href="#syntaxes" class="headerlink" title="syntaxes"></a>syntaxes</h2><p>这个文件夹内放着语法高亮的文件。因为 vscode 标记引擎时 <a href="https://macromates.com/manual/en/language_grammars">TextMate</a> 提供 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://macromates.com/manual/en/language_grammars">[1]</span></a></sup>，所以文件后缀是<code>.tmLanguage</code>。</p><p>而作者也在 README 中给出 <a href="https://github.com/tbuser/openscad.tmbundle"><code>scad.tmLanguage</code>项目地址</a>。</p><p>因为我也是刚刚接触 <a href="https://macromates.com/">TextMate</a>，这个里面的东西放以后讲吧。</p><h2 id="snippets"><a href="#snippets" class="headerlink" title="snippets"></a>snippets</h2><p>这个文件夹内放代码片段的。如过 <a href="https://macromates.com/">TextMate</a> 有提供<code>.tmSnippets</code>文件&#x2F;文件夹，可以用<code>yo code</code>导入生成为适合 vscode 使用的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ yo code  <br><br>     _-----_     ╭──────────────────────────╮<br>    |       |    │   Welcome to the Visual  │<br>    |--(o)--|    │   Studio Code Extension  │<br>   `---------´   │        generator!        │<br>    ( _´U`_ )    ╰──────────────────────────╯<br>    /___A___\   /<br>     |  ~  |     <br>   __<span class="hljs-string">&#x27;.___.&#x27;</span>__   <br> ´   `  |° ´ Y ` <br><br>? What <span class="hljs-built_in">type</span> of extension <span class="hljs-keyword">do</span> you want to create? New Code Snippets<br>Folder location that contains Text Mate (.tmSnippet) and Sublime snippets (.sublime-snippet) or press ENTER to start with a new snippet file.<br>? Folder name <span class="hljs-keyword">for</span> import or none <span class="hljs-keyword">for</span> new: OpenSCAD.tmbundle/Snippets<br>34 snippet(s) found and converted.<br><br>Problems <span class="hljs-keyword">while</span> converting: <br>OpenSCAD.tmbundle/Snippets/difference.tmSnippet: Missing property <span class="hljs-string">&#x27;tabTrigger&#x27;</span>. Snippet skipped.<br>OpenSCAD.tmbundle/Snippets/intersection.tmSnippet: Missing property <span class="hljs-string">&#x27;tabTrigger&#x27;</span>. Snippet skipped.<br>OpenSCAD.tmbundle/Snippets/union.tmSnippet: Missing property <span class="hljs-string">&#x27;tabTrigger&#x27;</span>. Snippet skipped.<br>? What<span class="hljs-string">&#x27;s the name of your extension? openscad</span><br><span class="hljs-string">? What&#x27;</span>s the identifier of your extension? openscad<br>? What<span class="hljs-string">&#x27;s the description of your extension? </span><br><span class="hljs-string">Enter the language for which the snippets should appear. The id is an identifier and is single, lower-case name such as &#x27;</span>php<span class="hljs-string">&#x27;, &#x27;</span>javascript<span class="hljs-string">&#x27;</span><br><span class="hljs-string">? Language id: scad</span><br><span class="hljs-string">   create openscad/.vscode/launch.json</span><br><span class="hljs-string">   create openscad/package.json</span><br><span class="hljs-string">   create openscad/vsc-extension-quickstart.md</span><br><span class="hljs-string">   create openscad/README.md</span><br><span class="hljs-string">   create openscad/CHANGELOG.md</span><br><span class="hljs-string">   create openscad/snippets/snippets.code-snippets</span><br><span class="hljs-string">   create openscad/.vscodeignore</span><br><span class="hljs-string"></span><br><span class="hljs-string">Your extension openscad has been created!</span><br><span class="hljs-string"></span><br><span class="hljs-string">To start editing with Visual Studio Code, use the following commands:</span><br><span class="hljs-string"></span><br><span class="hljs-string">     cd openscad</span><br><span class="hljs-string">     code .</span><br><span class="hljs-string"></span><br><span class="hljs-string">Open vsc-extension-quickstart.md inside the new extension for further instructions</span><br><span class="hljs-string">on how to modify, test and publish your extension.</span><br><span class="hljs-string"></span><br><span class="hljs-string">For more information, also visit http://code.visualstudio.com and follow us @code.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>我需要的文件在这里<code>openscad/snippets/snippets.code-snippets</code>，复制到我们项目中，并把<code>package.json</code>的引用改为这个文件。</p><p>这个文件内容比较多，拿出部分代码分析：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cir&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;circle(r=$&#123;1:10&#125;);&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;circle&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source.scad&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;col&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;col&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color([$&#123;1:0&#125;/255, $&#123;2:0&#125;/255, $&#123;3:0&#125;/255]) &#123;\r\n\t$&#123;0&#125;\r\n&#125;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;color&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source.scad&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cube(size=[$&#123;1:10&#125;, $&#123;2:10&#125;, $&#123;3:10&#125;], center=$&#123;4:true&#125;);&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cube&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source.scad&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>prefix</code> 定义一个或多个触发词，这些触发词在 IntelliSense 中显示该片段。子字符串匹配是在前缀上执行的，因此，在这种情况下，“ fc”可以匹配“ for-const”。</p><p><code>body</code> 是一个或多个内容行，插入时将作为多行内容加入。换行符和嵌入的选项卡将根据插入代码段的上下文进行格式化。</p><p><code>description</code> 是 IntelliSense 显示的代码段的可选描述。</p><p><code>scope</code> 属性将范围限定为特定语言</p></blockquote><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">更多详见文档</a></p><h2 id="scad-configuration-json"><a href="#scad-configuration-json" class="headerlink" title="scad.configuration.json"></a>scad.configuration.json</h2><p>这个文件中规定了语言配置，看了一下作者并未对此做修改。更多详情 <a href="https://code.visualstudio.com/api/language-extensions/language-configuration-guide">更多详见文档</a>。</p><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>很熟悉的文件，然而微软对这个文件添加了 vscode 特殊熟悉。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scad&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scad support for OpenSCAD&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;publisher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;efbenson&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;images/logo.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SEE LICENSE IN LICENSE.txt&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;repository&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/efbenson/vscode-lang-scad.git&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;vscode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.10.1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;categories&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;Languages&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;contributes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;languages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scad&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;OpenSCAD&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;scad&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;extensions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;.scad&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;configuration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./scad.configuration.json&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;snippets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scad&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./snippets/snippets.json&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;grammars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scad&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;scopeName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;source.scad&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./syntaxes/scad.tmLanguage&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><p>这个属性指定的是插件的 icon</p><h3 id="contributes"><a href="#contributes" class="headerlink" title="contributes"></a>contributes</h3><p>这个是 vscode 特有的，里面有三个属性</p><ul><li><strong>languages</strong>: 语言配置，可以看到引入了之前提到的 <code>scad.configuration.json</code></li><li><strong>snippets</strong>: 代码片段，刚刚我们生成的<code>snippets</code>在这个位置引入</li><li><strong>grammars</strong>: <a href="https://github.com/tbuser/openscad.tmbundle"><code>scad.tmLanguage</code>项目</a> 的<code>scad.tmLanguage</code>在这个位置引入。</li></ul><p>这样就完成了所以的语法高亮和代码模板的制作。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://macromates.com/manual/en/language_grammars">https://macromates.com/manual/en/language_grammars</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs 项目自动格式化方案</title>
    <link href="/posts/fe88e6b7.html"/>
    <url>/posts/fe88e6b7.html</url>
    
    <content type="html"><![CDATA[<p>之前一直遇到一个问题，多个人合作同一个项目时，提交的代码样式各式各样，commit 也随便写，这让 git 记录反而成为一种负担。</p><p>大概一年前，因为工作需要，我自己构建了一个 nodejs 项目脚手架，实现自动格式化代码，规范化提交。</p><span id="more"></span><h2 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h2><p><a href="https://cn.eslint.org/">ESLint</a> 是一款语法检测工具。它可以根据人们规定的规则，提示用户代码是否符合规定的代码规则。</p><p>在 vscode 中，我们很容易可以找到插件<code>Eslint</code>。</p><p>需要在项目里安装 eslint</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add eslint eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard --dev<br></code></pre></td></tr></table></figure><p>编写<code>.eslintrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 一个环境定义了一组预定义的全局变量。</span><br>        <span class="hljs-attr">&quot;es6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 启用 es6 语法</span><br>        <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// - Node.js 全局变量和 Node.js 作用域。</span><br>        <span class="hljs-attr">&quot;browser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Fluid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;extends&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;plugin:node/recommended&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;node&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;always&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;quotes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;double&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-multiple-empty-lines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-var&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-template-curly-in-string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;node/no-deprecated-api&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;camelcase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-bitwise&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-case-declarations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-new&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;new-cap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-unmodified-loop-condition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-loop-func&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;prefer-promise-reject-errors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;node/no-unsupported-features/es-syntax&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;standard/no-callback-literal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;no-tabs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;off&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;indent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;tab&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;space-before-function-paren&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;anonymous&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;named&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;asyncArrow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;arrow-parens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;as-needed&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>并在 vscode 的 settings 中设置 eslint</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;eslint.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>代码格式化已完成，接下来就要处理 git commit 了</p><h2 id="commitizen"><a href="#commitizen" class="headerlink" title="commitizen"></a>commitizen</h2><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add @commitlint/cli @commitlint/config-conventional commitizen cz-customizable husky --dev<br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// commitlint.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">extends</span>: [<span class="hljs-string">&quot;@commitlint/config-conventional&quot;</span>],<br>    <span class="hljs-attr">rules</span>: &#123;<br>        <span class="hljs-string">&quot;subject-empty&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>],<br>        <span class="hljs-string">&quot;type-empty&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;always&quot;</span>]<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>在 package 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;husky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;pre-commit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix .&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pre-push&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix .&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;commit-msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;commitizen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node_modules/cz-customizable&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cz-customizable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;config/cz-config.js&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config/cz-config.js</span><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">types</span>: [<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;特性✨&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;特性：一个新的特性&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;修复🐛&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;修复：修复一个 Bug&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;文档📚&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;文档：变更的只有文档&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;格式🌈&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;格式：空格，分号等格式修复&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;重构⛑&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;重构：代码重构，注意和特性、修复区分开&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;性能🕑&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;性能：提升性能&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;测试☕&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;测试：添加一个测试&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;工具⛏&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;工具：开发工具变动（构建、脚手架工具等）&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;回滚🔙&quot;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;回滚：代码回退&quot;</span> &#125;<br>    ],<br><br>    <span class="hljs-attr">scopes</span>: [<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;command&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;config&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;modules&quot;</span> &#125;,<br>        &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;tools&quot;</span> &#125;<br>    ],<br><br>    <span class="hljs-comment">// it needs to match the value for field type. Eg.: &#x27;fix&#x27;</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">  scopeOverrides: &#123;</span><br><span class="hljs-comment">    fix: [</span><br><span class="hljs-comment">      &#123;name: &#x27;merge&#x27;&#125;,</span><br><span class="hljs-comment">      &#123;name: &#x27;style&#x27;&#125;,</span><br><span class="hljs-comment">      &#123;name: &#x27;e2eTest&#x27;&#125;,</span><br><span class="hljs-comment">      &#123;name: &#x27;unitTest&#x27;&#125;</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">  &#125;,</span><br><span class="hljs-comment">  */</span><br>    <span class="hljs-comment">// override the messages, defaults are as follows</span><br>    <span class="hljs-attr">messages</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;选择一种你的提交类型：&quot;</span>,<br>        <span class="hljs-attr">scope</span>: <span class="hljs-string">&quot;选择一个 scope （可选）:&quot;</span>,<br>        <span class="hljs-comment">// used if allowCustomScopes is true</span><br>        <span class="hljs-attr">customScope</span>: <span class="hljs-string">&quot;Denote the SCOPE of this change:&quot;</span>,<br>        <span class="hljs-attr">subject</span>: <span class="hljs-string">&quot;短说明：\n&quot;</span>,<br>        <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;长说明，使用|换行（可选）：\n&quot;</span>,<br>        <span class="hljs-attr">breaking</span>: <span class="hljs-string">&quot;非兼容性说明 （可选）:\n&quot;</span>,<br>        <span class="hljs-attr">footer</span>: <span class="hljs-string">&quot;关联关闭的 issue，例如：#31, #34（可选）:\n&quot;</span>,<br>        <span class="hljs-attr">confirmCommit</span>: <span class="hljs-string">&quot;确定提交说明？&quot;</span><br>    &#125;,<br><br>    <span class="hljs-attr">allowCustomScopes</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">allowBreakingChanges</span>: [<span class="hljs-string">&quot;特性&quot;</span>, <span class="hljs-string">&quot;修复&quot;</span>],<br><br>    <span class="hljs-comment">// limit subject length</span><br>    <span class="hljs-attr">subjectLimit</span>: <span class="hljs-number">100</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npx cz<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>egg.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Systmd 自动挂载 Nas 文件夹</title>
    <link href="/posts/bf3a1914.html"/>
    <url>/posts/bf3a1914.html</url>
    
    <content type="html"><![CDATA[<p>搭建好 samba 之后，每次开机都要手动把 nas 文件夹手动挂载到本地，找一个自动挂载的方法。</p><span id="more"></span><h2 id="创建密码文件"><a href="#创建密码文件" class="headerlink" title="创建密码文件"></a>创建密码文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /etc/samba/credentials<br><span class="hljs-built_in">sudo</span> vim /etc/samba/credentials/self<br></code></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">username=root<br>password=123456789<br></code></pre></td></tr></table></figure><h2 id="编写挂载文件"><a href="#编写挂载文件" class="headerlink" title="编写挂载文件"></a>编写挂载文件</h2><p>假设要挂载的位置是<code>/home/bubao/Samba/self</code>，那么则创建一个文件名为<code>home-bubao-Samba-self.mount</code>，编辑<code>home-bubao-Samba-self.mount</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Mount nas.Self at boot<br><br>[Mount]<br>What=//10.0.0.3/self<br><span class="hljs-built_in">where</span>=/home/bubao/Samba/self<br>Options=x-systemd.automount,credentials=/etc/samba/credentials/self,iocharset=utf8,uid=1000,gid=1000,sec=ntlmssp,rw<br>Type=cifs<br>TimeoutSec=30<br>ForceUnmount=<span class="hljs-literal">true</span><br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> home-bubao-Samba-self.mount<br><span class="hljs-built_in">sudo</span> systemctl start home-bubao-Samba-self.mount<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在服务器上搭建 Aria2 rpc 服务</title>
    <link href="/posts/311d2e0a.html"/>
    <url>/posts/311d2e0a.html</url>
    
    <content type="html"><![CDATA[<p>以前写爬虫，都是自己傻 fufu 写下载器下载静态资源。最近写一个爬虫将资源路径写数据库后，想使用 aria2c 来下载，于是就有了下面这些操作。</p><span id="more"></span><p>哦，之前的 Nas 搭建我已经弄完了，一直没写文章分享，那天心情好把之前的系列补全。下面这些都是在我自建的 Nas 环境操作的。</p><h2 id="安装-Aria2"><a href="#安装-Aria2" class="headerlink" title="安装 Aria2"></a>安装 Aria2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S aria2<br></code></pre></td></tr></table></figure><h2 id="启动-RPC"><a href="#启动-RPC" class="headerlink" title="启动 RPC"></a>启动 RPC</h2><p>创建<code>config</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span>  /etc/aria2c<br><span class="hljs-built_in">cd</span> /etc/aria2c<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /etc/aria2c/aria2.session<br><span class="hljs-built_in">sudo</span> vim aria2c.conf<br></code></pre></td></tr></table></figure><p>编辑<code>aria2c.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /etc/aria2c/aria2c.conf</span><br><span class="hljs-comment"># 文件保存路径，默认为当前启动位置，自行修改</span><br><span class="hljs-comment"># dir=&quot;./&quot;</span><br><span class="hljs-built_in">dir</span>=/home/bubao/disk/aria2_download<br><span class="hljs-comment"># 禁止 ipv6</span><br>disable-ipv6=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 打开 rpc 的目的是为了给 web 管理端用</span><br>enable-rpc=<span class="hljs-literal">true</span><br>rpc-allow-origin-all=<span class="hljs-literal">true</span><br><span class="hljs-comment">#允许非外部访问</span><br>rpc-listen-all=<span class="hljs-literal">true</span><br><span class="hljs-comment"># RPC 端口，仅当默认端口被占用时修改</span><br>rpc-listen-port=16800<br><br>input-file=/etc/aria2c/aria2.session<br>save-session=/etc/aria2c/aria2.session<br><br><span class="hljs-comment"># 最大同时下载数（任务数）, 路由建议值：3</span><br>max-concurrent-downloads=32<br><span class="hljs-comment"># 断点续传</span><br><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 同服务器连接数</span><br>max-connection-per-server=16<br><span class="hljs-comment"># 最小文件分片大小，下载线程数上限取决于能分出多少片，对于小文件重要</span><br>min-split-size=10M<br><span class="hljs-comment"># 单文件最大线程数，路由建议值：5</span><br><span class="hljs-built_in">split</span>=256<br><span class="hljs-comment"># 下载速度限制</span><br>max-overall-download-limit=0<br><span class="hljs-comment"># 单文件速度限制</span><br>max-download-limit=0<br><span class="hljs-comment"># 上传速度限制</span><br>max-overall-upload-limit=0<br><span class="hljs-comment"># 单文件速度限制</span><br>max-upload-limit=0<br><br><span class="hljs-comment"># 使用代理</span><br><span class="hljs-comment"># all-proxy=localhost:20172</span><br></code></pre></td></tr></table></figure><p>创建<code>/etc/aria2c/aria2c.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/aria2c/aria2c.service<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=aria2c Service<br>After=network.target<br>Wants=network.target<br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/aria2c --conf-path=/etc/aria2c/aria2c.conf<br>Restart=on-abnormal<br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>将<code>/etc/aria2c/aria2c.service</code>文件拷贝到<code>/usr/lib/systemd/system/aria2c.session</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/aria2c/aria2c.service /usr/lib/systemd/system/aria2c.session<br></code></pre></td></tr></table></figure><p>重载<code>systemctl</code>并启动<code>aria2c</code>开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> aria2c.service<br><span class="hljs-built_in">sudo</span> systemctl restart aria2c.service<br></code></pre></td></tr></table></figure><p>至此，aria2c rpc 就启动成功了。</p><h2 id="安装-Aria2Ng"><a href="#安装-Aria2Ng" class="headerlink" title="安装 Aria2Ng"></a>安装 Aria2Ng</h2><p>为了更方便使用 aria2c rpc，需要一个界面，这里我们选用了 Aria2Ng。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S aria-ng-deploy<br></code></pre></td></tr></table></figure><p>当时安装后我就那么这东西怎么用，去看看 yay 缓存目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜ <span class="hljs-built_in">cat</span> ~/.cache/yay/aria-ng-deploy/aria-ng-deploy.install<br><span class="hljs-comment"># color</span><br>all_off=<span class="hljs-string">&quot;<span class="hljs-subst">$(tput sgr0)</span>&quot;</span><br>bold=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;all_off&#125;</span><span class="hljs-subst">$(tput bold)</span>&quot;</span><br>blue=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bold&#125;</span><span class="hljs-subst">$(tput setaf 4)</span>&quot;</span><br>yellow=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bold&#125;</span><span class="hljs-subst">$(tput setaf 3)</span>&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">note</span></span>() &#123;<br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;blue&#125;</span>==&gt;<span class="hljs-variable">$&#123;yellow&#125;</span> NOTE:<span class="hljs-variable">$&#123;bold&#125;</span> $1<span class="hljs-variable">$&#123;all_off&#125;</span>\n&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">post_install</span></span>()&#123;<br>        note <span class="hljs-string">&quot;you should copy /usr/share/aria-ng-deploy to your web directory&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">post_upgrade</span></span>()&#123;<br>        post_install<br>&#125;<br></code></pre></td></tr></table></figure><p><code>you should copy /usr/share/aria-ng-deploy to your web directory</code></p><p>emmmmm??????</p><p><code>web directory</code>，也就是说我需要 Nginx 才能启动。那就安装咯。</p><h2 id="安装-Nginx-并配置"><a href="#安装-Nginx-并配置" class="headerlink" title="安装 Nginx 并配置"></a>安装 Nginx 并配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yay -S nginx<br></code></pre></td></tr></table></figure><p>安装就这么简单，查看<code>nginx</code>服务的状态，如果未启动，就启动一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status nginx<br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-comment"># sudo systemctl start nginx</span><br><span class="hljs-comment"># 开机启动</span><br><span class="hljs-comment"># sudo systemctl enable nginx</span><br></code></pre></td></tr></table></figure><p>配置一下 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> <br></code></pre></td></tr></table></figure><p>修改<code>/etc/nginx/nginx.conf</code>如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#user html;</span><br>worker_processes  1;<br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    include /etc/nginx/sites-enabled/*; <span class="hljs-comment"># 开启的 Server 服务配置</span><br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        location / &#123;<br>            root   /usr/share/nginx/html;<br>            index  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   /usr/share/nginx/html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>编辑<code>/etc/nginx/sites-enabled/aria2-ng.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>       listen 10081;<br>       listen [::]:10081;<br><br>       <span class="hljs-comment"># 定义服务器的默认网站根目录位置</span><br>       root /usr/share/aria-ng-deploy;<br>       <br>       <span class="hljs-comment"># Add index.php to the list if you are using PHP</span><br>       index index.html index.htm index.nginx-debian.html;<br><br>       <span class="hljs-comment"># access log file 访问日志</span><br>       <span class="hljs-comment"># access_log logs/nginx.access.log main;</span><br>       <br>       <span class="hljs-comment"># 禁止访问隐藏文件</span><br>       <span class="hljs-comment"># Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).</span><br>       location ~ /\. &#123;<br>                deny all;<br>                access_log off;<br>                log_not_found off;<br>       &#125;<br>    <br>       <span class="hljs-comment"># 默认请求</span><br>       location / &#123;<br>                <span class="hljs-comment"># 首先尝试将请求作为文件提供，然后作为目录，然后回退到显示 404。</span><br>                <span class="hljs-comment"># try_files 指令将会按照给定它的参数列出顺序进行尝试，第一个被匹配的将会被使用。</span><br>                <span class="hljs-comment"># try_files $uri $uri/ =404;</span><br>              index index.html index.htm; <span class="hljs-comment"># 给定 URL 文件 </span><br>                <span class="hljs-comment">#try_files $uri $uri/ /index.php?path_info=$uri&amp;$args =404;</span><br>                access_log off;<br>                expires max;<br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx 的配置我也是抄的。….. 所有大神看见有什么不妥的地方自己改改。</p><h2 id="重载-Nginx"><a href="#重载-Nginx" class="headerlink" title="重载 Nginx"></a>重载 Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -s reload<br></code></pre></td></tr></table></figure><p>最后在浏览器上访问服务器的<code>18600</code>端口，把 rpc 绑定过来即可。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>Nas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode 插件整理与设置</title>
    <link href="/posts/99204414.html"/>
    <url>/posts/99204414.html</url>
    
    <content type="html"><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="gitignore-Generator"><a href="#gitignore-Generator" class="headerlink" title=".gitignore Generator"></a>.gitignore Generator</h3><p>作用：自动生成 <code>.gitignore</code> 文件</p><p>使用：<code>ctrl + shift + p</code> 输入 <code>generate .gitignore file</code></p><p><img src="https://github.com/piotrpalarz/vscode-gitignore-generator/raw/master/images/readme/1.gif" alt="vscode-gitignore-generator"></p><span id="more"></span><h3 id="ASCIIDecorator"><a href="#ASCIIDecorator" class="headerlink" title="ASCIIDecorator"></a>ASCIIDecorator</h3><p>作用：生成 ASCII 文字</p><p>使用：<code>ctrl + shift + p</code> 输入 <code>generate .gitignore file</code></p><p><img src="https://github.com/helixquar/asciidecorator/raw/master/images/demo-font-select.gif" alt="ASCIIDecorator"></p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>作用：自定背景</p><p>使用：</p><p><img src="https://user-images.githubusercontent.com/9987486/40583705-7105dda8-61c6-11e8-935a-3c5d475a1eb1.gif" alt="githubusercontent"></p><h3 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a>Better Comments</h3><p>作用：更加友好的注释</p><p>使用：</p><p><img src="https://github.com/aaron-bond/better-comments/raw/master/images/better-comments.PNG" alt="better-comments"></p><p>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; better-comments 自定义颜色</span><br>    <span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;!&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF2D00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;?&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3498DB&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;//&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#474747&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;todo&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF8C00&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#99FB37&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2D660&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#60D6F2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; better-comments</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Bracket-Pair-Colorizer-2"><a href="#Bracket-Pair-Colorizer-2" class="headerlink" title="Bracket Pair Colorizer 2"></a>Bracket Pair Colorizer 2</h3><p>作用：更加友好的括号提示</p><p>使用：</p><p><img src="https://github.com/CoenraadS/Bracket-Pair-Colorizer-2/raw/master/images/example.png" alt="Bracket-Pair-Colorizer-2"></p><h3 id="Browser-Preview"><a href="#Browser-Preview" class="headerlink" title="Browser Preview"></a>Browser Preview</h3><p>作用：在 vscode 中打开浏览器</p><p>使用：</p><p><img src="https://github.com/auchenberg/vscode-browser-preview/raw/master/resources/demo.gif" alt="vscode-browser-preview"></p><h3 id="Check-Updates-of-NPM-Packages"><a href="#Check-Updates-of-NPM-Packages" class="headerlink" title="Check Updates of NPM Packages"></a>Check Updates of NPM Packages</h3><p>作用：检查 package.json 中的依赖包版本</p><p>使用：</p><p>打开 package.json 即可</p><h3 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h3><p>作用：适用于 VS Code 的中文（简体）语言包</p><h3 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h3><p>作用：在 vscode 中运行一个文件或者一部分选中的代码</p><h3 id="CodeMetrics"><a href="#CodeMetrics" class="headerlink" title="CodeMetrics"></a>CodeMetrics</h3><p>作用：在 TypeScript &#x2F; JavaScript &#x2F; Lua 文件中计算复杂度。</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/kisstkondoros/codemetrics/master/images/metric_details.png" alt="codemetrics"></p><h3 id="Comment-Translate"><a href="#Comment-Translate" class="headerlink" title="Comment Translate"></a>Comment Translate</h3><p>作用：VSCode 注释翻译</p><h3 id="Community-Material-Theme"><a href="#Community-Material-Theme" class="headerlink" title="Community Material Theme"></a>Community Material Theme</h3><p>作用：主题</p><p>使用：</p><p><img src="https://i.ibb.co/LzRwxp4/Frame.jpg" alt="Frame"></p><h3 id="Darcula-IntelliJ-Theme"><a href="#Darcula-IntelliJ-Theme" class="headerlink" title="Darcula IntelliJ Theme"></a>Darcula IntelliJ Theme</h3><p>作用：主题</p><p>使用：</p><p><img src="https://i.imgur.com/OxN7fJe.png" alt="Darcula IntelliJ Theme"></p><h3 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h3><p>作用：汉英英汉词典 for vscode</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/exiahuang/xycode-doc/gh-pages/images/fanyi-vscode.gif" alt="dictionary"></p><h3 id="Document-This"><a href="#Document-This" class="headerlink" title="Document This"></a>Document This</h3><p>作用：Document This 方法头</p><p>配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; docthis</span><br>    <span class="hljs-attr">&quot;docthis.includeAuthorTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Author</span><br>    <span class="hljs-attr">&quot;docthis.authorName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDateTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;docthis.includeDescriptionTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//出现@Description</span><br>    <span class="hljs-comment">// &gt;&gt; docthis</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用：</p><p><img src="https://marketplace.visualstudio.com/items?itemName=oouo-diogo-perdigao.docthis" alt="Document This"></p><p><img src="https://github.com/joelday/vscode-docthis/raw/master/images/demo.gif" alt="vscode-docthis"></p><h2 id="DotENV"><a href="#DotENV" class="headerlink" title="DotENV"></a>DotENV</h2><p>VSCode .env syntax highlighting</p><p><img src="https://github.com/mikestead/vscode-dotenv/raw/master/images/screenshot.png" alt="DotENV"></p><h3 id="Draw-io-Integration"><a href="#Draw-io-Integration" class="headerlink" title="Draw.io Integration"></a>Draw.io Integration</h3><p>This unofficial extension integrates Draw.io (also known as diagrams.net) into VS Code.</p><p><img src="https://github.com/hediet/vscode-drawio/raw/master/docs/demo.gif" alt="Draw.io Integration"></p><h3 id="egg-jump-definition"><a href="#egg-jump-definition" class="headerlink" title="egg-jump-definition"></a>egg-jump-definition</h3><p>作用：egg.js 开发工具</p><p>使用：</p><p><img src="https://img.alicdn.com/tfs/TB166ZODuGSBuNjSspbXXciipXa-800-631.gif" alt="vscode-docthis"></p><h3 id="Egg-js-dev-tools"><a href="#Egg-js-dev-tools" class="headerlink" title="Egg.js dev tools"></a>Egg.js dev tools</h3><p>作用：Egg.js dev tools Egg.js 开发辅助插件</p><h3 id="eggjs"><a href="#eggjs" class="headerlink" title="eggjs"></a>eggjs</h3><p>作用：egg.js 开发工具</p><p><img src="https://github.com/eggjs/vscode-eggjs/raw/master/snapshot/snippet.gif" alt="vscode-eggjs"></p><h3 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h3><p>作用：emoji 输入</p><p>使用：</p><p><img src="https://github.com/Perkovec/Emoji/raw/master/example.gif" alt="Emoji"></p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>作用：ES 格式化工具</p><p>配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; eslint</span><br>    <span class="hljs-attr">&quot;eslint.enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; eslint</span><br>    <span class="hljs-comment">// &lt;&lt; editor</span><br>    <span class="hljs-attr">&quot;editor.codeActionsOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;source.fixAll.eslint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="filesize"><a href="#filesize" class="headerlink" title="filesize"></a>filesize</h3><p>作用：文件大小</p><p>使用：</p><p><img src="https://cldup.com/_Y52O-UfkK.jpg" alt="filesize"></p><h3 id="Fix-VSCode-Checksums"><a href="#Fix-VSCode-Checksums" class="headerlink" title="Fix VSCode Checksums"></a>Fix VSCode Checksums</h3><p>作用：修复 vscode</p><p>使用：<code>ctrl + shift + p</code> 输入 <code>Fix Checksums: Apply</code></p><h3 id="Git-Emoji-Commit-中文版"><a href="#Git-Emoji-Commit-中文版" class="headerlink" title="Git Emoji Commit 中文版"></a>Git Emoji Commit 中文版</h3><p>作用：提交 git 的时候，加上 emoji 前缀！</p><p>使用：</p><p><img src="https://github.com/maixiaojie/git-emoji-zh/raw/master/images/features.gif" alt="git-emoji-zh"></p><h3 id="Git-Graph"><a href="#Git-Graph" class="headerlink" title="Git Graph"></a>Git Graph</h3><p>作用：view a Git Graph of your repository, and perform Git actions from the graph.</p><p>使用：</p><p><img src="https://github.com/mhutchie/vscode-git-graph/raw/master/resources/demo.gif" alt="Git Graph"></p><h3 id="Git-History"><a href="#Git-History" class="headerlink" title="Git History"></a>Git History</h3><p>作用：View git log, file history, compare branches or commits</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/DonJayamanne/gitHistoryVSCode/master/images/gitLogv3.gif" alt="Git History"></p><h3 id="GitHub-Pull-Requests-and-Issues"><a href="#GitHub-Pull-Requests-and-Issues" class="headerlink" title="GitHub Pull Requests and Issues"></a>GitHub Pull Requests and Issues</h3><p>作用：GitHub 扩展</p><h3 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h3><p>作用：Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/eamodio/vscode-gitlens/master/images/docs/gitlens-preview.gif" alt="gitlens-preview"></p><h3 id="hexo-one"><a href="#hexo-one" class="headerlink" title="hexo-one"></a>hexo-one</h3><p>作用：Making hexo easier to use</p><h3 id="Import-Cost"><a href="#Import-Cost" class="headerlink" title="Import Cost"></a>Import Cost</h3><p>作用：导入文件大小</p><p>使用：</p><p><img src="https://file-wkbcnlcvbn.now.sh/import-cost.gif" alt="import-cost"></p><h3 id="indent-rainbow"><a href="#indent-rainbow" class="headerlink" title="indent-rainbow"></a>indent-rainbow</h3><p>作用：indent-rainbow</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/oderwat/vscode-indent-rainbow/master/assets/example.png" alt="indent-rainbow"></p><h3 id="koroFileHeader"><a href="#koroFileHeader" class="headerlink" title="koroFileHeader"></a>koroFileHeader</h3><p>在 vscode 中用于生成文件头部注释和函数注释的插件，经过多版迭代后，插件：支持所有主流语言，灵活方便，文档齐全，食用简单！觉得插件不错的话，就给个 Star⭐️吧~</p><p><img src="https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif" alt="koroFileHeader"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// &lt;&lt; koro 头部注释配置</span><br>    <span class="hljs-attr">&quot;fileheader.customMade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bubao&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;LastEditTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Do not edit&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-comment">// &quot;config&quot;: &#123;</span><br>        <span class="hljs-comment">//     &quot;prohibitAutoAdd&quot;: [</span><br>        <span class="hljs-comment">//         &quot;json&quot;,</span><br>        <span class="hljs-comment">//         &quot;md&quot;,</span><br>        <span class="hljs-comment">//         &quot;html&quot;</span><br>        <span class="hljs-comment">//     ]</span><br>        <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;fileheader.configObj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;prohibitAutoAdd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;json&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 禁止。json 文件，自动添加头部注释</span><br>        <span class="hljs-attr">&quot;prohibitItemAutoAdd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;blog&quot;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 禁止 blog 项目自动添加头部注释</span><br>        <span class="hljs-attr">&quot;specialOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;Date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;author&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;LastEditTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;last edit time&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;LastEditors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;last author&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;Description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;description&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;FilePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;文件相对于项目的路径&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; */&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;head&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;!--&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;middle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; * @&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; --&gt;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// &gt;&gt; koro 注释格式配置</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Kanban"><a href="#Kanban" class="headerlink" title="Kanban"></a>Kanban</h3><p>作用：看板</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/mkloubert/vscode-kanban/master/img/demo1.gif" alt="vscode-kanban"></p><h3 id="koroFileHeader-1"><a href="#koroFileHeader-1" class="headerlink" title="koroFileHeader"></a>koroFileHeader</h3><p>作用：在 vscode 中用于生成文件头部注释和函数注释的插件，经过多版迭代后，插件：支持所有主流语言，功能强大，灵活方便，文档齐全，食用简单！</p><p>使用：</p><p><img src="https://raw.githubusercontent.com/OBKoro1/koro1FileHeader/master/images/example.gif" alt="koro1FileHeader"></p><h3 id="licenser"><a href="#licenser" class="headerlink" title="licenser"></a>licenser</h3><p>作用：声明生成器</p><p>使用：<code>ctrl + shift + p</code> 输入 <code>licenser: Create LICENSE file</code></p><h3 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h3><p>作用：Markdown</p><p><img src="https://github.com/yzhang-gh/vscode-markdown/raw/master/images/gifs/toggle-bold.gif" alt="Markdown All in One"></p><h3 id="Markdown-Checkbox"><a href="#Markdown-Checkbox" class="headerlink" title="Markdown Checkbox"></a>Markdown Checkbox</h3><p>作用：Markdown Checkbox</p><p><img src="https://github.com/yzhang-gh/vscode-markdown/raw/master/images/gifs/toggle-bold.gif" alt="Markdown Checkbox"></p><h3 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a>Markdown Preview Enhanced</h3><p>作用：Markdown Preview Enhanced</p><p><img src="https://user-images.githubusercontent.com/1908863/28495106-30b3b15e-6f09-11e7-8eb6-ca4ca001ab15.png" alt="Markdown Preview Enhanced"></p><h3 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a>markdownlint</h3><p>作用：markdownlint 格式化</p><h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h3><p>作用：Theme Icon</p><p><img src="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/master/images/fileIcons.png" alt="vscode-material-icon-theme"></p><h3 id="Material-Theme"><a href="#Material-Theme" class="headerlink" title="Material Theme"></a>Material Theme</h3><p>作用：Theme</p><p><img src="https://i.ibb.co/LzRwxp4/Frame.jpg" alt="vscode-material-theme"></p><h3 id="Material-Theme-Icons"><a href="#Material-Theme-Icons" class="headerlink" title="Material Theme Icons"></a>Material Theme Icons</h3><p>作用：Theme Icon</p><p><img src="https://i.ibb.co/fdDRkWb/Frame.jpg" alt="Material Theme Icons"></p><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>作用：nginx.conf 高亮和提示</p><h3 id="node-readme"><a href="#node-readme" class="headerlink" title="node-readme"></a>node-readme</h3><p>作用：node 模块 readme</p><p><img src="https://github.com/bengreenier/vscode-node-readme/raw/master/images/example-import.gif" alt="Material Theme Icons"></p><h3 id="Node-js-Modules-Intellisense"><a href="#Node-js-Modules-Intellisense" class="headerlink" title="Node.js Modules Intellisense"></a>Node.js Modules Intellisense</h3><p>作用：在导入语句中自动完成 Node.js 模块</p><p><img src="https://github.com/leizongmin/vscode-node-module-intellisense/raw/master/images/auto_complete.gif" alt="Node.js Modules Intellisense"></p><h3 id="npm-import-package-version"><a href="#npm-import-package-version" class="headerlink" title="npm-import-package-version"></a>npm-import-package-version</h3><p>作用：导入模块的版本</p><p><img src="https://github.com/axetroy/vscode-npm-import-package-version/raw/master/screenshot/js.png" alt="vscode-npm-import-package-version"></p><h3 id="One-Dark-Sublime-Babel"><a href="#One-Dark-Sublime-Babel" class="headerlink" title="One Dark (Sublime Babel)"></a>One Dark (Sublime Babel)</h3><p>作用：主题</p><p><img src="https://raw.githubusercontent.com/joshpeng/One-Dark/master/images/onedark.gif" alt="One-Dark"></p><h3 id="Pangu-Markdown"><a href="#Pangu-Markdown" class="headerlink" title="Pangu-Markdown"></a>Pangu-Markdown</h3><p>作用：md 格式化</p><h3 id="Polacode"><a href="#Polacode" class="headerlink" title="Polacode"></a>Polacode</h3><p>作用：生成代码图片</p><p><img src="https://github.com/octref/polacode/raw/master/demo/usage.gif" alt="Polacode"></p><h3 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h3><p>作用：彩虹括号</p><p><img src="http://www.2gua.info/static/uploads/20160509171502.gif" alt="20160509171502"></p><h3 id="Remote-Containers"><a href="#Remote-Containers" class="headerlink" title="Remote - Containers"></a>Remote - Containers</h3><p>作用：远程服务器连接</p><p><img src="https://microsoft.github.io/vscode-remote-release/images/remote-containers-readme.gif" alt="remote-containers-readme"></p><h3 id="REST-Client"><a href="#REST-Client" class="headerlink" title="REST Client"></a>REST Client</h3><p>作用：REST 客户端</p><p><img src="https://raw.githubusercontent.com/Huachao/vscode-restclient/master/images/usage.gif" alt="vscode-restclient"></p><h3 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h3><p>作用：配置同步</p><p><img src="https://shanalikhan.github.io/img/login-with-github.png" alt="login-with-github"></p><h3 id="ssz-egg"><a href="#ssz-egg" class="headerlink" title="ssz-egg"></a>ssz-egg</h3><p>作用：快速生成 egg 代码</p><p><img src="https://s1.ax1x.com/2018/09/19/ieyEBd.gif" alt="ieyEBd"></p><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><p>作用：svg 查看器</p><p><img src="https://github.com/lishu/vscode-svg2/raw/master/images/f1s.gif" alt="vscode-svg2"></p><h3 id="TabNine"><a href="#TabNine" class="headerlink" title="TabNine"></a>TabNine</h3><p>作用：全语言补全</p><h3 id="VSC-Netease-Music"><a href="#VSC-Netease-Music" class="headerlink" title="VSC Netease Music"></a>VSC Netease Music</h3><p>作用：网易云音乐</p><p>使用：按下 F1 或 Ctrl Shift P 打开命令面板</p><p>输入命令前缀 网易云音乐 或 NeteaseMusic 开始探索 :D</p><h3 id="vscode-hexo-utils"><a href="#vscode-hexo-utils" class="headerlink" title="vscode-hexo-utils"></a>vscode-hexo-utils</h3><p>作用：vscode extension for hexo</p><p><img src="https://github.com/cwxyz007/vscode-hexo-utils/raw/master/docs-images/feature.gif" alt="feature"></p><h3 id="Weixin-Read"><a href="#Weixin-Read" class="headerlink" title="Weixin Read"></a>Weixin Read</h3><p>作用：微信读书插件</p><p><img src="https://images.redream.cn/upic/2019/20200520001558-ohsPIa.jpg" alt="Weixin Read"></p><h3 id="Word-Count-CJK"><a href="#Word-Count-CJK" class="headerlink" title="Word Count CJK"></a>Word Count CJK</h3><p>作用：cjk 文字计算，自带计数只支持英文</p><h3 id="Zhihu-Daily"><a href="#Zhihu-Daily" class="headerlink" title="Zhihu Daily"></a>Zhihu Daily</h3><p>作用：知乎日报</p><p><img src="https://camo.githubusercontent.com/7ee4ec2fd6cac35f5ff52436aa148c34c4e15b7b/68747470733a2f2f7778342e73696e61696d672e636e2f6c617267652f36356164376435616c79316735757866663938786a6a323162783075306538312e6a7067" alt="Zhihu Daily"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派上部署私有云</title>
    <link href="/posts/54d37429.html"/>
    <url>/posts/54d37429.html</url>
    
    <content type="html"><![CDATA[<p>回广州工作，家里的 nas 没带过来。只带了一台笔记本、一块树莓派、几块硬盘和硬盘底座。</p><p>就用手头的有的东西搭一个私有云。</p><span id="more"></span><h2 id="所需设备"><a href="#所需设备" class="headerlink" title="所需设备"></a>所需设备</h2><p>一台笔电、一块树莓派、一块硬盘、一个硬盘座，当然还需要一个路由器</p><p>首先需要把树莓派和笔记本都连上同一台路由器上，并能用 vnc 或者 ssh 登录上树莓派。把硬盘挂在树莓派上。</p><p>这步操作不懂赶紧去看看慕课网的 linux 教程吧。</p><h2 id="安装-samba"><a href="#安装-samba" class="headerlink" title="安装 samba"></a>安装 samba</h2><p>我之前的文章也有提到过 samba 的作用了（大概有），这里就不多说了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install samba samba-common-bin<br></code></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vi /etc/samba/smb.conf<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">[nas]<br>    path = /home/pi/disk/3<br>    <span class="hljs-built_in">read</span> only = no<br>    browsable = <span class="hljs-built_in">yes</span><br>    create mask = 0666<br>    force create mask = 0666<br></code></pre></td></tr></table></figure><h2 id="安装-php-和-nignx"><a href="#安装-php-和-nignx" class="headerlink" title="安装 php 和 nignx"></a>安装 php 和 nignx</h2><p>php 和 nginx 是为了提供页面服务的，php 不是硬性需求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install nginx php7.0fpm php7.0-cli php7.0-curl php7.0-gd php7.0-mcrypt php7.0<br></code></pre></td></tr></table></figure><p>配置 nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vi /etc/nginx/sites-available/default<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">server &#123;<br>  listen 80 default_server;<br>  listen [::]:80 default_server;<br><br>  root /var/www/html;<br>  index index.html  index.htm index.nginx-debian.html;<br>  server_name _;<br>  localhost / &#123;<br>    index index.html  index.htm index.php default.html default.htm default.php;<br>  &#125;<br><br>  localhost ~ \.php$ &#123;<br>    fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;<br>    fastcgi_param SCRIPT_FILENAME $document_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>    include fastcgi_params;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安装-aria2"><a href="#安装-aria2" class="headerlink" title="安装 aria2"></a>安装 aria2</h2><p>aria2 是下载工具，当然要安装了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt install aria2<br><span class="hljs-built_in">mkdir</span> /etc/aira2<br><span class="hljs-built_in">touch</span> /etc/aria2/aria2.conf<br><span class="hljs-built_in">touch</span> /etc/aria2/aria2.session<br></code></pre></td></tr></table></figure><p>修改<code>/etc/aria2/aria2.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/aria2/aria2.conf<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># </span><br><span class="hljs-comment">## &#x27;#&#x27;开头为注释内容，选项都有相应的注释说明，根据需要修改 ##</span><br><span class="hljs-comment">## 被注释的选项填写的是默认值，建议在需要修改时再取消注释  ##</span><br><br><span class="hljs-comment">## 文件保存相关 ##</span><br><br><span class="hljs-comment"># 文件的保存路径（可使用绝对路径或相对路径）, 默认：当前启动位置</span><br><span class="hljs-built_in">dir</span>=/home/pi/disk/3/pan<br><span class="hljs-comment"># 启用磁盘缓存，0 为禁用缓存，需 1.16 以上版本，默认：16M</span><br><span class="hljs-comment">#disk-cache=32M</span><br><span class="hljs-comment"># 文件预分配方式，能有效降低磁盘碎片，默认：prealloc</span><br><span class="hljs-comment"># 预分配所需时间：none &lt; falloc ? trunc &lt; prealloc</span><br><span class="hljs-comment"># falloc 和 trunc 则需要文件系统和内核支持</span><br><span class="hljs-comment"># NTFS 建议使用 falloc, EXT3/4 建议 trunc, MAC 下需要注释此项</span><br><span class="hljs-comment">#file-allocation=none</span><br><span class="hljs-comment"># 断点续传</span><br><span class="hljs-built_in">continue</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">## 下载连接相关 ##</span><br><br><span class="hljs-comment"># 最大同时下载任务数，运行时可修改，默认：5</span><br><span class="hljs-comment">#max-concurrent-downloads=5</span><br><span class="hljs-comment"># 同一服务器连接数，添加时可指定，默认：1</span><br>max-connection-per-server=5<br><span class="hljs-comment"># 最小文件分片大小，添加时可指定，取值范围 1M -1024M, 默认：20M</span><br><span class="hljs-comment"># 假定 size=10M, 文件为 20MiB 则使用两个来源下载；文件为 15MiB 则使用一个来源下载</span><br>min-split-size=10M<br><span class="hljs-comment"># 单个任务最大线程数，添加时可指定，默认：5</span><br><span class="hljs-comment">#split=5</span><br><span class="hljs-comment"># 整体下载速度限制，运行时可修改，默认：0</span><br><span class="hljs-comment">#max-overall-download-limit=0</span><br><span class="hljs-comment"># 单个任务下载速度限制，默认：0</span><br><span class="hljs-comment">#max-download-limit=0</span><br><span class="hljs-comment"># 整体上传速度限制，运行时可修改，默认：0</span><br><span class="hljs-comment">#max-overall-upload-limit=0</span><br><span class="hljs-comment"># 单个任务上传速度限制，默认：0</span><br><span class="hljs-comment">#max-upload-limit=0</span><br><span class="hljs-comment"># 禁用 IPv6, 默认：false</span><br><span class="hljs-comment">#disable-ipv6=true</span><br><span class="hljs-comment"># 连接超时时间，默认：60</span><br><span class="hljs-comment">#timeout=60</span><br><span class="hljs-comment"># 最大重试次数，设置为 0 表示不限制重试次数，默认：5</span><br><span class="hljs-comment">#max-tries=5</span><br><span class="hljs-comment"># 设置重试等待的秒数，默认：0</span><br><span class="hljs-comment">#retry-wait=0</span><br><br><span class="hljs-comment">## 进度保存相关 ##</span><br><br><span class="hljs-comment"># 从会话文件中读取下载任务</span><br>input-file=/etc/aria2/aria2.session<br><span class="hljs-comment"># 在 Aria2 退出时保存`错误/未完成`的下载任务到会话文件</span><br>save-session=/etc/aria2/aria2.session<br><span class="hljs-comment"># 定时保存会话，0 为退出时才保存，需 1.16.1 以上版本，默认：0</span><br><span class="hljs-comment">#save-session-interval=60</span><br><br><span class="hljs-comment">## RPC 相关设置 ##</span><br><br><span class="hljs-comment"># 启用 RPC, 默认：false</span><br>enable-rpc=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许所有来源，默认：false</span><br>rpc-allow-origin-all=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 允许非外部访问，默认：false</span><br>rpc-listen-all=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 事件轮询方式，取值：[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="hljs-comment">#event-poll=select</span><br><span class="hljs-comment"># RPC 监听端口，端口被占用时可以修改，默认：6800</span><br><span class="hljs-comment">#rpc-listen-port=6800</span><br><span class="hljs-comment"># 设置的 RPC 授权令牌，v1.18.4 新增功能，取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class="hljs-comment">#rpc-secret=&lt;TOKEN&gt;</span><br><span class="hljs-comment"># 设置的 RPC 访问用户名，此选项新版已废弃，建议改用 --rpc-secret 选项</span><br><span class="hljs-comment">#rpc-user=&lt;USER&gt;</span><br><span class="hljs-comment"># 设置的 RPC 访问密码，此选项新版已废弃，建议改用 --rpc-secret 选项</span><br><span class="hljs-comment">#rpc-passwd=&lt;PASSWD&gt;</span><br><span class="hljs-comment"># 是否启用 RPC 服务的 SSL/TLS 加密，</span><br><span class="hljs-comment"># 启用加密后 RPC 服务需要使用 https 或者 wss 协议连接</span><br><span class="hljs-comment">#rpc-secure=true</span><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件，</span><br><span class="hljs-comment"># 使用 PEM 格式时，您必须通过 --rpc-private-key 指定私钥</span><br><span class="hljs-comment">#rpc-certificate=/path/to/certificate.pem</span><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件</span><br><span class="hljs-comment">#rpc-private-key=/path/to/certificate.key</span><br><br><span class="hljs-comment">## BT/PT 下载相关 ##</span><br><br><span class="hljs-comment"># 当下载的是一个种子（以。torrent 结尾）时，自动开始 BT 任务，默认：true</span><br><span class="hljs-comment">#follow-torrent=true</span><br><span class="hljs-comment"># BT 监听端口，当端口被屏蔽时使用，默认：6881-6999</span><br>listen-port=51413<br><span class="hljs-comment"># 单个种子最大连接数，默认：55</span><br><span class="hljs-comment">#bt-max-peers=55</span><br><span class="hljs-comment"># 打开 DHT 功能，PT 需要禁用，默认：true</span><br>enable-dht=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 打开 IPv6 DHT 功能，PT 需要禁用</span><br><span class="hljs-comment">#enable-dht6=false</span><br><span class="hljs-comment"># DHT 网络监听端口，默认：6881-6999</span><br><span class="hljs-comment">#dht-listen-port=6881-6999</span><br><span class="hljs-comment"># 本地节点查找，PT 需要禁用，默认：false</span><br><span class="hljs-comment">#bt-enable-lpd=false</span><br><span class="hljs-comment"># 种子交换，PT 需要禁用，默认：true</span><br>enable-peer-exchange=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 每个种子限速，对少种的 PT 很有用，默认：50K</span><br><span class="hljs-comment">#bt-request-peer-speed-limit=50K</span><br><span class="hljs-comment"># 客户端伪装，PT 需要</span><br>peer-id-prefix=-TR2770-<br>user-agent=Transmission/2.77<br><span class="hljs-comment"># 当种子的分享率达到这个数时，自动停止做种，0 为一直做种，默认：1.0</span><br>seed-ratio=0<br><span class="hljs-comment"># 强制保存会话，即使任务已经完成，默认：false</span><br><span class="hljs-comment"># 较新的版本开启后会在任务完成后依然保留。aria2 文件</span><br><span class="hljs-comment">#force-save=false</span><br><span class="hljs-comment"># BT 校验相关，默认：true</span><br><span class="hljs-comment">#bt-hash-check-seed=true</span><br><span class="hljs-comment"># 继续之前的 BT 任务时，无需再次校验，默认：false</span><br>bt-seed-unverified=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 保存磁力链接元数据为种子文件 (.torrent 文件）, 默认：false</span><br>bt-save-metadata=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="获取服务"><a href="#获取服务" class="headerlink" title="获取服务"></a>获取服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /var/www/html<br>git <span class="hljs-built_in">clone</span> https://github.com/spoonysonny/pi-dashboard.git <span class="hljs-comment"># pi 的看板，感觉没什么用，如果要安装就需要前面的 php 也安装了。</span><br>git <span class="hljs-built_in">clone</span> https://github.com/mayswind/AriaNg.git aria2 <span class="hljs-comment"># 有界面的 aria2，需要前面安装的 aira2</span><br></code></pre></td></tr></table></figure><h2 id="安装-npm-和-node"><a href="#安装-npm-和-node" class="headerlink" title="安装 npm 和 node"></a>安装 npm 和 node</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#npm</span><br>curl -L https://www.npmjs.com/install.sh | sh<br>npm i --registry=https://registry.npm.taobao.org gulp -g<br><span class="hljs-built_in">cd</span> /var/www/html/aria2<br>npm i<br>gulp  clean build <br><span class="hljs-comment"># 把 dist 文件的内容复制一份到 /var/www/html/dl</span><br><span class="hljs-built_in">cp</span> -r /var/www/html/aria/dist /var/www/html/dl<br></code></pre></td></tr></table></figure><p>这样就能通过树莓派 ip&#x2F;dl 来进入到下载器的页面了</p><h2 id="将-aira2-设置为开机自启"><a href="#将-aira2-设置为开机自启" class="headerlink" title="将 aira2 设置为开机自启"></a>将 aira2 设置为开机自启</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vi /lib/systemd/system/aria2.service<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Unit]<br>Description= aria2<br>After=network.target<br> <br>[Service]<br><span class="hljs-comment">#PIDFile=/run/aria2.pid</span><br>ExecStart=aria2c -c --conf-path=/etc/aria2/aria2.conf &amp;<br>ExecStop=/bin/kill <span class="hljs-variable">$MAINPID</span><br>RestartSec=always<br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> aria2<br>systemctl start aria2<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>raspberrypi</tag>
      
      <tag>pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 安装 redis</title>
    <link href="/posts/91b3e2c2.html"/>
    <url>/posts/91b3e2c2.html</url>
    
    <content type="html"><![CDATA[<p>centos 上面安装软件，不记录下来，真的会忘记。</p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>在 redis 官网 <a href="https://redis.io/download">下载</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /user/local/src<br>wget  http://download.redis.io/releases/redis-5.0.3.tar.gz<br></code></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar xzf redis-5.0.3.tar.gz<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要先安装 gcc</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install gcc<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-5.0.3<br>make MALLOC=libc<br><span class="hljs-comment"># 将/usr/local/src/redis-5.0.3/src 目录下的文件加到/usr/local/bin 目录</span><br><span class="hljs-built_in">cd</span> src &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>等安装完毕，redis 就安装到<code>/user/local/src/redis-5.0.3</code>目录下</p><h2 id="设置-redis-开机自启动"><a href="#设置-redis-开机自启动" class="headerlink" title="设置 redis 开机自启动"></a>设置 redis 开机自启动</h2><p>1、在&#x2F;etc 目录下新建 redis 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc<br><span class="hljs-built_in">mkdir</span> redis<br></code></pre></td></tr></table></figure><p>2、将<code>/usr/local/src/redis-5.0.3/redis.conf</code> 文件复制一份到&#x2F;etc&#x2F;redis 目录下，并命名为 6379.conf　　</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /usr/local/src/redis-5.0.3/redis.conf /etc/redis/6379.conf<br></code></pre></td></tr></table></figure><p>3、将 redis 的启动脚本复制一份放到&#x2F;etc&#x2F;init.d 目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /usr/local/src/redis-5.0.3/utils/redis_init_script /etc/init.d/redisd<br></code></pre></td></tr></table></figure><p>4、设置 redis 开机自启动</p><p>先切换到&#x2F;etc&#x2F;init.d 目录下</p><p>然后执行自启命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig redisd on<br>service redisd does not support chkconfig<br></code></pre></td></tr></table></figure><p>看结果是 redisd 不支持 chkconfig<br>解决方法：</p><p>使用 vim 编辑 redisd 文件，在第一行加入如下两行注释，保存退出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># chkconfig:   2345 90 10</span><br><span class="hljs-comment"># description:  Redis is a persistent key-value database</span><br></code></pre></td></tr></table></figure><p>注释的意思是，redis 服务必须在运行级 2，3，4，5 下被启动或关闭，启动的优先级是 90，关闭的优先级是 10。</p><p>再次执行开机自启命令，成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chkconfig redisd on<br></code></pre></td></tr></table></figure><p>现在可以直接已服务的形式启动和关闭 redis 了</p><p>启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">service redisd start<br></code></pre></td></tr></table></figure><p>关闭：</p><p>方法 1：&#96;service redisd stop</p><p>方法 2：<code>redis-cli SHUTDOWN</code></p><blockquote><p>参考资料：<a href="https://www.cnblogs.com/zuidongfeng/p/8032505.html">CENTOS7 下安装 REDIS</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>reids</tag>
      
      <tag>Centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Centos 安装 mysql</title>
    <link href="/posts/7fb62aef.html"/>
    <url>/posts/7fb62aef.html</url>
    
    <content type="html"><![CDATA[<h2 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h2><p>在一个文件夹中下载 rpm</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/src<br>wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm<br></code></pre></td></tr></table></figure><p>安装 yum 源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum localinstall mysql80-community-release-el7-1.noarch.rpm<br></code></pre></td></tr></table></figure><p>更新 yum 源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum clean all<br>yum makecache<br></code></pre></td></tr></table></figure><p>开始安装 MySQL</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install mysql-community-server<br></code></pre></td></tr></table></figure><p>启动 MySQL</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> mysqld <span class="hljs-comment"># 开机自启</span><br>systemctl start mysqld <span class="hljs-comment"># 启动</span><br></code></pre></td></tr></table></figure><h2 id="登录以及初始化配置"><a href="#登录以及初始化配置" class="headerlink" title="登录以及初始化配置"></a>登录以及初始化配置</h2><p>启动成功后可以查看初始化密码随机生成的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /var/log/mysqld.log | grep password<br></code></pre></td></tr></table></figure><p>登录 MySQL 修改 mysql 用户密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql -u root -p<br></code></pre></td></tr></table></figure><blockquote><p>这里应该会出现报错<br>Your password does not satisfy the current policy requirements<br>mysql&gt; ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘yourpassword’;</p></blockquote><p>改成下面的形式</p><p>先把密码改成有大写字母，数字，小写字母和符号的密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;X2x.123456&#x27;</span>;<br>Query OK, 0 rows affected (0.02 sec)<br><span class="hljs-comment"># 查看密码策略</span><br>mysql&gt; SHOW VARIABLES LIKE <span class="hljs-string">&#x27;validate_password%&#x27;</span>;<br>+--------------------------------------+--------+<br>| Variable_name                        | Value  |<br>+--------------------------------------+--------+<br>| validate_password.check_user_name    | ON     |<br>| validate_password.dictionary_file    |        |<br>| validate_password.length             | 8      |<br>| validate_password.mixed_case_count   | 1      |<br>| validate_password.number_count       | 1      |<br>| validate_password.policy             | MEDIUM |<br>| validate_password.special_char_count | 1      |<br>+--------------------------------------+--------+<br>7 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.01 sec)<br><span class="hljs-comment"># 百度的错误方法</span><br><span class="hljs-comment"># mysql&gt; set global validate_password_policy=LOW;</span><br><span class="hljs-comment"># ERROR 1193 (HY000): Unknown system variable &#x27;validate_password_policy&#x27;</span><br><span class="hljs-comment"># 将策略改成低</span><br>mysql&gt; <span class="hljs-built_in">set</span> global validate_password.policy=LOW;<br>Query OK, 0 rows affected (0.00 sec)<br><span class="hljs-comment"># 把密码改成之前想要的</span><br>mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><h2 id="远程设置"><a href="#远程设置" class="headerlink" title="远程设置"></a>远程设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">mysql&gt; use mysql;<br>mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-comment"># 授权用户名的权限，赋予任何主机访问数据的权限</span><br>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> WITH GRANT OPTION;<br>mysql&gt; alter user <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>mysql&gt; FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Centos</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TODO</title>
    <link href="/posts/6c9b5b14.html"/>
    <url>/posts/6c9b5b14.html</url>
    
    <content type="html"><![CDATA[<h2 id="生日提醒"><a href="#生日提醒" class="headerlink" title="生日提醒"></a>生日提醒</h2><p>这个功能一直想做，但是一直没想明白怎么做。昨天送一个朋友生日礼物，发现真需要这个东西。没思路就把需求写出来吧。</p><span id="more"></span><p>输入命令 1，获取七天内生日的朋友</p><p>输入命令 2，获取七天内（前后三天）内生日的朋友</p><p>可设置好友的心愿单，用于送礼物</p><p>可设置好用的基本信息</p><h2 id="nodc"><a href="#nodc" class="headerlink" title="nodc"></a>nodc</h2><h3 id="升级模块"><a href="#升级模块" class="headerlink" title="升级模块"></a>升级模块</h3><p>每次安装 nodc 的模块的时候，记录下 nodc 的版本，用于做对照，发现有新的模块就是使用淘宝源安装</p><p>每次执行<code>nodc update</code>的时候，</p><ul><li>获取最新的源码</li><li>查看 home 目录下时候存在配置文件，不存在就生成一个，并使用淘宝源安装模块</li><li>对比配置文件，是否有新的更新，又则对比依赖版本，并使用淘宝源安装模块</li><li>否则什么都不做</li></ul>]]></content>
    
    
    <categories>
      
      <category>TODO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
      <tag>TODO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Motrix 下载百度云盘的资源</title>
    <link href="/posts/2599436d.html"/>
    <url>/posts/2599436d.html</url>
    
    <content type="html"><![CDATA[<p>Linux 上下载百度云盘的资源是真的很费劲，还好用 Motrix。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装就不说了，ArchLinux 装个软件就一行命令的事。什么？你不会？那我就大发慈悲告诉你吧。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay motrix<br></code></pre></td></tr></table></figure><h2 id="食用"><a href="#食用" class="headerlink" title="食用"></a>食用</h2><p>正常的使用是没问题的，如果发现偶尔有些下载不了，报 22 错误，可以在 <a href="https://github.com/acgotaku/BaiduExporter">BaiduExporter</a> 工具里面导出文件，把下载的方式复制出来。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">aria2c -c -s10 -k1M -x16 --enable-rpc=<span class="hljs-literal">false</span> -o <span class="hljs-string">&quot;《线性代数及其应用》中文 PDF（第 4 版）+英文 PDF（第 5 版）+习题指导。rar&quot;</span> --header <span class="hljs-string">&quot;User-Agent: netdisk;6.0.0.12;PC;PC-Windows;10.0.16299;WindowsBaiduYunGuanJia&quot;</span> --header <span class="hljs-string">&quot;Referer: https://pan.baidu.com/disk/home&quot;</span> --header <span class="hljs-string">&quot;Cookie: BDUSS=HhQMGNIQzRtZ1BadWN1RzFpcXRXMHV2MU0tdzBGLU85U1h5ckJjeWdzNVMyVHhlSUFBQUFBJCQAAAAAAAAAAAEAAACjdUo0sryxpr20AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFJMFV5STBVed; pcsett=1578541822-f4d9475649198345259ce74fdc9fce48&quot;</span> <span class="hljs-string">&quot;https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;path=%2F%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E3%80%8B%E4%B8%AD%E6%96%87PDF(%E7%AC%AC4%E7%89%88)%2B%E8%8B%B1%E6%96%87PDF(%E7%AC%AC5%E7%89%88)%2B%E4%B9%A0%E9%A2%98%E6%8C%87%E5%AF%BC.rar&quot;</span><br></code></pre></td></tr></table></figure><p>只需要把 header 改成这样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">aria2c -c -s10 -k1M -x16 --enable-rpc=<span class="hljs-literal">false</span> -o <span class="hljs-string">&quot;《线性代数及其应用》中文 PDF（第 4 版）+英文 PDF（第 5 版）+习题指导。rar&quot;</span> --header <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&quot;</span> --header <span class="hljs-string">&quot;Referer: https://pan.baidu.com/disk/home&quot;</span> --header <span class="hljs-string">&quot;Cookie: BDUSS=HhQMGNIQzRtZ1BadWN1RzFpcXRXMHV2MU0tdzBGLU85U1h5ckJjeWdzNVMyVHhlSUFBQUFBJCQAAAAAAAAAAAEAAACjdUo0sryxpr20AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFJMFV5STBVed; pcsett=1578541822-f4d9475649198345259ce74fdc9fce48&quot;</span> <span class="hljs-string">&quot;https://pcs.baidu.com/rest/2.0/pcs/file?method=download&amp;app_id=250528&amp;path=%2F%E3%80%8A%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E3%80%8B%E4%B8%AD%E6%96%87PDF(%E7%AC%AC4%E7%89%88)%2B%E8%8B%B1%E6%96%87PDF(%E7%AC%AC5%E7%89%88)%2B%E4%B9%A0%E9%A2%98%E6%8C%87%E5%AF%BC.rar&quot;</span><br></code></pre></td></tr></table></figure><p>扔到命令行下载即可。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210115024725.png" alt="Motrix"></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tool</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么学地理</title>
    <link href="/posts/49402151.html"/>
    <url>/posts/49402151.html</url>
    
    <content type="html"><![CDATA[<p>昨天和一个大三的网友聊天，谈到了地理学习的问题，总结一下学习方法，应该能给那些背地理课本的文科生一点帮助。</p><span id="more"></span><p>我不是文科生，但是因为之前在文科班待过，所以见过很多文科生很努力的背地理、历史和政治。背政治我觉得没毛病，毕竟没有太多的逻辑可言。但是历史和地理是可以当成一门课学习的，是有逻辑可言的。</p><h2 id="高中地理课本"><a href="#高中地理课本" class="headerlink" title="高中地理课本"></a>高中地理课本</h2><p>人教版的地理课本编排很合理，别的科目我不敢说，但是地理真的可以说课本很重要。</p><p>我自己的地理就是从人教版可是学的（虽然在以前没有地理课的时候，我就痴迷于看地图），所以我觉得只要把高中地理课本看懂，地理是不需要背的。</p><p>高中地理分为自然地理和人文地理，课本就按先自然地理再人文地理来讲诉的。</p><p>必修 1：自然地理，地球的自然规律与地理之间的关系，探讨的是地球在没有人为因素的情况下是什么样子的。</p><p>必修 2：人文地理，地球上出现人类之后，地球对人类生活的影响</p><p>必修 3：（这本我没学过）大概就是人对地球的保护与开发。</p><p>高中地理的根基，就是必修一的第一章内容，所有的问题都能回溯到第一章，第一章就是构架高中历史的根。</p><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>第一章将的是地球的公转和自转，而要看清的地球的全貌，最简便的方式就是看地图。而人教版的必修一提供的地形图，洋流图，世界地图（就是国界地图）。然后自己准备一个地球仪，可以是一个实体的地球仪，也可以是自己脑子里的地球模型。这就是学地理的工具。</p><p>这些地图都是地球的某些属性的显现。地球仪能直观的了解地球的地轴，公转和自转，地形图可以了解到地球的山川河流，洋流图结合地球的四季，季风会容易找到海水的运行规律。国界地图结合前面这些地图和历史，就会发现人类的历史中的战争，国界为什么是这样的（这就和历史结合起来了），为什么不同地区的人的饮食风俗会千差万别。</p><h2 id="笔记？思维导图"><a href="#笔记？思维导图" class="headerlink" title="笔记？思维导图"></a>笔记？思维导图</h2><p>学习地理需要的不是笔记，而是知识体系的思维导图。</p><p>知识体系是什么？简单来说就是知识树，这棵树上挂着各种知识点，当脉络上的某个关键词被唤醒，就能快速的找到这个关键词在这条脉络上的一连串知识点。举个简单的例子：“离岸风”</p><p><strong>离岸风</strong>: 就是河边海边，风从陆域吹向海域。</p><p>而当建立知识树体系，立马就会想到“向岸风”，然后又会想到物理里面的分子运行，热的传递，水和岩石的比热容。</p><p><strong>因为热总是总高的地方流向低的地方，水的比热容比岩石的大，所以水的温度会比岸上的问题要低，风就会朝着水的方向吹。</strong></p><p>上面这句话不是我看资料写出来的，而是我通过前面提到的知识点结合得到的解释。<strong>我们能否接受一个说法，主要是看这个解释是否符合我们的逻辑思维。</strong>如果只是简单的把上面的一句话记录到笔记里，背下来，考完试就忘掉了，那花费的时间就变得毫无意义不是吗？</p><h2 id="学习的方法"><a href="#学习的方法" class="headerlink" title="学习的方法"></a>学习的方法</h2><p>从小长辈就教导我，上课前要预习，上课时要认真听讲，放学后要复习今天学的内容。以前总是不以为然，接触了 YJango 的视频后，细细回想自己的当初学地理的时候不正是这样子的吗？</p><p>学习的过程中，大脑是这样拆解问题的：</p><p><code>what-&gt;how-&gt;why-&gt;how-&gt;what</code></p><p>解释一下就是：这个东西是什么？能做什么？为什么是这样子的？因为是这样子的，所以它能够做什么，因此把它叫做什么。</p><p>当我们认识一个东西的时候，第一个问题就是这是什么 (what)？好吧就算告诉我是什么也没用，因为我都不知道这个东西能干嘛用的 (how)。当了解能做什么的时候，就会问，那为什么可是用来做这个呢 (why)？</p><p>现在当有个问题抛过来，就能解释为什么 (why)？怎么做到的 (how)？所以这就是答案 (what)。</p><p>当经过上面的流程就吃透了一个知识点，并且将这个知识点连结到知识体系这颗大树上。</p><p>而这个学习方法不仅仅可以用在学习地理上，很多学科都能使用这种方法学习。</p><h2 id="补坑"><a href="#补坑" class="headerlink" title="补坑"></a>补坑</h2><p>为什么说地理和历史可以当一个学科来学？这个问题高中地理的必修二就是答案。</p><p>不同地域有不同的风俗，城市规模，这是因为地理气候对人的生活的影响。而随着时间的推移人类学会开发周边的资源改善生活，更好的适应该地域，形成不同的文化，人类的历史和人文地理是息息相关的。再举个例子：中国为什么自古以来就是农业大国。</p><p>长江黄河孕育了早期的中华文明，下游是大片的平原，有利于农耕文明的发展。从地理上就能解释为什么中国从一开始形成国家就是以农耕为基础的，在之前没有机器代替人力耕种的中国，历朝历代都是重农抑商，中国自古就有“以民为本”，“民以食为天”的说法。当吃饭都是个问题，那社会就会动荡，农民起义就出现了。</p>]]></content>
    
    
    <categories>
      
      <category>学习观</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习观</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux 安装软件之 Manim</title>
    <link href="/posts/55da6578.html"/>
    <url>/posts/55da6578.html</url>
    
    <content type="html"><![CDATA[<p>看了 3b1b 的视频，自己也想实现一个这样的动画，那首先需要安装 manim。折腾了一天，终于搞下来了，做个记录。</p><span id="more"></span><h2 id="安装前"><a href="#安装前" class="headerlink" title="安装前"></a>安装前</h2><p>本来是想使用 github 的 readme 的方法安装的，一致没办法成功，之后下载源码安装了。</p><h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/3b1b/manim.git<br></code></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>因为源码里的<code>requirements.txt</code>的<code>opencv-python</code>版本在镜像中找不到，需要手动修改下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">argparse==1.4.0<br>colour==0.1.5<br>numpy==1.16.4<br>Pillow==5.2.0<br>progressbar==2.5<br>scipy==1.3.0<br>tqdm==4.24.0<br>opencv-python==4.1.2.30<br>pycairo==1.17.1; sys_platform == &#x27;linux&#x27;<br>pycairo&gt;=1.18.1; sys_platform == &#x27;win32&#x27;<br>pydub==0.23.0<br>pyreadline==2.1; sys_platform == &#x27;win32&#x27;<br></code></pre></td></tr></table></figure><h3 id="CJK"><a href="#CJK" class="headerlink" title="CJK"></a>CJK</h3><p>如果没有打开这个，中文是不能显示的</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># manim/manimlib/constants.py</span><br>TEX_USE_CTEX = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p>主要是设置<code>.gitignore</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt"><br>AUTHORS<br>ChangeLog<br>manimlib.egg-info<br></code></pre></td></tr></table></figure><h3 id="其他包"><a href="#其他包" class="headerlink" title="其他包"></a>其他包</h3><p>这个主要是通过 pacman 安装一些以来支持<code>texlive</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S sox ffmpeg cairo texlive-full texlive-science texlive-publishers texlive-pstricks texlive-pictures texlive-music texlive-latexextra texlive-langextra texlive-langchinese texlive-humanities texlive-formatsextra texlive-fontsextra texlive-bibtexextra texlive-core texlive-bin<br></code></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>做好上面的工作，敲一行命令就可以去泡一壶茶慢慢喝了，因为编译时间实在是太长了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> python3 setup.py install<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 装视频</span><br>manim 1.py  Scene1 -lp<br><span class="hljs-comment"># 装 gif</span><br>ffmpeg -i Scene1.mp4 -vf scale=600:-1 -r 20 -f image2pipe -vcodec ppm - | convert -delay 5 -loop 0 - video.gif<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://manim.readthedocs.io/en/latest/installation/linux.html#ubuntu">Manim</a></li><li><a href="https://www.3blue1brown.com/">3blue1brown</a></li><li><a href="https://github.com/3b1b/manim">github</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
      <tag>math</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见 2019，你好 2020</title>
    <link href="/posts/8309927a.html"/>
    <url>/posts/8309927a.html</url>
    
    <content type="html"><![CDATA[<p>按照国 (dou) 际 (shi) 惯 (hu) 例 (che)，在元旦这天回顾自己做了什么，接下来的一年准备做什么。</p><span id="more"></span><h2 id="受益匪浅的学习观"><a href="#受益匪浅的学习观" class="headerlink" title="受益匪浅的学习观"></a>受益匪浅的学习观</h2><p>从上家公司离职后，在家里待了差不多半年事件。寒假的时候辅导我的表弟堂妹初中数学，引发了我对学习这件事情的深度思考，刚好又在 B 站上看到 YJango 的视频，让我对学习有更全面的认识。就不打算在这里细讲学习观了，有需要的小伙伴自行关注 YJango 大佬。</p><h2 id="树莓派与线性代数"><a href="#树莓派与线性代数" class="headerlink" title="树莓派与线性代数"></a>树莓派与线性代数</h2><p>原本以为自己离开学校后再也不会碰线性代数和高等数学了，三月份的时候和两个网友合作，用树莓派跑 NodeJS 服务实现无线 K 型热偶器。在校准数据的时候使用到了简单线性方程组实现软件消除误差。</p><p>这个合作的开源项目颠覆了我以往的想法。</p><ol><li>大学数学在以后的工作的生活中用不到</li><li>NodeJS 只能做后端开发</li></ol><p>大学学的数学，不管是微积分还是线性代数，我们觉得用不到，是因为还没使用的场景，或者根本不知道它能解决哪方面的问题，很多知识都当我们需要的时候才发现很重要。</p><p>国内互联网行业把 Python 炒的太神了，Python 能写服务，有前端框架，还能做数据挖掘和数据分析，更厉害的是树莓派上能运行 python 的代码操作 GPIO 来做物联网。经过这次的项目，我对国内的编程环境无话可说了，编程新人都快被忽悠瘸了。</p><p>去年 (2018) 年我就用 NodeJS 实现知乎爬虫，抓取了几十万的知乎用户数据。这次又用 NodeJS 突破次元壁，操作树莓派的 GPIO 实现物联网。几乎 Python 能做的，NodeJS 都能做，其他语言也能做。国内的编程环境真的让很多新人走了很多弯路。</p><p>希望继量子速读之后，别再用幼儿编程来忽悠中国家长了。说真的，孩子学编程没有点数学基础做支撑，根本不能写出能用的程序，还有可能扼杀孩子以后学编程的兴趣，错误的概念还可能让孩子在以后编程路上走不远。真的担心编程变成孩子应试教育的一门必修课，让他们也觉得编程只是为了考试。</p><h2 id="忙碌的工作"><a href="#忙碌的工作" class="headerlink" title="忙碌的工作"></a>忙碌的工作</h2><p>从四月入职到现在，我的 github 贡献度反向地反应出我的工作有多忙，开源代码有三个月没维护过。</p><p>当然也有很多收获，毕竟从小伙伴一起设计了三套系统，写接口文档，搬 (lu) 砖 (ma)，测试，维护接口文档。如果没有这些经历，我永远都觉得自己没有这种能力。也在这段忙碌的时间做了很多笔记，只是没成块的时间讲笔记整理成博客文章发表出来。</p><p>工作忙很多时候并不是因为有很多东西要做，大多数都是不明确的需求改了又改，心累。写好了的功能，又因为客户临时的需求直接在模块上做兼容，维护起来真的很费精力。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>得益于 YJango 大佬的视频，2019 年只要有空都在学习（学习使我快乐。jpg）。</p><p>工作上都是体力活，（主要是 NodeJS 玩的比较熟，工作上难度不算太大），所以学习内容大部分是和编程无关的。大部分是数学，前几个月还和另一群网友组队玩可编程键盘，最近又捡起了 Emacs。列一下吧：</p><ul><li>微积分</li><li>线性代数</li><li>nrf52 嵌入式编程</li><li>c 语言</li><li>rust 语言</li><li>英语</li><li>emacs</li></ul><p>2020 年这些还是我学习的方向。不过要细化一下这些学习任务。</p><ul><li>微积分：使用编程语言解释微积分，写成一个系列的笔记，说人话，将将可能的把所学输出给想学微积分的小伙伴，和大家分享自己的学习心得。</li><li>线性代数：最好是使用 3b1b 的视频方式，将线性代数可视化，配合自己的笔记，写成一个系列的笔记，目的和微积分的笔记一样。</li><li>nrf52 嵌入式编程：这个模块本来是想用来做编程键盘的芯片，后来白嫖了一把 45 键盘，所以这个只是单纯的拿来练手，把大学的本专业捡回来，这个也打算把学习心得记录下来。c 语言是为了玩嵌入式学的。</li><li>rust 语言：这个语言太难了，动不动就报错。但是又不甘心喔。每周用写一个 rust 和 c 的小 demo 上传 github 吧，代码蹩脚，总好过什么都不做强吧。就算再难，这个语言也很有魔力。</li><li>英语：出来混，迟早要还的。既然选择了编程，那还是安心学英语吧。每天安排一点时间刷下 APP。尽量让自己阅读原文文档（rust 英文文档是个不错的选择）。</li><li>emacs：为了使用 OrgMode 管理自己的笔记，这个真的很有必要学。写代码是不指望它了，但是做时间管理和笔记管理还是很有用的。强迫自己使用 emacs 写文章，主要是 OrgMode 的使用。</li></ul><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>2019 太忙了，也没有锻炼过。感觉身体都不是自己的了。2020 年，还自己一个好身体吧。刚好认识一个健身的程序员，多和健身的小伙伴交流，合理安排自己的生活，这样才对得起自己。</p><p>2020 刚刚开始，又有很多事要做了呢，立下 flag，别打脸啊！！！</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈 js 异步</title>
    <link href="/posts/8e5102f6.html"/>
    <url>/posts/8e5102f6.html</url>
    
    <content type="html"><![CDATA[<p>刚开始学 nodejs 的时候，被它的异步搞蒙了。并不像我们写 C 或者 Java 一样将前一步执行完才进行下一步。</p><span id="more"></span><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">begin<br>end<br>1s<br></code></pre></td></tr></table></figure><p>不管运行多少次，结果都是一样的。</p><p>我预期的结果是下面这样的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">begin<br>1s<br>end<br></code></pre></td></tr></table></figure><p>那代码就要这么写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>为什么要这么写呢？因为<code>setTimeout</code>的第一个参数是一个<strong>异步回调函数</strong>。</p><p>等等，<strong>异步</strong>？难道还有<strong>同步</strong>的回调函数吗？</p><p>有，我们看下异步和同步的两种回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo3</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">let</span> result1 = <span class="hljs-string">&#x27;result1&#x27;</span><br><span class="hljs-keyword">let</span> result2 = <span class="hljs-string">&#x27;result1&#x27;</span><br><br><span class="hljs-comment">// 异步读文件的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-params"></span>) &#123;<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./msyql.js&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    result1 = <span class="hljs-string">&#x27;readFile&#x27;</span><br>  &#125;)<br>  <span class="hljs-keyword">return</span> result1<br>&#125;<br><br><span class="hljs-comment">// 同步函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sync</span>(<span class="hljs-params"></span>) &#123;<br>  result2 = <span class="hljs-string">&#x27;change&#x27;</span><br>  <span class="hljs-keyword">return</span> result2<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">cb</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">cb</span>()<br>&#125;<br><br><span class="hljs-title function_">func</span>(readFile)<br><span class="hljs-title function_">func</span>(sync)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1) <span class="hljs-comment">// result1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2) <span class="hljs-comment">// change</span><br></code></pre></td></tr></table></figure><p>可能已经发现一个问题了。同步回调在这里好像并没有正在存在的必要，直接在调用前一个同步方法后面调用下一个同步方法就可以了。同步回调有助于我们更好的编写和阅读代码，这里先不提。那么剩下的是异步回调函数的作用。</p><h3 id="异步回调函数是干嘛用的"><a href="#异步回调函数是干嘛用的" class="headerlink" title="异步回调函数是干嘛用的"></a>异步回调函数是干嘛用的</h3><p>异步回调函数是 nodejs 现实异步的方式，那么只有这种方式吗？当然不是，可以用<code>events</code>实现发布订阅的模式实现异步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo4</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventEmitter</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>).<span class="hljs-property">EventEmitter</span><br><span class="hljs-keyword">const</span> events = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br>events.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;done&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>    events.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;done&#x27;</span>, <span class="hljs-string">&#x27;timeout&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">// begin</span><br><span class="hljs-comment">// 1s</span><br><span class="hljs-comment">// timeout</span><br><span class="hljs-comment">// end</span><br></code></pre></td></tr></table></figure><p>但是 <code>events</code> 的形式，可能会因为 <code>event name</code> 过多，导致编码困难，并没有回调函数的方式灵活。</p><p>但是回调函数也有缺点，就是嵌套严重，也就是我们常说的回调地狱（不知道回调地狱的，自行搜索）。</p><p>有没有更优雅的方式使用 JavaScript 的异步呢？像写同步代码一样简单的方式？答案是有的。</p><h3 id="Promise-async-await"><a href="#Promise-async-await" class="headerlink" title="Promise + async await"></a>Promise + async await</h3><p>Promise 是为了解决回调地狱的一个解决方案。把原来的回调嵌套的方式使用链式的方式来执行。视觉上比回调函数好那么一点，但是本质其实还是回调函数，而且链式调用里面也是存在回调函数的。</p><p>我们把 demo2 改一下，使用 Promise 写，结果还是和 demo2 一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>当你把最后的 then 里面的 log 写到 Promise 的下面的时候，发现<code>end</code>会比<code>1s</code>先打印出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br><span class="hljs-comment">// begin</span><br><span class="hljs-comment">// end</span><br><span class="hljs-comment">// 1s</span><br></code></pre></td></tr></table></figure><p>所以还是和异步回调一样的，只是把 callback 写成 then 罢了。那有没有更好的方法呢？</p><p>有，<code>async await</code>！</p><p><code>async await</code>其实是 Promise 的<strong>语法糖</strong>。语法糖，就是用更优雅的写法来写之前看起来相对比较丑的语法的方式。就像药丸很苦，我们医生为了骗小孩吃下去，就在药丸外边涂上一层糖衣，小孩子以为是糖果就会吃药。</p><p>我们简单举个语法糖的例子，箭头函数与函数表达式。这两种方式除了<code>this</code>，基本上一致的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> def = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;default&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">arrow</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;arrow&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们用<code>async await</code>来改写一下 demo5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// demo7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">run</span> = <span class="hljs-keyword">async</span>(<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;1s&#x27;</span>)<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;end&#x27;</span>)<br>&#125;<br><span class="hljs-title function_">run</span>()<br></code></pre></td></tr></table></figure><p>这样看起来就顺眼多了。当然有个要注意的地方，<code>await</code>必须写在<code>async</code>修饰的方法里面。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Archlinux 安装软件之 Arango</title>
    <link href="/posts/a6c5735f.html"/>
    <url>/posts/a6c5735f.html</url>
    
    <content type="html"><![CDATA[<p>最近想要使用 arango 代替以前的 mongo 数据库，但是一直安装不成功。原因是 AUR 的<code>PKGBUILD</code>中的<code>sha256sums</code>错误了，而且还是比较旧的版本。</p><p>最后自己手动安装搞定的</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-创建一个项目文件夹"><a href="#1-创建一个项目文件夹" class="headerlink" title="1. 创建一个项目文件夹"></a>1. 创建一个项目文件夹</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> arango &amp;&amp; <span class="hljs-built_in">cd</span> arango<br></code></pre></td></tr></table></figure><h3 id="2-获取-deb-包"><a href="#2-获取-deb-包" class="headerlink" title="2. 获取 deb 包"></a>2. 获取 deb 包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">aria2c -x15 -j15 -s5 -c https://download.arangodb.com/arangodb35/DEBIAN/amd64/arangodb3_3.5.3-1_amd64.deb --all-proxy=<span class="hljs-string">&quot;http://127.0.0.1:12333&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-获取-sha256sums"><a href="#3-获取-sha256sums" class="headerlink" title="3. 获取 sha256sums"></a>3. 获取 sha256sums</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sha256sum</span> arangodb3_3.5.3-1_amd64.deb<br></code></pre></td></tr></table></figure><p>编写 PKGBUILD</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Maintainer: dilipvamsi &lt;m.dilipvamsi at gmail dot com&gt;</span><br><br>_pkgname=<span class="hljs-string">&#x27;arangodb&#x27;</span><br>pkgname=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;_pkgname&#125;</span>-bin&quot;</span><br>pkgdesc=<span class="hljs-string">&quot;Arangodb binary from deb.&quot;</span><br>pkgver=3.5.3<br>pkgrel=1<br>_pkgver=<span class="hljs-string">&#x27;3.5.3-1&#x27;</span><br><span class="hljs-built_in">arch</span>=(<span class="hljs-string">&#x27;x86_64&#x27;</span>)<br>url=<span class="hljs-string">&quot;https://www.arangodb.com/&quot;</span><br>license=(<span class="hljs-string">&#x27;APACHE&#x27;</span>)<br>provides=(<span class="hljs-variable">$&#123;_pkgname&#125;</span>)<br>conflicts=(<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;_pkgname&#125;</span>&quot;</span><br>    <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;_pkgname&#125;</span>-client-bin&quot;</span><br>)<br><span class="hljs-built_in">source</span>=(<br>    https://download.arangodb.com/arangodb34/Community/Linux/arangodb3_<span class="hljs-variable">$&#123;_pkgver&#125;</span>_amd64.deb<br>)<br>validpgpkeys=(<span class="hljs-string">&quot;CD8CB0F1E0AD5B52E93F41E7EA93F5E56E751E9B&quot;</span>) <span class="hljs-comment"># Frank Celler (ArangoDB Debian Repository) &lt;info@arangodb.com&gt;</span><br><span class="hljs-comment"># 手动生成一次 sha256sum</span><br>sha256sums=(<br>    25b63ff6cd9dc97c270d46dfce0ca621c0de82d1d2cd03b20260c424418f3ad3<br>)<br><br>install=arangodb.install<br><span class="hljs-function"><span class="hljs-title">package</span></span>() &#123;<br>    msg2 <span class="hljs-string">&quot;Extracting the data.tar.gz...&quot;</span><br>    tar -xf <span class="hljs-string">&quot;data.tar.gz&quot;</span> -C <span class="hljs-variable">$pkgdir</span><br><br>    msg2 <span class="hljs-string">&quot;Removing /etc/init.d&quot;</span><br>    <span class="hljs-built_in">rm</span> -r <span class="hljs-variable">$pkgdir</span>/etc/init.d<br><br>    msg2 <span class="hljs-string">&quot;Moving all binaries from /usr/sbin to /usr/bin and then removing it&quot;</span><br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$pkgdir</span>/usr/sbin/* <span class="hljs-variable">$pkgdir</span>/usr/bin<br>    <span class="hljs-built_in">rmdir</span> <span class="hljs-variable">$pkgdir</span>/usr/sbin<br><br>    msg2 <span class="hljs-string">&quot;Changing /usr/sbin to /usr/bin in arangodb3.service&quot;</span><br>    sed -i <span class="hljs-string">&#x27;s/\/usr\/sbin/\/usr\/bin/g&#x27;</span> <span class="hljs-variable">$pkgdir</span>/lib/systemd/system/arangodb3.service<br><br>    msg2 <span class="hljs-string">&quot;Moving /lib to /usr/lib&quot;</span><br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$pkgdir</span>/lib <span class="hljs-variable">$pkgdir</span>/usr<br>&#125;<br></code></pre></td></tr></table></figure><p>编写<code>arangodb.install</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-function"><span class="hljs-title">pre_install</span></span>() &#123;<br><br>    <span class="hljs-built_in">set</span> -e<br>    getent group arangodb &gt;/dev/null || groupadd -r arangodb<br>    getent passwd arangodb &gt;/dev/null || useradd -r -g arangodb -d /usr/share/arangodb3 -s /bin/false -c <span class="hljs-string">&quot;ArangoDB Application User&quot;</span> arangodb<br><br>    <span class="hljs-comment"># check if the arangodb group was added locally in /etc/group</span><br>    <span class="hljs-comment"># if not, then the arangod binary will very likely try to open a socket</span><br>    <span class="hljs-comment"># connection to nscd to query the group information from there.</span><br>    <span class="hljs-comment"># if there is no nscd running, starting the arangod binary will fail</span><br>    (grep -q <span class="hljs-string">&quot;^arangodb:&quot;</span> /etc/passwd &amp;&amp; grep -q <span class="hljs-string">&quot;^arangodb:&quot;</span> /etc/group) || (nscd -g &gt;/dev/null 2&gt;&amp;1) || <span class="hljs-built_in">cat</span> 1&gt;&amp;2 &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">################################################################################</span><br><span class="hljs-string">Unable to query nscd service for user or group &#x27;arangodb&#x27;. As a consequence, it</span><br><span class="hljs-string">is very likely that installing or starting the arangod server will fail because</span><br><span class="hljs-string">it can neither find user/group &#x27;arangodb&#x27; in /etc/passwd or /etc/group nor via</span><br><span class="hljs-string">an nscd group lookup.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Please install &#x27;nscd&#x27; before installing the arangodb package.</span><br><span class="hljs-string">################################################################################</span><br><span class="hljs-string">EOF</span><br><br>    install -o arangodb -g arangodb -m 755 -d /var/lib/arangodb3<br>    install -o arangodb -g arangodb -m 755 -d /var/lib/arangodb3-apps<br>    install -o arangodb -g arangodb -m 755 -d /var/log/arangodb3<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">post_install</span></span>() &#123;<br><br>    <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Welcome to ArangoDB.</span><br><span class="hljs-string"></span><br><span class="hljs-string">  To get started you will need to tell systemd to reload it&#x27;s unit</span><br><span class="hljs-string">  files, then enable and start the service:</span><br><span class="hljs-string"></span><br><span class="hljs-string">   sudo systemctl daemon-reload</span><br><span class="hljs-string">   sudo systemctl enable arangodb3.service</span><br><span class="hljs-string">   sudo systemctl start arangodb3.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ArangoDB 3 ships with authentication enabled. To use it you will need</span><br><span class="hljs-string">  to start the server with &#x27;authentication = false&#x27; in the following</span><br><span class="hljs-string">  files:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    /etc/arangodb3/arangosh.conf</span><br><span class="hljs-string">    /etc/arangodb3/arangod.conf</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Then set the passwords and create the users you need:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    $&gt; arangosh</span><br><span class="hljs-string">    127.0.0.1:8529@_system&gt; require(&quot;org/arangodb/users&quot;).update(&quot;root&quot;,</span><br><span class="hljs-string">    &quot;mypassword&quot;)</span><br><span class="hljs-string">    127.0.0.1:8529@_system&gt; require(&quot;org/arangodb/users&quot;).save(&quot;myuser&quot;,</span><br><span class="hljs-string">    &quot;mypassword&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Set the &#x27;authentication = true&#x27; and then restart ArangoDB:</span><br><span class="hljs-string"></span><br><span class="hljs-string">   sudo systemctl restart arangodb3.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">  You can now use your username and password to access the</span><br><span class="hljs-string">  administrative interface at:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    http://localhost:8529</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ArangoDB now works with logrotate:</span><br><span class="hljs-string"></span><br><span class="hljs-string">     sudo logrotate /etc/logrotate.d/arangodb3</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Getting help:</span><br><span class="hljs-string">    http://stackoverflow.com/questions/tagged/arangodb</span><br><span class="hljs-string">    https://arangodb-community.slack.com</span><br><span class="hljs-string">    https://docs.arangodb.com/cookbook</span><br><span class="hljs-string">    https://docs.arangodb.com</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">post_upgrade</span></span>() &#123;<br><br>    <span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ArangoDB has been upgraded to $1.</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Take a look at the Changelog to see what is new:</span><br><span class="hljs-string">  https://github.com/arangodb/arangodb/blob/devel/CHANGELOG</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">pre_remove</span></span>() &#123;<br>    systemctl stop arangodb3.service<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">post_remove</span></span>() &#123;<br><br>    <span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">  ArangoDB has been uninstalled.</span><br><span class="hljs-string"></span><br><span class="hljs-string">  Any data you had stored in ArangoDB is still available in /var/lib/arangodb3.</span><br><span class="hljs-string">  Installed Foxx applications are still available in /var/lib/arangodb3-apps.</span><br><span class="hljs-string">  Log files are left in /var/log/arangodb3.</span><br><span class="hljs-string"></span><br><span class="hljs-string">EOF</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">makepkg -si<br></code></pre></td></tr></table></figure><p><code>/etc/arangodb3/arangosh.conf</code>和<code>/etc/arangodb3/arangod.conf</code>中的<code>authentication = true</code>给为<code>authentication = false</code>，进行免验证登录</p><p>设置密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-operator">&gt;</span> arangosh<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8529</span>@_system<span class="hljs-operator">&gt;</span> require(&quot;org/arangodb/users&quot;).<span class="hljs-keyword">update</span>(&quot;root&quot;,&quot;mypassword&quot;)<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8529</span>@_system<span class="hljs-operator">&gt;</span> require(&quot;org/arangodb/users&quot;).save(&quot;myuser&quot;,&quot;mypassword&quot;);<br></code></pre></td></tr></table></figure><p>将<code>authentication = false</code>改回<code>authentication = true</code>，并重启一下服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl restart arangodb3.service<br></code></pre></td></tr></table></figure><p>再次使用<code>arangosh</code>登录即可</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>calibre web 默认密码</title>
    <link href="/posts/9a8cff68.html"/>
    <url>/posts/9a8cff68.html</url>
    
    <content type="html"><![CDATA[<p>在树莓派用 docker 部署一个 calibre web，不过 bug 不少。上传失败，甚至 root 密码丢失了。幸好源码是开源的，找到生成密码的源码，把默认密码生成后写到数据库即可。</p><span id="more"></span><p>使用 navicat 连接到 calibre web 的数据库，一个<code>app</code>，是 web 的后台数据库，另一个是<code>metadata</code>。</p><p><code>app</code>的路径是<code>\\192.168.3.5\nas\opt\calibre\config\app.db</code></p><p><code>metadata</code>的路径是<code>\\192.168.3.5\nas\opt\calibre\books\calibre\metadata.db</code></p><p>使用下面的脚本得到默认密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># calibre web 默认密码</span><br><span class="hljs-keyword">from</span> werkzeug.security <span class="hljs-keyword">import</span> generate_password_hash<br><span class="hljs-comment">#</span><br>password = generate_password_hash(<span class="hljs-string">&quot;admin123&quot;</span>)<br><span class="hljs-built_in">print</span>(password)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">pbkdf2:sha256:50000$qx2hW72F$e5c27c3cfbb0a4badc0ababb2ed5e897eb1c660f29145f431723b076442b814e<br></code></pre></td></tr></table></figure><p>把密码填入到<code>app</code>的 user 表中。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>calibre</tag>
      
      <tag>Nas</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 git + Markdown 做笔记</title>
    <link href="/posts/1befa545.html"/>
    <url>/posts/1befa545.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://git-scm.com/">git</a> 对程序员一点都不陌生，而 <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> 更不用说了。</p><p>但是对非程序员的其他人来说，这东西能干嘛都不知道，更别说用来写笔记。</p><span id="more"></span><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git 是 Linux 作者 Linus 自己开发的代码版本管理工具。用于回溯代码，只要通过 git 提交过的版本，都能通过 git 找回来。</p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>说人话就是，你只需要关系你写的东西，而不需要在写东西的时候就过度关注你的样式。</p><p>直到你写完后，通过不同的解析器导出带有格式的文件。</p><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>需要先安装 <a href="https://gitforwindows.org/">git bash</a> 和 <a href="https://code.visualstudio.com/">visual studio code</a></p><p>安装好 <a href="https://gitforwindows.org/">git bash</a> 后，在你的笔记所在的目录中右键-&gt; git bash，会弹起一个黑窗口，在黑窗口中输入下面的的命令打开 <a href="https://code.visualstudio.com/">visual studio code</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">code .<br></code></pre></td></tr></table></figure><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p><strong>如果你第一次在文件夹中使用 git，需要在目录中执行 init 命令，创建一个 git 本地仓库。</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git init<br></code></pre></td></tr></table></figure><h2 id="使用-git-保存你的笔记"><a href="#使用-git-保存你的笔记" class="headerlink" title="使用 git 保存你的笔记"></a>使用 git 保存你的笔记</h2><p>当你编辑完笔记（或者你需要中断写作），最好使用 git 保存下笔记。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add . <span class="hljs-comment"># 把该次的更改全部加入缓存区</span><br>git commit -m <span class="hljs-string">&#x27;中断写作提交&#x27;</span> <span class="hljs-comment"># 提交该次缓存区内容到本地仓库，并添加 &#x27;中断写作提交&#x27; 到本次提交操作中。`-m` 后面添加上提交说明</span><br></code></pre></td></tr></table></figure><p><img src="/../imgs/git-push.png" alt="git-push.png"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://gitforwindows.org/">git bash</a>: windows 下的 git</li><li><a href="http://www.markdown.cn/">Markdown 教程</a>: Markdown 中文教程</li><li><a href="https://code.visualstudio.com/">visual studio code</a>: 免费的、好用的编辑器</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>MarkDown</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具收集</title>
    <link href="/posts/f055d0d4.html"/>
    <url>/posts/f055d0d4.html</url>
    
    <content type="html"><![CDATA[<h2 id="公开课"><a href="#公开课" class="headerlink" title="公开课"></a>公开课</h2><h3 id="Learning-SICP"><a href="#Learning-SICP" class="headerlink" title="Learning-SICP"></a><a href="https://github.com/DeathKing/Learning-SICP">Learning-SICP</a></h3><p>《计算机程序的构造和解释》公开课</p><h3 id="深入浅出现代-Web-编程"><a href="#深入浅出现代-Web-编程" class="headerlink" title="深入浅出现代 Web 编程"></a><a href="https://fullstackopen.com/">深入浅出现代 Web 编程</a></h3><p>一站式学习 React, Redux, Node.js, MongoDB, GraphQL 以及 TypeScript！这门课程会向你介绍基于 JavaScript 的现代 Web 编程技术。重点是利用 ReactJS 搭配 Node.js 开发的 REST API，来搭建单页面应用程序（SPA：Single Page Application）</p><span id="more"></span><h2 id="开源书"><a href="#开源书" class="headerlink" title="开源书"></a>开源书</h2><h3 id="design-patterns"><a href="#design-patterns" class="headerlink" title="design_patterns"></a><a href="https://github.com/me115/design_patterns">design_patterns</a></h3><p>《图说设计模式》，<a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html#">在线阅读</a></p><h3 id="linuxtools-rst"><a href="#linuxtools-rst" class="headerlink" title="linuxtools_rst"></a><a href="https://github.com/me115/linuxtools_rst">linuxtools_rst</a></h3><p>《Linux 工具快速教程》，<a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/">在线阅读</a></p><h3 id="the-new-world-linux"><a href="#the-new-world-linux" class="headerlink" title="the_new_world_linux"></a><a href="https://github.com/yangyangwithgnu/the_new_world_linux">the_new_world_linux</a></h3><p>《Linux 下的惬意生活》，<a href="https://github.com/yangyangwithgnu/the_new_world_linux#%E7%9B%AE%E5%BD%95">在线阅读</a></p><h3 id="python-guide"><a href="#python-guide" class="headerlink" title="python-guide"></a><a href="https://docs.python-guide.org/">python-guide</a></h3><p>Requests 库的作者——kennethreitz，写的 Python 入门教程。</p><h3 id="redisbook"><a href="#redisbook" class="headerlink" title="redisbook"></a><a href="https://github.com/huangz1990/redisbook">redisbook</a></h3><p>Redis 设计与实现（网络版）</p><h3 id="book"><a href="#book" class="headerlink" title="book"></a><a href="https://github.com/qyuhen/book">book</a></h3><p>雨痕大神写的学习笔记</p><h3 id="nginx-book"><a href="#nginx-book" class="headerlink" title="nginx-book"></a><a href="https://github.com/taobao/nginx-book">nginx-book</a></h3><p>Nginx 开发从入门到精通——本书的作者为淘宝核心系统服务器平台组的成员</p><h3 id="open-shell-book"><a href="#open-shell-book" class="headerlink" title="open-shell-book"></a><a href="https://github.com/tinyclub/open-shell-book">open-shell-book</a></h3><p>《Shell 编程范例》，面向操作对象学 Shell！</p><h3 id="rust-book-chinese"><a href="#rust-book-chinese" class="headerlink" title="rust-book-chinese"></a><a href="https://github.com/KaiserY/rust-book-chinese">rust-book-chinese</a></h3><p>Rust 程序设计语言 中文版</p><h3 id="explore-python"><a href="#explore-python" class="headerlink" title="explore-python"></a><a href="https://github.com/ethan-funny/explore-python">explore-python</a></h3><p>《Python 之旅》，该书总结了 Python 相关的知识点，力求深入浅出、条理清晰</p><h3 id="awesome-c-cn"><a href="#awesome-c-cn" class="headerlink" title="awesome-c-cn"></a><a href="https://github.com/jobbole/awesome-c-cn">awesome-c-cn</a></h3><p>C 资源大全中文版，包括了：构建系统、编译器、数据库、加密、初中高的教程&#x2F;指南、书籍、库等。</p><h3 id="js-stack-from-scratch"><a href="#js-stack-from-scratch" class="headerlink" title="js-stack-from-scratch"></a><a href="https://github.com/pd4d10/js-stack-from-scratch">js-stack-from-scratch</a></h3><p>从零开始构建 JavaScript 技术栈（中文版）</p><h3 id="typescript-tutorial"><a href="#typescript-tutorial" class="headerlink" title="typescript-tutorial"></a><a href="https://github.com/xcatliu/typescript-tutorial">typescript-tutorial</a></h3><p>TypeScript 入门教程</p><h3 id="growth-ebook"><a href="#growth-ebook" class="headerlink" title="growth-ebook"></a><a href="https://github.com/phodal/growth-ebook">growth-ebook</a></h3><p>全栈增长工程师指南，<a href="http://growth.phodal.com/">在线阅读</a></p><h3 id="free-programming-books-zh-CN"><a href="#free-programming-books-zh-CN" class="headerlink" title="free-programming-books-zh_CN"></a><a href="https://hellogithub.com/periodical/statistics/click/?target=https://github.com/justjavac/free-programming-books-zh_CN">free-programming-books-zh_CN</a></h3><p>免费的计算机编程类中文书籍</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="nodePPT"><a href="#nodePPT" class="headerlink" title="nodePPT"></a><a href="https://github.com/ksky521/nodePPT">nodePPT</a></h3><p>这可能是迄今为止最好的网页版演示库，<a href="http://qdemo.sinaapp.com/">在线演示</a>，其他 reveal.js 和 impress.js。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> npm install -g nodeppt<br></code></pre></td></tr></table></figure><h3 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a><a href="https://github.com/sylnsfar/qrcode">qrcode</a></h3><p>Python 写的生成动态、彩色、各式各样的二维码，详细的中文文档，通过 qrcode 生成的二维码样式如下</p><h3 id="mycli"><a href="#mycli" class="headerlink" title="mycli"></a><a href="https://hellogithub.com/periodical/statistics/click/?target=https://github.com/dbcli/mycli">mycli</a></h3><p><code>mycli</code> 是一个带语法高亮、自动补全的 MySQL 命令行客户端工具。例如，连接数据库方法：<code>mycli -h localhost -u 用户名 数据库</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S mycli<br></code></pre></td></tr></table></figure><h3 id="musicbox"><a href="#musicbox" class="headerlink" title="musicbox"></a><a href="https://github.com/darknessomi/musicbox">musicbox</a></h3><p>命令行网易云音乐</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pip3 install NetEase-MusicBox<br></code></pre></td></tr></table></figure><h3 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a><a href="https://github.com/soimort/you-get">you-get</a></h3><p>很好用的下载器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pip3 install you-get<br></code></pre></td></tr></table></figure><h3 id="glances"><a href="#glances" class="headerlink" title="glances"></a><a href="https://github.com/nicolargo/glances">glances</a></h3><p>一个比 top 更好用的系统信息查看工具。</p><h3 id="Music-dl"><a href="#Music-dl" class="headerlink" title="Music-dl"></a><a href="https://github.com/0xHJK/music-dl">Music-dl</a></h3><p>Music-dl 是一个基于 Python3 的命令行工具，可以从多个网站搜索和下载音乐，方便寻找音乐，解决不知道哪个网站有版权的问题。工具的本意是聚合搜索，API 是从公开的网络中获得，不是破解版，也听不了付费歌曲。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pip3 install pymusic-dl<br></code></pre></td></tr></table></figure><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a><a href="https://github.com/FeeiCN/dict">dict</a></h3><p>命令行下中英文翻译工具（Chinese and English translation tools in the command line），翻译服务基于有道翻译。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">dict node<br><span class="hljs-comment">################################### </span><br><span class="hljs-comment">#  node 节点</span><br><span class="hljs-comment">#  (U: noʊd E: nəʊd)</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment">#  n. 节点；瘤；[数] 叉点</span><br><span class="hljs-comment">#  n. (Node) 人名；（法）诺德</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment">#  Node : 节点</span><br><span class="hljs-comment">#          结点</span><br><span class="hljs-comment">#          交点</span><br><span class="hljs-comment">#  Phase Node : 开关节点</span><br><span class="hljs-comment">#                开</span><br><span class="hljs-comment">#  network node : 网络节点</span><br><span class="hljs-comment">#                  网络结点</span><br><span class="hljs-comment">#                  网路节点</span><br><span class="hljs-comment">###################################</span><br></code></pre></td></tr></table></figure><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pip install dict-cli<br></code></pre></td></tr></table></figure><h3 id="undistract-me"><a href="#undistract-me" class="headerlink" title="undistract-me"></a><a href="https://github.com/jml/undistract-me">undistract-me</a></h3><p>它可以在长时间运行的终端命令完成时通知你。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S undistract-me-git<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /usr/share/undistract-me/long-running.bash\nnotify_when_long_running_commands_finish_install&quot;</span> &gt;&gt; ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>可以设置超时的时间，默认为 10 秒</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim /usr/share/undistract-me/long-running.bash<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">LONG_RUNNING_COMMAND_TIMEOUT=10<br></code></pre></td></tr></table></figure><h3 id="todofi-git"><a href="#todofi-git" class="headerlink" title="todofi-git"></a><a href="https://github.com/todotxt/todo.txt-cli">todofi-git</a></h3><p>命令行下的 todolist</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S todofi-git<br></code></pre></td></tr></table></figure><h3 id="taskbook"><a href="#taskbook" class="headerlink" title="taskbook"></a><a href="https://github.com/klaussinani/taskbook/blob/master/docs/readme.ZH.md">taskbook</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> npm install --global taskbook<br></code></pre></td></tr></table></figure><h3 id="Motrix"><a href="#Motrix" class="headerlink" title="Motrix"></a>Motrix</h3><p>跨 PC 的下载器，颜值没的说，配合 <a href="https://github.com/acgotaku/BaiduExporter">BaiduExporter</a> 食用更香。</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay motrix<br></code></pre></td></tr></table></figure><h3 id="xdman"><a href="#xdman" class="headerlink" title="xdman"></a>xdman</h3><p>听说很 nice 的下载器，还没用，记录下来说不定以后能用上呢</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay xdman<br></code></pre></td></tr></table></figure><h3 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S neofetch<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sh">neofetch<br>                   -`                    bubao@mover<br>                  .o+`                   -----------<br>                 `ooo/                   OS: Arch Linux x86_64<br>                `+oooo:                  Host: TM1703 XMAKB3M0P130D<br>               `+oooooo:                 Kernel: 5.3.1-arch1-1-ARCH<br>               -+oooooo+:                Uptime: 6 hours, 20 mins<br>             `/:-:++oooo+:               Packages: 870 (pacman)<br>            `/++++/+++++++:              Shell: zsh 5.7.1<br>           `/++++++++++++++:             Resolution: 1920x1080, 1920x1080<br>          `/+++ooooooooooooo/`           DE: Deepin<br>         ./ooosssso++osssssso+`          WM: Metacity<br>        .oossssso-````/ossssss+`         WM Theme: deepin<br>       -osssssso.      :ssssssso.        Theme: deepin [GTK2/3]<br>      :osssssss/        osssso+++.       Icons: deepin [GTK2/3]<br>     /ossssssss/        +ssssooo/-       Terminal: deepin-terminal<br>   `/ossssso+/:-        -:/+osssso+-     Terminal Font: Bitstream Vera Sans Mono,monospace 13<br>  `+sso+:-`                 `.-/+oso:    CPU: Intel i5-8250U (8) @ 3.400GHz [54.0°C]<br> `++:.                           `-/+/   GPU: NVIDIA GeForce MX150<br> .`                                 `/   GPU: Intel UHD Graphics 620<br>                                         Memory: 5969MiB / 7872MiB (75%)<br></code></pre></td></tr></table></figure><h3 id="lolcat"><a href="#lolcat" class="headerlink" title="lolcat"></a>lolcat</h3><p>彩色 cat</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S lolcat<br></code></pre></td></tr></table></figure><h3 id="bat"><a href="#bat" class="headerlink" title="bat"></a><a href="https://github.com/sharkdp/bat">bat</a></h3><p>更好看的 cat</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S bat<br></code></pre></td></tr></table></figure><h3 id="npkill"><a href="#npkill" class="headerlink" title="npkill"></a><a href="https://github.com/voidcosmos/npkill">npkill</a></h3><p>作为 nodejs 开发者，很多项目有 <strong>node_modules</strong> 文件夹，时间长了，磁盘都被占的差不多了，这个工具能把当前目录下所有的 <strong>node_modules</strong> 列出来，然后选择删除。</p><h3 id="figlet"><a href="#figlet" class="headerlink" title="figlet"></a><a href="https://github.com/cmatsuoka/figlet">figlet</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S figlet<br></code></pre></td></tr></table></figure><p>字体</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">figlet <span class="hljs-string">&quot;KeyBoard&quot;</span><br> _  __          ____                      _ <br>| |/ /___ _   _| __ )  ___   __ _ _ __ __| |<br>| <span class="hljs-string">&#x27; // _ \ | | |  _ \ / _ \ / _` | &#x27;</span>__/ _` |<br>| . \  __/ |_| | |_) | (_) | (_| | | | (_| |<br>|_|\_\___|\__, |____/ \___/ \__,_|_|  \__,_|<br>          |___/                             <br></code></pre></td></tr></table></figure><h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a><a href="https://linux.die.net/man/1/tree">tree</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S tree<br></code></pre></td></tr></table></figure><p>以树的形式显示目录结构，另外找到一个有趣的项目，使用多种语言构建 <a href="https://github.com/kddeisz/tree">tree</a>。</p><h3 id="exa"><a href="#exa" class="headerlink" title="exa"></a><a href="https://github.com/ogham/exa">exa</a></h3><p>更好的 ls</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cargo install exa<br></code></pre></td></tr></table></figure><h3 id="fd"><a href="#fd" class="headerlink" title="fd"></a><a href="https://github.com/sharkdp/fd">fd</a></h3><p>更好的 find</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># yay -S fd</span><br>cargo install fd-find<br></code></pre></td></tr></table></figure><h3 id="onefetch"><a href="#onefetch" class="headerlink" title="onefetch"></a><a href="https://github.com/o2sh/onefetch">onefetch</a></h3><p>可以打印你当前项目的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; onefetch<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   bubao ~ git version 2.24.0<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   --------------------------<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   Project: nodc<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   HEAD: 73df2af (master, origin/master)<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   Pending: 1+-<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   Version: v1.1.0<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   Created: 2 年 5 个月前<br>JSJSJSJSJSJSJ    JSJ       SJS   Languages: JavaScript (85.7 %) Markdown (14.3 %) <br>JSJSJSJSJSJSJ    JS   JSJ   JS   Authors: 77% bubao 98<br>JSJSJSJSJSJSJ    JS    JSJSJSJ            20% oliver 26<br>JSJSJSJSJSJSJ    JSJS    JSJSJ            1% 布宝 2<br>JSJSJSJSJ  SJ    SJSJSJS   JSJ   Last change: 8 天前<br>JSJSJSJS         JS   JSJ   SJ   Repo: git@github.com:bubao/nodc.git<br>JSJSJSJSJ       SJSJ       JSJ   Commits: 127<br>JSJSJSJSJSJSJSJSJSJSJSJSJSJSJS   Lines of code: 1252<br>                                 Size: 575.57 KiB (40 files)<br>                                 License: MIT<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S onefetch<br></code></pre></td></tr></table></figure><h3 id="git-quick-stats"><a href="#git-quick-stats" class="headerlink" title="git-quick-stats"></a><a href="https://github.com/arzzen/git-quick-stats">git-quick-stats</a></h3><p>获取当前 git 的提交状态</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S git-quick-stats<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git quick-stats<br></code></pre></td></tr></table></figure><h3 id="axel"><a href="#axel" class="headerlink" title="axel"></a><a href="https://github.com/axel-download-accelerator/axel">axel</a></h3><p>轻量级下载加速器，据说比 wget 要好</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S axel<br></code></pre></td></tr></table></figure><h3 id="GitKraken"><a href="#GitKraken" class="headerlink" title="GitKraken"></a><a href="https://www.gitkraken.com/">GitKraken</a></h3><p>一个免费的 GitUI。</p><p><img src="https://www.gitkraken.com/img/index/gk-product-2.png" alt="gitkraken"></p><h3 id="OpenSCAD"><a href="#OpenSCAD" class="headerlink" title="OpenSCAD"></a><a href="https://www.openscad.org/">OpenSCAD</a></h3><p>一个开源的代码代码建模根据。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224052400.png" alt="openscad"></p><h3 id="KeeWeb"><a href="#KeeWeb" class="headerlink" title="KeeWeb"></a><a href="https://github.com/keeweb/keeweb">KeeWeb</a></h3><p>一个密码管理工具。</p><h3 id="coolbackgrounds"><a href="#coolbackgrounds" class="headerlink" title="coolbackgrounds"></a><a href="https://coolbackgrounds.io/">coolbackgrounds</a></h3><p>生成彩色的背景</p><h3 id="carbon"><a href="#carbon" class="headerlink" title="carbon"></a><a href="https://carbon.now.sh/">carbon</a></h3><p>输入代码生成精美的高亮图片。</p><h3 id="Czkawka"><a href="#Czkawka" class="headerlink" title="Czkawka"></a><a href="https://github.com/qarmin/czkawka">Czkawka</a></h3><p>重复文件查看工具</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224044318.gif" alt="Czkawka"></p><h3 id="meld"><a href="#meld" class="headerlink" title="meld"></a><a href="https://meldmerge.org/">meld</a></h3><p>文件差异查看器，可处理文件，也可处理文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210224044702.png" alt="meld"></p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="500lines"><a href="#500lines" class="headerlink" title="500lines"></a><a href="https://github.com/aosabook/500lines">500lines</a></h3><p>python 500 行代码能写什么</p><h3 id="learn-git-branching"><a href="#learn-git-branching" class="headerlink" title="learn git branching"></a><a href="https://learngitbranching.js.org/?locale=zh_CN">learn git branching</a></h3><p>可视化的方式学 git</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发工具安装</title>
    <link href="/posts/6261c48d.html"/>
    <url>/posts/6261c48d.html</url>
    
    <content type="html"><![CDATA[<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><span id="more"></span><p>以前装 Nodejs 的时候，都是源码安装或者 archlinux 源的二进制包安装。但是这样有写问题，就是源码安装更新删除不方便，包管理器安装版本控制，麻烦。<code>nvm</code>正好能解决这些问题。</p><p>使用安装 <a href="https://github.com/nvm-sh/nvm">nvm</a>:</p><p>官网：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash<br></code></pre></td></tr></table></figure><p>完成后检查<code>~/.bashrc</code>或者<code>~/.zshrc</code>中是否有以下内容，没有则补上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">&quot;<span class="hljs-subst">$([ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="hljs-comment"># This loads nvm</span><br></code></pre></td></tr></table></figure><p>安装完后并不能立即生效，使用下面的命令使其生效，或者退出当前控制台重新登录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> ~/.zshrc<br><span class="hljs-comment"># source ~/.bashrc</span><br></code></pre></td></tr></table></figure><p>安装最新的稳定版 node</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nvm install --lts<br></code></pre></td></tr></table></figure><p>github 的资源被 q 了。建议下载源码获取安装脚本。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl https://sh.rustup.rs -sSf | sh<br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.cargo/env<br></code></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">yay -S python<br><br>wget https://bootstrap.pypa.io/get-pip.py --no-check-certificate<br><br><span class="hljs-built_in">sudo</span> pyton get-pip.py<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Archlinux 上给 U 盘安装 Archlinux</title>
    <link href="/posts/ba3c82b6.html"/>
    <url>/posts/ba3c82b6.html</url>
    
    <content type="html"><![CDATA[<p>写项目的时候，出现过一次开发机与服务器的 mysql 不兼容的问题，想着换成 Linux 开发后端吧。但是公司的笔记本用 windows 还方便演示，所以并没打算把笔记本上面的系统换掉。寻思着怎么在移动硬盘里直接安装一个 Linux 系统，上下班带着跑，环境啊，系统啊都不用配置两套，而且还能即插即用。</p><span id="more"></span><p>但是问题来了，我没有 U 盘可以做启动盘了，我唯一能用的 U 盘里面放着资料，笔记本空间腾不出 60G。这个问题比安装 U 盘系统还麻烦，至少安装 U 盘系统网上找下资料就能解决了。我还没见过别人不用启动盘直接能装系统到另一个硬盘上的，等等，我们见过，在 windows 上能给 U 盘安装启动盘的 pe 系统，linux 上能给 U 盘制作系统盘。<strong>在现有系统上给别的磁盘安装别的系统</strong>似乎原理上是可行的，原理上可行就够了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>让我们详细分析下这个方案：</p><p>要解决这个问题，首先要明白 ArchLinux 是怎么安装的。</p><p>ArchWiki 的 <a href="%22https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)%22">Installation guide</a> 安装过程看下来，发现安装 ArchLinux 只需要使用正确的工具，就能给一个磁盘装上系统。</p><p>那其他的 Linux 衍生版也是这样吗？这个时候我要使用“反正法”了：“其他的系统并不清楚，反正 ArchLinux 是可以的”</p><p>懒得长篇大论了，直接看操作。</p><h2 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h2><p>一个可以用的电脑，要么是 Windows 要么是 ArchLinux，要是 Windows 的话自行去 VM 上安装个 ArchLinux，因为我这下面的操作都是在我笔记本的 ArchLinux 系统上完成的。</p><p>进入笔记本的 ArchLinux 系统，插上 U 盘，我们就开始操作了。</p><p>全程 Terminal 操作，so 打开你的 Terminal</p><h2 id="磁盘准备"><a href="#磁盘准备" class="headerlink" title="磁盘准备"></a>磁盘准备</h2><p>要安装系统，首先需要把磁盘格式化为对应的格式。</p><p>查看磁盘</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsblk<br></code></pre></td></tr></table></figure><p>找到插上的磁盘，我这里是<code>/dev/sda</code>，<strong>各位要看准自己的磁盘再操作，要不然重要信息可能会丢失哦</strong>。</p><p>给磁盘分区，<strong>你的移动磁盘的东西都会丢失，请做好备份</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">fdisk /dev/sda<br>g <span class="hljs-comment">#gpt 类型</span><br>n <span class="hljs-comment">#新建一个分区，这个分区用来放启动系统的引导的</span><br><span class="hljs-comment"># 分区的起始点 直接回车</span><br>+1024Mb <span class="hljs-comment"># 磁盘大小</span><br>n <span class="hljs-comment">#新建第二个分区，这个分区是根目录的挂载点</span><br><span class="hljs-comment"># 分区的起始点 直接回车</span><br>+100G <span class="hljs-comment"># 分一个 100G</span><br>n <span class="hljs-comment"># 新建第三个分区，这个分区是用于放启动</span><br><span class="hljs-comment"># 分区的起始点 直接回车</span><br><span class="hljs-comment"># 回车即可，剩余的空间都是这个分区的了</span><br>w <span class="hljs-comment"># 保存修改并退出 如果想重新分区或者不保存修改 q 退出</span><br></code></pre></td></tr></table></figure><p>格式化磁盘</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkfs.fat -F32 /dev/sdb1<br>mkfs.ext4 /dev/sdb2<br></code></pre></td></tr></table></figure><p>挂载磁盘</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> mount /dev/sdb2 /mnt<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /mnt/boot/efi<br><span class="hljs-built_in">sudo</span> mount /dev/sdb1 /mnt/boot/efi<br></code></pre></td></tr></table></figure><h2 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h2><p>方法一：使用安装机上的镜像，前提是该系统已换过源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /etc/pacman.conf /mnt/etc/pacman.conf<br></code></pre></td></tr></table></figure><p>方法二：乖乖地使用 vim 编辑下面的 list</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /mnt/etc/pacman.conf</span><br>[core]<br>SigLevel = Optional TrustAll<br>Include = /etc/pacman.d/mirrorlist<br><br>[extra]<br>SigLevel = Optional TrustAll<br>Include = /etc/pacman.d/mirrorlist<br><br>[community]<br>SigLevel = Optional TrustAll<br>Include = /etc/pacman.d/mirrorlist<br><br>[multilib]<br>SigLevel = Optional TrustAll<br>Include = /etc/pacman.d/mirrorlist<br><br>[archlinuxcn]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br><br>[antergos]<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.tuna.tsinghua.edu.cn/antergos/<span class="hljs-variable">$repo</span>/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /mnt/etc/pacman.d/mirrorlist</span><br><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Arch Linux repository mirrorlist</span><br><span class="hljs-comment">## Filtered by mirror score from mirror status page</span><br><span class="hljs-comment">## Generated on 2018-11-01</span><br><span class="hljs-comment">##</span><br><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.ustc.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.163.com/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.shu.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.neusoft.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.zju.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirror.lzu.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## China</span><br>Server = http://mirrors.xjtu.edu.cn/archlinux/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br><span class="hljs-comment">## Chile</span><br>Server = http://mirror.archlinux.cl/<span class="hljs-variable">$repo</span>/os/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><h3 id="安装基础系统"><a href="#安装基础系统" class="headerlink" title="安装基础系统"></a>安装基础系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> yay -Sy arch-install-scripts <span class="hljs-comment"># 安装脚本</span><br>su<br>pacstrap /mnt base base-devel ntfs-3g vim yay linux linux-firmware <span class="hljs-comment"># pacstrap 脚本，安装 base 组</span><br>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab <span class="hljs-comment"># 生成 fstab 文件</span><br>arch-chroot /mnt <span class="hljs-comment"># Change root 到新安装的系统</span><br></code></pre></td></tr></table></figure><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>设置为亚洲地区的上海城市，也就是中国的标准时区。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><p>运行 hwclock(8) 以生成 &#x2F;etc&#x2F;adjtime：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hwclock --systohc --localtime<br></code></pre></td></tr></table></figure><h3 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/locale.gen<br>-----------<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8<br></code></pre></td></tr></table></figure><p>接着执行 locale-gen 以生成 locale 讯息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">locale-gen<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">/etc/locale.conf<br>LANG=en_US.UTF-8<br></code></pre></td></tr></table></figure><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># /etc/hosts</span><br>127.0.0.1   localhost<br>::1    localhost<br>127.0.0.1    archlinux.localdomain    archlinux<br></code></pre></td></tr></table></figure><p>其中<code>archlinux</code> 就是你的主机名，你可以替把<code>archlinux</code>替换成你自己想要的主机名字</p><h3 id="设置密码与新建用户"><a href="#设置密码与新建用户" class="headerlink" title="设置密码与新建用户"></a>设置密码与新建用户</h3><p>给 root 更改密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">passwd<br></code></pre></td></tr></table></figure><p>新建一个用户，假如叫做<code>bubao</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m bubao<br></code></pre></td></tr></table></figure><p>给新用户<code>bubao</code>设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd bubao<br></code></pre></td></tr></table></figure><h3 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h3><p>如果是 Intel 的 CPU，安装<code>intel-ucode</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S intel-ucode<br></code></pre></td></tr></table></figure><p>如果当前电脑存在其他系统，安装 os-prober</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S os-prober<br></code></pre></td></tr></table></figure><p>UEFI 模式下，需要安装 efibootmgr，然后部署 grub：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S grub<br>pacman -S efibootmgr<br>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable<br>grub-mkconfig -o /boot/grub/grub.cfg <span class="hljs-comment"># 生成配置</span><br></code></pre></td></tr></table></figure><h2 id="美化与其他"><a href="#美化与其他" class="headerlink" title="美化与其他"></a>美化与其他</h2><h3 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S bluez bluez-utils<br>systemctl start bluetooth.service<br>systemctl <span class="hljs-built_in">enable</span> bluetooth.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《普林斯顿微积分读本》读书笔记————第一章</title>
    <link href="/posts/f6e25e88.html"/>
    <url>/posts/f6e25e88.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="集合-aggregate"><a href="#集合-aggregate" class="headerlink" title="集合 (aggregate)"></a>集合 (aggregate)</h2><p>为了后面我们更好的理解函数，我们需要先了解下什么是<strong>集合</strong>。</p><p>举个简单的例子：</p><p>问题家里有多少种宠物？分别是哪些？假如我们家有两只狗，三条金鱼，一只猫。那我应该怎么回答？</p><p>我应该回答：3 种，分别是狗，猫，鱼。</p><p><strong>狗</strong>，<strong>猫</strong>，<strong>鱼</strong>就组成了<strong>家里的宠物种类</strong>的集合。而<strong>狗</strong>，<strong>猫</strong>，<strong>鱼</strong>都是这个集合的<strong>元素</strong>。</p><p>用数学的方法表示就是<code>家里的宠物种类=&#123;狗，猫，鱼&#125;</code></p><h3 id="集合的三个特性"><a href="#集合的三个特性" class="headerlink" title="集合的三个特性"></a>集合的三个特性</h3><p><strong>确定性</strong>：</p><p>给定一个集合，任给一个元素，该元素或者属于或者不属于该集合，二者必居其一，不允许有模棱两可的情况出现。</p><p>说人话就是：在人类性别的集合里，要么是女要么是男。</p><p><strong>互异性</strong>：</p><p>一个集合中，任何两个元素都认为是不相同的，即每个元素只能出现一次。有时需要对同一元素出现多次的情形进行刻画，可以使用多重集，其中的元素允许出现多次。</p><p>说人话就是：我家两条狗，但是在<strong>家里的宠物种类</strong>的集合里只会出现一次<strong>狗</strong>，而不会出现两次<strong>狗</strong>。</p><p><strong>无序性</strong>：</p><p>一个集合中，每个元素的地位都是相同的，元素之间是无序的。集合上可以定义序关系，定义了序关系后，元素之间就可以按照序关系排序。但就集合本身的特性而言，元素之间没有必然的序。</p><p>说人话就是：<code>&#123;狗，猫，鱼&#125;</code>和<code>&#123;狗，鱼，猫&#125;</code>是等价的。</p><h3 id="集合的分类"><a href="#集合的分类" class="headerlink" title="集合的分类"></a>集合的分类</h3><p><strong>空集</strong>：</p><p>什么元素都没有的集合就是空集，用符号<code>∅</code>表示。</p><p>空集是个特殊的集合，它有 2 个特点：</p><ol><li>空集∅是任意一个非空集合的<strong>真子集</strong>。</li><li>空集是任何一个集合的<strong>子集</strong>。</li></ol><p>那什么是子集和真子集呢？</p><p><strong>子集</strong>：</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数</strong>是将一个对象转换为另一个对象的规则。起始对象成为<strong>输入</strong>，来自成为<strong>定义域</strong>的<strong>集合</strong>。返回的对象成为<strong>输出</strong>，来自称为<strong>上域</strong>的集合。</p><p>$$<br>f(x) &#x3D; x^2<br>$$</p><p><strong>$f$是变换规则，而$f(x)$是把这个变换规则应用与变量<code>x</code>后得到的结果。因此说<code>f(x) 是一个函数</code>是不正确的，应该是<code>f 是一个函数</code></strong></p><p>用 JavaScript 举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addOne</span>(<span class="hljs-params">x</span>)&#123;<br>    x += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">addOne</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(addOne) <span class="hljs-comment">// [Function: addOne]</span><br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ node<br>Welcome to Node.js v12.13.1.<br>Type <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt; <span class="hljs-keyword">function</span> addOne(x)&#123;<br>...     x += 1;<br>...     <span class="hljs-built_in">return</span> x;<br>... &#125;<br>undefined<br>&gt;<br>&gt; console.log(addOne(1))<br>2<br>undefined<br>&gt; console.log(addOne)<br>[Function: addOne]<br>undefined<br>&gt;<br></code></pre></td></tr></table></figure><p>令<code>g(x) = x^2</code>的定义域为大于或者等于 0 <code>(x&gt;=0)</code>，它看上去和上面的<code>f</code>一样，但是实际不一样，因为<strong>定义域</strong>不一样。例如<code>f(-1/2)=1/4</code>，而<code>g(-1/2)</code>却是没有意义的。函数<code>g</code>会拒绝非其定义域中的一切。由于<code>g</code>和<code>f</code>有相同的规则，但<code>g</code>的定义域小于<code>f</code>的定义域，因此我们就说<code>g</code>是由限制<code>f</code>的定义域产生的。</p><p><strong>一个函数必须给每一个有效的输入制定唯一的输出</strong>：一个患有消化不良症的狗，吃什么都会吐出来。我们可以令<code>j(x)=当狗吃 x 时呕吐物的颜色</code>。为了使之有效，我们必须认为如果狗吃了玉米面卷，它的呕吐物始终是一种颜色。如果有时是红色，有时是绿色，那就不太好了。</p><p>这个是什么意思呢？难道函数还会有不唯一的输出的情况？数学上的例子我是找不到了，以为我是数学渣。但是我能找到一类 JavaScript 的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTime</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; &quot;</span> + x<br>&#125;<br></code></pre></td></tr></table></figure><p>演示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜ node<br>Welcome to Node.js v12.13.1.<br>Type <span class="hljs-string">&quot;.help&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt; <span class="hljs-keyword">function</span> getTime(x)&#123;<br>... <span class="hljs-built_in">return</span> new Date() + <span class="hljs-string">&quot; &quot;</span> + x<br>... &#125;<br>undefined<br>&gt; getTime(2)<br><span class="hljs-string">&#x27;Wed Dec 11 2019 16:16:00 GMT+0800 (GMT+08:00) 2&#x27;</span><br>&gt; getTime(2)<br><span class="hljs-string">&#x27;Wed Dec 11 2019 16:16:02 GMT+0800 (GMT+08:00) 2&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>值域</strong>是所有可能的输出组成的集合。值域是可以重复的。</p><p><strong>值域</strong>是<strong>上域</strong>的子集，上域是可能输出的集合，值域是实际输出的集合。</p><h3 id="区间表示法"><a href="#区间表示法" class="headerlink" title="区间表示法"></a>区间表示法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">[a, b] <span class="hljs-comment"># &#123;x:a&lt;=x&lt;=b&#125; 闭区间</span><br>(a, b] <span class="hljs-comment"># &#123;x:a&lt;x&lt;=b&#125; 半开区间</span><br>[a, b) <span class="hljs-comment"># &#123;x:a&lt;=x&lt;b&#125; 半开区间</span><br>(a, b) <span class="hljs-comment"># &#123;x:a&lt;x&lt;b&#125; 开区间</span><br></code></pre></td></tr></table></figure><h3 id="求定义域"><a href="#求定义域" class="headerlink" title="求定义域"></a>求定义域</h3><p>就是求输入集合，需要考虑到式子对定义域取值的限制</p><ol><li>分数的分母不能是零</li><li>不能区一个附属的平方根</li><li>不能取一个负数和零的对数</li><li>tan(90deg) 是无定义的</li></ol><h3 id="利用图像求值域"><a href="#利用图像求值域" class="headerlink" title="利用图像求值域"></a>利用图像求值域</h3><h3 id="垂线检验"><a href="#垂线检验" class="headerlink" title="垂线检验"></a>垂线检验</h3><p>圆形轨道公式不是函数，因为没有通过垂线检验。</p><h2 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h2><ol><li>从一个函数 f 出发，使得：对于在 f 值域中的任意 y，都只有唯一的 x 值满足 f(x)&#x3D;y，也就是说，不同的输入对于不同的输出，现在我们就来定义反函数$f^-1$</li><li>$f^-1$的定义域和 f 的值域相同</li><li>$f^-1$的值域与 f 的定义域相同</li><li>$f^-1(y)$的值就是满足 f(x)&#x3D;y 的 x。所以如果 f(x)&#x3D;y，那么$f^-1(y)&#x3D;x$</li></ol><h3 id="水平线检验"><a href="#水平线检验" class="headerlink" title="水平线检验"></a>水平线检验</h3><p>Q1: 如何知道对于 f 值域中的任意 y，只有一个 x 值满足$f(x)&#x3D;y$，最好的方法也许是看下函数图像。</p><p><strong>水平线检验</strong>这是用来检验一个函数是否存在反函数的一种方法。</p><h3 id="求逆"><a href="#求逆" class="headerlink" title="求逆"></a>求逆</h3><p>Q2: 如何求得函数 f 的反函数？</p><p>如果一个函数有反函数，那么反函数的图像会与原函数关于 y&#x3D;x 对称（镜像）</p><h3 id="限制定义域"><a href="#限制定义域" class="headerlink" title="限制定义域"></a>限制定义域</h3><p>Q3: 如果水平线检验失败并且没有反函数，那么应该怎么办？</p><p>解决这个唯一的方法是：除了这些多个 x 值中的一个，我们放弃所有其他的值，这称为<strong>限制函数的定义域</strong>。</p><h3 id="关于反函数的反函数"><a href="#关于反函数的反函数" class="headerlink" title="关于反函数的反函数"></a>关于反函数的反函数</h3><p>如果 f 有反函数，那么对于在 f 定义域中的所有的 x，$f^-1(f(x)) &#x3D; x$成立；同样，对于在 f 值域中的所有的 y, 都有 x，$f(f^-1(y)) &#x3D; y$</p><p>对于限制定义域的情况需要注意：</p><p>如果一个函数 f 的定义域可以被限制，使得 f 有反函数$f^-1$，那么</p><ul><li>对于 f 值域中的所有 y，都有$f(f^-1(y))&#x3D;y$, 但是</li><li>$f^-1(f(x))$可能不等于 x；事实上，$f^-1(f(x)) &#x3D; x$仅当 x 在限制的定义域中才成立</li></ul><h2 id="函数的复合"><a href="#函数的复合" class="headerlink" title="函数的复合"></a>函数的复合</h2><p>将一个函数的输出作为另一个函数的输入。</p><p>我们使用下面的形式表示</p><p>$$<br>f&#x3D;hog<br>$$</p><p>从右到左，g 的输出是 h 的输入。</p><p>用 js 的写法就是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x*x;<br>&#125;<br><br><span class="hljs-keyword">const</span> f = <span class="hljs-title function_">h</span>(<span class="hljs-title function_">g</span>(<span class="hljs-number">1</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f)<br></code></pre></td></tr></table></figure><p>函数的复合与函数顺序有关，而函数的乘积与函数的顺序无关</p><h2 id="奇函数和偶函数"><a href="#奇函数和偶函数" class="headerlink" title="奇函数和偶函数"></a>奇函数和偶函数</h2><p>当对 f 定义域内所有的 x，有 f(-x)&#x3D;f(x)，则 f 是偶函数。函数的图像关于 y 轴具有镜像对称性</p><p>当对 f 定义域内所有的 x，有 f(-x)&#x3D;-f(x)，则 f 是奇函数。函数的图像关于原点具有 180 度的点对称性</p><p>一个函数可能是奇函数，也可能是偶函数，也可能是非奇非偶函数。</p><p>只有一个函数是又奇又偶的，f(x)&#x3D;0（零函数）</p><h3 id="怎么验证奇偶性"><a href="#怎么验证奇偶性" class="headerlink" title="怎么验证奇偶性"></a>怎么验证奇偶性</h3><p>要判断一个函数的奇偶性，使用定义，将原函数的 x 换成-x，与原函数做对比。 f(-x)&#x3D;f(x)，则 f 是偶函数。f(-x)&#x3D;-f(x)，则 f 是奇函数。前面两者都不是则是非奇非偶函数。</p><h2 id="线性函数的图像"><a href="#线性函数的图像" class="headerlink" title="线性函数的图像"></a>线性函数的图像</h2><p>形如 f(x)&#x3D;mx+b 的函数叫做线性函数。</p><p>如果已知直线通过点$(x_0,y_0)$斜率为 m，则它们的方程为$y-y_0&#x3D;m(x-x_0)$</p><p>如果一条直线通过$(x_1,y_1)$和$(x_2,y_2)$，则它的斜率为$(y_2-y_1)&#x2F;(x_2-x_1)$</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssl 加密文字</title>
    <link href="/posts/28762641.html"/>
    <url>/posts/28762641.html</url>
    
    <content type="html"><![CDATA[<p>做了一个实验，探索 openssl 的加密和解密的过程</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 使用 openssl 生产一个 rsa 私钥</span><br>openssl genrsa -out private.pem<br><span class="hljs-comment"># 通过私钥生成公钥</span><br>openssl rsa -<span class="hljs-keyword">in</span> private.pem -pubout -out public.pem<br><span class="hljs-comment"># 使用私钥签名 massage 文件内容并生成 enc 文件</span><br>openssl rsautl -sign -<span class="hljs-keyword">in</span> message -out enc -inkey private.pem<br><span class="hljs-comment"># 使用公钥验证 enc 文件生成 dec 文件查看内容</span><br>openssl rsautl -verify -<span class="hljs-keyword">in</span> enc -out dec -inkey public.pem -pubin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>encryption</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物联网——Nodejs 与树莓派玩转 K 型热偶器</title>
    <link href="/posts/1d941e94.html"/>
    <url>/posts/1d941e94.html</url>
    
    <content type="html"><![CDATA[<p>之前还没玩树莓派之前，网上经常看到 python 与树莓派成对出现，我一直很奇怪难道别的语言就不能在树莓派上调用 Gpio 了吗？之前别人说用 python 写爬虫比较方便的时候，我也不是用 node 写爬虫了吗？</p><p>昨天帮一个做测量的朋友做一个树莓派检测热偶数值的工具。我是电气自动化毕业，对热偶还是听说过的。但是学校都没教过怎么样去把电偶的电势差信号转为数字信号。于是朋友就给了一份 C++的树莓派驱动 Max6675 芯片代码。代码不长，所以我想用 node 重写一份，到时候写 api 也比较容易。</p><span id="more"></span><h2 id="写代码前的思考"><a href="#写代码前的思考" class="headerlink" title="写代码前的思考"></a>写代码前的思考</h2><p>因为之前没有实战过物联网（IoT），虽然一直想玩，买了树莓派，但没买线材和元器件，所以以前一直是看别人做。</p><p>在写代码之前，会涉及到两个问题：</p><ul><li>软硬件通信</li><li>nodejs 调用 Gpio</li></ul><p>要用软件和硬件通信，首先要解决<strong>数模转换</strong>和<strong>模数转换</strong>的问题。就目前这么简单的项目来说，主要是<strong>模数转换</strong>。从电势信号转** 0&#x2F;1 **信号，会涉及到一个问题：模拟值要转电频值，精度丢失。因为芯片内存是有限的，模拟值虽然有取值范围，但是范围内有无限个数值。抛开精度问题，模拟信号转换电信号就使用 Max6675 芯片解决。</p><p>nodejs 在 npmjs 上面有树莓派 Gpio 调用库，我找了一个 <strong>onoff</strong> 来写。</p><h2 id="Max6675-芯片"><a href="#Max6675-芯片" class="headerlink" title="Max6675 芯片"></a>Max6675 芯片</h2><p>好久都没接触过电子元件了，上网找这个芯片的驱动说明，很多都不懂啊。但是我是能看懂代码的，反推芯片工作原理还是可以的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * MAX6675 Thermal Couple Sensor</span><br><span class="hljs-comment"> * from http://www.bristolwatch.com/rpi/geany.htm</span><br><span class="hljs-comment"> * blog.kostecky.cz</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLK 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DBIT 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CS 7</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;wiringPi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Thermal_Couple_Read</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><span class="hljs-type">int</span> SENSOR_VALUE = <span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> Ctemp = <span class="hljs-number">-100.0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">wiringPiSetup</span>() == <span class="hljs-number">-1</span>) <span class="hljs-comment">//check platform</span><br>  &#123;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//init configuration</span><br>  <span class="hljs-built_in">pinMode</span>(CLK, OUTPUT);<br>  <span class="hljs-built_in">pinMode</span>(DBIT, INPUT);<br>  <span class="hljs-built_in">pinMode</span>(CS, OUTPUT);<br>  <span class="hljs-built_in">digitalWrite</span>(CS, HIGH);<br>  <span class="hljs-built_in">digitalWrite</span>(CLK, LOW);<br><br>  SENSOR_VALUE = <span class="hljs-built_in">Thermal_Couple_Read</span>();<br>  <span class="hljs-keyword">if</span> (SENSOR_VALUE == <span class="hljs-number">-1</span>)<br>  &#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;No sensor connected.\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;C = %4.2f°C\n&quot;</span>, <span class="hljs-built_in">Thermal_Couple_Read</span>()*<span class="hljs-number">0.25</span>);<br>        <span class="hljs-built_in">delay</span>(<span class="hljs-number">200</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Thermal_Couple_Read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">//init sensor</span><br>  <span class="hljs-built_in">digitalWrite</span>(CS, LOW);<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">2</span>);<br>  <span class="hljs-built_in">digitalWrite</span>(CS, HIGH);<br>  <span class="hljs-built_in">delay</span>(<span class="hljs-number">200</span>);<br><br>  <span class="hljs-comment">/* Read the chip and return the raw temperature value</span><br><span class="hljs-comment">  Bring CS pin low to allow us to read the data from</span><br><span class="hljs-comment">  the conversion process */</span><br><br>  <span class="hljs-built_in">digitalWrite</span>(CS, LOW);<br>  <span class="hljs-comment">/* Cycle the clock for dummy bit 15 */</span><br>  <span class="hljs-built_in">digitalWrite</span>(CLK, HIGH);<br>  <span class="hljs-comment">// delay(1);</span><br>  <span class="hljs-built_in">digitalWrite</span>(CLK, LOW);<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  Read bits 14-3 from MAX6675 for the Temp.</span><br><span class="hljs-comment">  Loop for each bit reading</span><br><span class="hljs-comment">  the value and storing the final value in &#x27;temp&#x27; */</span><br><br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">14</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>  &#123;<br>    <span class="hljs-built_in">digitalWrite</span>(CLK, HIGH);<br>    <span class="hljs-comment">// delay(1);</span><br>    value += <span class="hljs-built_in">digitalRead</span>(DBIT) &lt;&lt; i;<br>    <span class="hljs-built_in">digitalWrite</span>(CLK, LOW);<br>  &#125;<br><br>  <span class="hljs-comment">// check bit D2 if HIGH no sensor</span><br>  <span class="hljs-keyword">if</span> ((value &amp; <span class="hljs-number">0x04</span>) == <span class="hljs-number">0x04</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-comment">// shift right three places</span><br>  <span class="hljs-keyword">return</span> value &gt;&gt; <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外我还找到一个 python 版的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> RPi.GPIO <span class="hljs-keyword">as</span> GPIO<br><span class="hljs-keyword">import</span> time<br>GPIO.setmode(GPIO.BOARD)<br>GPIO.setwarnings(<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># set pin number for communicate with MAX6675</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_pin</span> (CS, SCK, SO, UNIT):<br>    <span class="hljs-keyword">global</span> sck<br>    sck= SCK<br>    <span class="hljs-keyword">global</span> so<br>    so = SO<br>    <span class="hljs-keyword">global</span> unit<br>    unit = UNIT<br><br>    GPIO.setup(CS, GPIO.OUT, initial = GPIO.HIGH)<br>    GPIO.setup(SCK, GPIO.OUT, initial = GPIO.LOW)<br>    GPIO.setup(SO, GPIO.IN)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_temp</span>(<span class="hljs-params">cs_no</span>):<br><br>    GPIO.output(cs_no, GPIO.LOW)<br>    time.sleep(<span class="hljs-number">0.002</span>)<br>    GPIO.output(cs_no, GPIO.HIGH)<br>    time.sleep(<span class="hljs-number">0.22</span>)<br><br>    GPIO.output(cs_no, GPIO.LOW)<br>    GPIO.output(sck, GPIO.HIGH)<br>    time.sleep(<span class="hljs-number">0.001</span>)<br>    GPIO.output(sck, GPIO.LOW)<br>    Value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        GPIO.output(sck, GPIO.HIGH)<br>        Value = Value + (GPIO.<span class="hljs-built_in">input</span>(so) * (<span class="hljs-number">2</span> ** i))<br>        GPIO.output(sck, GPIO.LOW)<br><br>    GPIO.output(sck, GPIO.HIGH)<br>    error_tc = GPIO.<span class="hljs-built_in">input</span>(so)<br>    GPIO.output(sck, GPIO.LOW)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>        GPIO.output(sck, GPIO.HIGH)<br>        time.sleep(<span class="hljs-number">0.001</span>)<br>        GPIO.output(sck, GPIO.LOW)<br><br>    GPIO.output(cs_no, GPIO.HIGH)<br><br>    <span class="hljs-keyword">if</span> unit == <span class="hljs-number">0</span>:<br>        temp = Value<br>    <span class="hljs-keyword">if</span> unit == <span class="hljs-number">1</span>:<br>        temp = Value * <span class="hljs-number">0.25</span><br>    <span class="hljs-keyword">if</span> unit == <span class="hljs-number">2</span>:<br>        temp = Value * <span class="hljs-number">0.25</span> * <span class="hljs-number">9.0</span> / <span class="hljs-number">5.0</span> + <span class="hljs-number">32.0</span><br><br>    <span class="hljs-keyword">if</span> error_tc != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -cs_no<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> temp<br><br>GPIO.cleanup()<br></code></pre></td></tr></table></figure><p><img src="https://img.mukewang.com/5c7a875a0001616104000400.jpg"></p><p>C++源码和 Max6675 封装模块可以得到下面几个信息</p><ul><li>树莓派通过设置** CS **针脚来设置芯片是获取数据状态还是读取信息状态</li><li>树莓派从 Max6675 的** SO **针脚获取二进制状态</li><li>树莓派通过设置 Max6675 的** SCK <strong>针脚的高低电平来获取</strong> SO **针脚的状态</li><li>**CS **针脚为高电平时，需要 200ms 时间来收集数据</li><li>二进制数可以通过移位累加来转换十进制数</li><li>Max6675 芯片的精度是 0.25°C，有十二位有效读数，其中有两位是小数点后面的。</li></ul><h2 id="onoff"><a href="#onoff" class="headerlink" title="onoff"></a>onoff</h2><p>nodejs 也有树莓派 Gpio 库，onoff 就是其中一个。</p><p>具体使用方法可以看 npmjs 上面的文档，这里就不对文档做翻译了。</p><p>我实现的源码在 <a href="https://github.com/bubao/Max6675-Raspberry-pi-nodejs">Max6675-Raspberry-pi-nodejs</a>，英语实在太蹩脚了，等有空写个完整的中文文档吧，到时候翻译成英文再发布到 npmjs，方便大家使用（万把块钱的 K 型热偶想必没人会拿来做室内温度计吧？）。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://img.mukewang.com/5c7ac43b00010f7c06391136.png" alt="图片描述"></p><p>实际操作</p><p><img src="http://img.mukewang.com/5c7ac4680001679840323024.jpg" alt="图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>raspberrypi</tag>
      
      <tag>WoT</tag>
      
      <tag>pi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何证明“我就是我”</title>
    <link href="/posts/16f60d2.html"/>
    <url>/posts/16f60d2.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>感想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux 安装</title>
    <link href="/posts/1b1ffc04.html"/>
    <url>/posts/1b1ffc04.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>2018 年 11 月 19 日 22:06:41</p></blockquote><p>在此之前，需要先用 EFI 把 Windows 装好，接下来就要装 Linux 了。</p><span id="more"></span><blockquote><p>以下大部分内容来自于 <a href="https://www.lengqing.org/author/1/">LengQing</a> 的博客 <a href="https://www.lengqing.org/archives/43/">Arch Linux 的安装</a></p></blockquote><h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><p>Linux 有这么多发行版，为什么选择 archlinux 呢？</p><ol><li>因为 archlinux 从零开始安装，所有的东西都需要用户自己设定，也就是可自定义</li><li>有完整的 wiki，不会的时候可以查下 wiki，问题就解决了</li><li>滚动更新，不过偶尔会挂掉的</li></ol><h2 id="1-制作启动盘"><a href="#1-制作启动盘" class="headerlink" title="1. 制作启动盘"></a>1. 制作启动盘</h2><p>下载 <a href="https://rufus.ie/en_IE.html">Rufus</a></p><p>下载最新的 Archlinux 镜像，插入 U 盘开始制作启动盘。</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204224956.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204224956"></p><h2 id="2-开始安装"><a href="#2-开始安装" class="headerlink" title="2. 开始安装"></a>2. 开始安装</h2><p>进入启动盘</p><h2 id="3-连接网络"><a href="#3-连接网络" class="headerlink" title="3. 连接网络"></a>3. 连接网络</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 无线网</span><br>wifi-menu<br><span class="hljs-comment"># 有线网</span><br>dhcpcd<br></code></pre></td></tr></table></figure><p>测试是否连通</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ping -c 4 baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225116.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225116"></p><p>更新系统时间，没啥输出，不用管</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">timedatectl set-ntp <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="4-分区及挂载分区"><a href="#4-分区及挂载分区" class="headerlink" title="4. 分区及挂载分区"></a>4. 分区及挂载分区</h2><p>列出磁盘</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fdisk -l<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225211.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225211"></p><p>我这里第一块是 60GiB 的盘，设备是 <code>/dev/sda</code> 。</p><p>第二块应该是启动盘，不用管。</p><p>对 <code>/dev/sda</code> 进行分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">fdisk /dev/sda<br></code></pre></td></tr></table></figure><p>创建 GPT 分区表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">g<br></code></pre></td></tr></table></figure><p>创建一个新的分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">n<br></code></pre></td></tr></table></figure><p>输入分区号，从 1 开始</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">1<br></code></pre></td></tr></table></figure><p>输入起始扇区，默认回车即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">回车<br></code></pre></td></tr></table></figure><p>输入 +200M 创建一个 esp 分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">+200M<br></code></pre></td></tr></table></figure><p>继续创建新分区做根目录分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">n<br>回车<br></code></pre></td></tr></table></figure><p>由于没有其它分区，硬盘剩余空间都分配，所以直接回车分配所有空间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">回车<br></code></pre></td></tr></table></figure><p>查看创建的分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">p<br></code></pre></td></tr></table></figure><p>可以看到两个分区，分别是 200M 的 sda1 和 59.8G 的 sda2 （都没有格式化）</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225332.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225332"></p><p>改变 200M 的 esp 分区的类型</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">t<br></code></pre></td></tr></table></figure><p>选择分区号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">1<br></code></pre></td></tr></table></figure><p>选择分区类型，按 L 可以列出所有类型，不过我并不知道如何退出列表，反正序号 1 是”EFI System”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225401.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225401"></p><p>保存更改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">w<br></code></pre></td></tr></table></figure><p>格式化 esp 分区和根分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkfs.fat -F32 /dev/sda1<br>mkfs.ext4 /dev/sda2<br></code></pre></td></tr></table></figure><p>挂载根分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount /dev/sda2 /mnt<br></code></pre></td></tr></table></figure><p>挂载 esp 分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> /mnt/boot<br>mount /dev/sda1 /mnt/boot<br></code></pre></td></tr></table></figure><h2 id="5-安装基本系统"><a href="#5-安装基本系统" class="headerlink" title="5 安装基本系统"></a>5 安装基本系统</h2><p>选择镜像源<br>编辑源列表文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/pacman.d/mirrorlist<br></code></pre></td></tr></table></figure><p>将 China 的那一行挪到最前面（也可以直接在最前面加上 China 的源地址，上面的具有优先权）</p><p>找到那一行，光标在最前面的时候直接按下 <code>Ctrl+K</code> ，然后回到第一行按下 <code>Ctrl+U</code> ，手打也行</p><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225441.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225441"></p><p>然后按下 <code>Ctrl+X</code> ，输入 <code>y</code> ，回车，即可保存</p><p>安装基本包（ <code>base-devel</code> 不是必须的，可以不加）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacstrap /mnt base base-devel<br></code></pre></td></tr></table></figure><p>这个样子就是系统装好了，只不过还不能开机</p><h2 id="6-开机前配置"><a href="#6-开机前配置" class="headerlink" title="6 开机前配置"></a>6 开机前配置</h2><p>生成自动挂载分区的 fstab 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">genfstab -L /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure><p>检查是否正确</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /mnt/etc/fstab<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny/img/20210204225512.png" alt="https://cdn.jsdelivr.net/gh/bubao/picgo_db@master/img/20210204225512"></p><p>理论上格式应该与我的完全相同，假如格式差别很大的可能就有问题了，也许手动检查 UUID 并创建 fstab 文件是个好主意。</p><p>切换到新系统操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">arch-chroot /mnt<br></code></pre></td></tr></table></figure><p>如图所示，即为成功</p><p>设置时区（我比较靠近上海，便以上海为例）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br></code></pre></td></tr></table></figure><p>根据硬件时间调整时间（ UTC 时间为例）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hwclock --systohc<br></code></pre></td></tr></table></figure><p>本地化<br>编辑文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/locale.gen<br></code></pre></td></tr></table></figure><p>将下面的几行前面的 # 删掉，保存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8<br></code></pre></td></tr></table></figure><p>接着执行 locale-gen 以生成 locale 讯息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">locale-gen<br></code></pre></td></tr></table></figure><p>选择英文作为默认语言（暂不推荐中文，以防乱码，等装了字体桌面什么的可以考虑中文）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/locale.conf<br></code></pre></td></tr></table></figure><p>加入以下内容并保存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">LANG=en_US.UTF-8<br></code></pre></td></tr></table></figure><p>设置主机名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nano /etc/hostname<br></code></pre></td></tr></table></figure><p>输入你要的主机名并保存</p><p>编辑 hosts 文件<br>加入下面的内容，其中的 arch 替换为你的主机名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">127.0.0.1 localhost.localdomain localhost<br>::1 localhost.localdomain localhost<br>127.0.1.1 arch.localdomain <span class="hljs-built_in">arch</span><br></code></pre></td></tr></table></figure><p>设置 root 密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">passwd<br></code></pre></td></tr></table></figure><p>Intel CPU 需要安装的 intel-ucode</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S intel-ucode<br></code></pre></td></tr></table></figure><p>安装引导</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pacman -S os-prober grub efibootmgr<br></code></pre></td></tr></table></figure><p>部署 grub</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub<br></code></pre></td></tr></table></figure><p>生成配置文件（我这里会出错）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">warning failed to connect to lvmetad，falling back to device scanning.<br></code></pre></td></tr></table></figure><p>编辑 &#x2F;etc&#x2F;lvm&#x2F;lvm.conf 文件，找到 use_lvmetad &#x3D; 1 将 1 修改为 0（这一行在很下面，翻半天），保存，重新生成配置文件</p><h2 id="7-重启进入新系统"><a href="#7-重启进入新系统" class="headerlink" title="7 重启进入新系统"></a>7 重启进入新系统</h2><p>安装基本上结束了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">exit</span><br>reboot<br></code></pre></td></tr></table></figure><p>顺便拔掉启动盘<br>开机就算是进入新系统了，如果不能开机我也不管了，教程到这里结束<br>正常的开机应该跟我的一样</p><p>然后滚更新，最新的，很棒！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精通 Node 爬虫-01-给门外汉说明白什么是爬虫</title>
    <link href="/posts/e928f138.html"/>
    <url>/posts/e928f138.html</url>
    
    <content type="html"><![CDATA[<p>记得我刚刚入职不久，我就接到一个爬虫任务。当时负责设计的同事就问我到底什么是爬虫，当时我的解释是：“<strong>程序模仿人访问网页数据的行为，获取想要的数据。</strong>”这个解释是没问题的，但是门外汉肯定听得一脸懵逼。而且更让我惊讶的是，同样是敲代码的同行，也不是每一个人都会写爬虫（之前我一直都觉得爬虫应该每一个敲代码的都会吧），不少的人还对爬虫有很多误解。</p><span id="more"></span><h2 id="到底什么是爬虫"><a href="#到底什么是爬虫" class="headerlink" title="到底什么是爬虫"></a>到底什么是爬虫</h2><p>在说明白这个问题之前，我想先问一个问题：<strong>你是怎么看到这篇文章的？</strong>这个问题很重要，因为它是回答<strong>什么是爬虫</strong>以及<strong>爬虫原理</strong>的关键。</p><p>这个问题的前提条件如下：</p><ol><li>我写了这篇文章发表在慕课网手记</li><li>你想了解爬虫</li></ol><p>如果没有第一点，别人是看不到这篇文章的（废话）。如果没有第二点，别人是不会看这篇文章的（泥垢了 [･｀ Д´･ ]）。第一点的<code>文章</code>是<strong>数据</strong>，第二点的<code>爬虫</code>是<strong>关键词</strong>。</p><p>让我假设一下你是怎么访问到这篇文章的：</p><p>情况一：</p><ol><li>你百度<strong>关键词</strong><code>爬虫</code>，百度给你显示了很多个结果，其中一个结果是这篇文章</li><li>你进入了慕课网手记。</li></ol><p>情况二：</p><p>你访问慕课网，想学习一些关于爬虫的知识，于是你在慕课网的搜索框里输入了<strong>关键词</strong><code>爬虫</code>，重现情况一的第二步。</p><p>回答完这个问题，就能回答<strong>什么是爬虫</strong>了。划重点：</p><p>重点分割线 start</p><hr><p><strong>爬虫就是一个模仿人浏览网页行为，根据所提供的<code>关键词</code>，获取到所需<code>数据</code>的程序。</strong></p><p>所以你怎么访问网页数据，爬虫也是以同样的方式去获取数据。<strong>无论是 node 写的爬虫还是 python 写的爬虫，它们原理都是一样的。</strong></p><p><strong>给爬虫程序一个网址（<code>url</code>），设定好要爬取的<code>关键词</code>和<code>爬取规则</code>，程序模仿浏览器向网站的服务器发起请求，服务器返回请求结果（这个结果可能是<code>HTML</code>代码，也可能是 JSON 格式的数据），通过<code>爬取规则</code>过滤出所需的数据，并处理成适合的数据格式储存到本地。</strong></p><hr><p>重点分割线 end</p><p>关于<code>url</code>和<code>HTML</code>的解释，可以看看秋名山车神的文章：<a href="https://www.imooc.com/article/16020">精通 Python 爬虫-01-不断前行的蜘蛛</a>。</p><h2 id="你是不是对爬虫有什么误解？"><a href="#你是不是对爬虫有什么误解？" class="headerlink" title="你是不是对爬虫有什么误解？"></a>你是不是对爬虫有什么误解？</h2><p>误解一：爬虫是不是能破解 xxx 网站的数据。</p><p>回答：爬虫只是模仿人的行为访问网页数据，你看不到的数据，爬虫也无能为力，爬虫的作用不是破解，而是为了更快的帮人获取数据。</p><p>误解二：只能用 Python（或者 Node.js）写爬虫吗？</p><p>回答：爬虫程序的实现与具体使用什么编程语言关系不大，<strong>因为爬虫这种技术，既不需要你系统地精通一门语言，也不需要多么高深的数据库技术，只要这个语言有访问网络数据的方法</strong>。Java，PHP，甚至 Shell 命令都能写爬虫，只是看你用什么语言顺手罢了。</p><p>误解三：爬虫能不能攻击别人的网站</p><p>回答：本来爬虫的使用目的只是帮人跟快更方便的获取对自己有用的数据，然而密集的请求对大多数公司的服务器是一个很大的负担。爬虫的意义不在于攻击，而在于抓取数据。所以当我们要对一个网站的大量数据进行抓取时，应该有一个延迟机制，避免对服务器造成负担，毕竟玩坏一个网站对我们又没有什么好处。</p><p>最后假装很正经的抄一份车神的声明。</p><blockquote><p>声明：</p><p>本系列文章原创于慕课网，作者布宝，任何人不得以任何形式在不经作者允许的情况下，进行任何形式的印刷以及销售，转载需注明出处及此声明。</p><p>对文章有任何问题请在下面留言，我会不定期的回复大家。</p><p>人非圣贤，如果文章有错别字请大家自行区分或指正出来，我将不定期修改错误的地方。</p><p>本系列能否持久更新下去离不开大家的支持与鼓励，以及对原创版权的尊重。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tools And Collection</title>
    <link href="/posts/e0c60b5a.html"/>
    <url>/posts/e0c60b5a.html</url>
    
    <content type="html"><![CDATA[<p>Linux 使用起来和 Windows 感觉完全不一样，很多工具其实是没有界面和快捷图标的。需要用的时候往往找起来很麻烦。因为写下这篇文章记录下，也当是给各位安利工具吧。</p><span id="more"></span><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a><a href="https://code.visualstudio.com/">VSCode</a></h4><p>虽然自己用的是 <a href="https://manjaro.github.io/">Manjaro Linux</a> 系统，但是不得不说微软的这个软件真的很良心，和 <a href="https://atom.io/">Atom</a> 都是用 <a href="https://electron.atom.io/">electron</a> 框架，但是不得不说 VSCode 优化做的很好。</p><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a><a href="http://www.vim.org/">Vim</a></h4><p>Vim 被称为编辑器之神， <a href="https://www.gnu.org/software/emacs/">Emacs</a> 被称为神的编辑器。其实我并不像引起什么圣战，只是因为自己使用的是 Linux，terminal 操作的话会或多或少的使用 Vim 来处理文档。并不是说 Emacs 不好，我还是很喜欢 Emacs 的 <a href="http://orgmode.org/">org-mode</a> 的。</p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://typora.io/">Typora</a></h4><p>这不是开发编辑器，其实是一个 Markdown 编辑器，目前 Linux，Windows 最好用的 Markdown 编辑器。因为 pandoc 不支持中文，所以我用 Typora 生成过 pdf 简历。</p><h3 id="Terminal-工具"><a href="#Terminal-工具" class="headerlink" title="Terminal 工具"></a>Terminal 工具</h3><h4 id="baidupcs"><a href="#baidupcs" class="headerlink" title="baidupcs"></a><a href="https://github.com/GangZhuo/BaiduPCS">baidupcs</a></h4><p>Linux 上的百度云盘下载工具，在 terminal 中运行。</p><h4 id="graphviz"><a href="#graphviz" class="headerlink" title="graphviz"></a><a href="http://www.graphviz.org/">graphviz</a></h4><p>把代码转换成关系图，主要是 dot 工具，简单粗暴。</p><h4 id="convert"><a href="#convert" class="headerlink" title="convert"></a><a href="https://www.imagemagick.org/script/install-source.php">convert</a></h4><p>可以自由地转换图片的形式，各种用法请百度。</p><h4 id="musicbox"><a href="#musicbox" class="headerlink" title="musicbox"></a><a href="https://github.com/darknessomi/musicbox">musicbox</a></h4><p>terminal 版的网易云音乐，界面是丑了写，能听歌知足吧。</p><h4 id="ici"><a href="#ici" class="headerlink" title="ici"></a><a href="https://github.com/Flowerowl/ici">ici</a></h4><p>python 英语字典，使用了爱词霸的 api，不过不支持 中转英，我打算自己做一个。</p><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><table><thead><tr><th>名字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>octotree</td><td>展开 github 快速打开项目</td><td>速度</td></tr><tr><td>Lastpass</td><td>密码管理</td><td></td></tr><tr><td>Momentum</td><td>壁纸，TODO</td><td></td></tr><tr><td>OneTab</td><td>不多说了，节省资源神器</td><td></td></tr><tr><td>React Developer Tools</td><td>React 开发必备</td><td></td></tr><tr><td>Vimium</td><td>vim 快捷键操作浏览器</td><td>神器属性爆表</td></tr><tr><td>WEB 前端助手、(FeHelper)</td><td>常用工具箱</td><td>国产优秀插件</td></tr><tr><td>划词翻译</td><td>很方便</td><td></td></tr><tr><td>稀土掘金</td><td>掘金社区 Co-Editor 必备</td><td></td></tr><tr><td>DevTools Author</td><td>在 chrome 的 Sources,console 等面板美化代码显示</td><td></td></tr><tr><td>扩展管理器（Extension Manager）</td><td>chrome 插件装多了，占的地方太多，所以需要一个开关</td><td></td></tr><tr><td>Bookmark Manager</td><td>书签管理器</td><td></td></tr><tr><td>Bookmark Checker</td><td>书签过滤器，能把 404，和重复的书签删除</td><td></td></tr><tr><td>Adblock Plus</td><td>广告过滤器</td><td></td></tr><tr><td>Chrono 下载管理器</td><td>替换自带的下载器</td><td></td></tr><tr><td>Cookies 获取助手</td><td>帮助开发者方便的获取到 HTTP ONLY 的 Cookies。</td><td></td></tr><tr><td>HTTPS Everywhere</td><td>加密网络浏览，自动使用 HTTPS 连接访问站点，更加安全。</td><td></td></tr><tr><td>Insight.io for Github</td><td>快速 Github 目录</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://rogerdudler.github.io/git-guide/index.zh.html"><strong>git - 简明指南</strong></a>：图文并茂的 git 指南，有多国语言。</p><p><a href="https://git-scm.com/book/zh/v1"><strong>git book</strong></a>：十分详细的一本 git 电子指南。</p><p><a href="https://learngitbranching.js.org/"><strong>Learning Git Branching</strong></a>：一个可以在网上学习 git 的网站，界面很不错。</p><p><a href="https://github.com/Gazler/githug"><strong>githug</strong></a>：一个在 terminal 运行的 git 通关游戏，附上通关笔记 <a href="https://github.com/buyi/githug-">githug-</a>。</p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000"><strong>Git 教程</strong></a>：廖神的教程。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><a href="http://download.csdn.net/download/maerdetiantang/8048671"><strong>JavaScript 红宝书</strong></a>：JavaScript 经典。</p><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000"><strong>JavaScript 全栈教程</strong></a>：廖神的教程，写 React 要有 JavaScript 基础的。</p><p><a href="http://es6.ruanyifeng.com/"><strong>ECMAScript 6 入门</strong></a>：阮神翻译的 ES6(es2015) 文档，有时间就去看看，学一些有用的语法，不至于以后看别人写的 ES2015 代码一脸懵逼。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p><a href="http://cssreference.parryqiu.com/"><strong>CSS Reference</strong></a>：一个免费的 CSS 属性可视化文档<br>文档，使用了大量的可视化图形以及动画对属性进行了解释。项目 fork 于 <a href="cssreference.io">cssreference.io</a></p><p><a href="https://sam618.github.io/books/CSS-secrets/"><strong>CSS 揭秘</strong></a>：据说是一本进阶书，还来不及看。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="http://www.javascriptcn.com/read-69.html"><strong>《Node.js 开发指南》</strong></a>：适合 Node.js 入门</p><p><a href="https://book.douban.com/subject/25768396/"><strong>《深入浅出 Node.js》</strong></a>：Node.js 大神朴灵出的书，2013 年的初版，还是很值得一看的</p><h3 id="React-入门"><a href="#React-入门" class="headerlink" title="React 入门"></a>React 入门</h3><p><a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html"><strong>React 技术栈系列教程</strong></a>：React 技术栈入门，阮神的教程看完基本上可以入门了。</p><p><a href="http://www.react-cn.com/"><strong>React 中国</strong></a>：React 中文文档，UI 和以前的官网相似，还有什么入门教程比官网文档更好的呢？</p><p><a href="https://doc.react-china.org/"><strong>React 中文文档翻译</strong></a>:React 中文文档，UI 和最新官网是一样的。</p><p><a href="https://book.douban.com/subject/26928402/"><strong>《React 与 Redux 开发案例解析》</strong></a>：React 与 Redux 基础，目前只看到实体书，比阮神的详细，新手值得一看。</p><p><a href="https://fakefish.github.io/react-webpack-cookbook/Introduction-to-Webpack.html"><strong>《React Webpack 小书》</strong></a>：React Webpack 入门，好像是 Webpack1 的，Webpack2 和 1 有很大的改版。</p><p><a href="http://cn.redux.js.org/"><strong>《Redux 中文文档》</strong></a>：Redux 中文文档。看不懂英文的可以来看下，还是很好的。</p><p>B 站上的 <a href="https://space.bilibili.com/1914909"><strong>Redux 翻译</strong></a>：B 站上 UP 主翻译的字幕，egghead 的教程。</p><p><a href="https://reacttraining.cn/"><strong>React Router V4 中文文档</strong></a>：目前最新的 React Router 中文文档，更多版本的中文文档：<a href="https://github.com/react-translate-team/react-router-CN">https://github.com/react-translate-team/react-router-CN</a>。</p><h3 id="React-深入"><a href="#React-深入" class="headerlink" title="React 深入"></a>React 深入</h3><p><a href="https://github.com/minooo/React-Study"><strong>React-Study</strong></a>：由浅入深的 React 案例。</p><p><a href="https://github.com/kdchang/reactjs101"><strong>reactjs101</strong></a>: 由浅入深学习 React 生态圈。</p><p><a href="http://download.csdn.net/download/cometwo/9843492"><strong>《深入 React 技术栈》</strong></a>：这本书是 React 深入解析，需要有 React 开发基础才能看得下去。有很多的 React 全家桶的源码解析，React 开发栈实践。如果想很好的使用 React，这本书需要好好看下。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="http://siberiawolf.com/free_programming/index.html"><strong>免费的编程中文书籍索引</strong></a>：找技术书的，电子书比纸质书方便。</p><p><a href="https://gitbook.hellogithub.com/"><strong>HelloGitHub</strong></a>：GitHub 上热门的项目。</p><p><a href="http://zh.visualgo.net/zh"><strong>数据结构和算法可视化</strong></a>：算法还是要看看的。</p><p><a href="https://regexper.com/"><strong>正则表达式可视化</strong></a>：正则表达式解读还可以这样。</p><p><a href="https://jdan.github.io/cleaver/"><strong>cleaver</strong></a>：用 Markdown 生成幻灯片，我用这个做了一个简历，效果还不错。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 开发入门——Yeoman</title>
    <link href="/posts/ed4b518.html"/>
    <url>/posts/ed4b518.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://yeoman.io/static/illustration-home-inverted.91b07808be.png" alt="yeoman"></p><span id="more"></span><p>React 搭建开发环境可以把一大群想学习和使用 React 的开发者拦在入门的门外，为了方便开发，非死不可推出了一个快速生成开发环境的工具——<a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>。入门学习其实这个工具已经够用的了，或者也可以使用 <a href="https://codepen.io/gaearon/pen/rrpgNB?editors=0010">CODEPEN</a> 尝试 React。</p><p>但是要在 <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> 里搭建一个 Webpack，Redux，Router 的 React 开发环境，还不如自己从头写一个开发环境方便，改别人的代码什么的最头痛了。要是 React 新人连纯 React 开发环境都搭不好，添加这么多模块的开发环境，估计新人掉头就去用 Vue 了。这也是 React 坑的地方，生态系统太庞大，没有统一的开发环境标准。</p><p>我学 React 的时候，就发现，React 入门其实挺容易的，可是我不会写 webpack 配置，webpack 的文档是写给神看的，我这种英语 5 渣怎么看得懂？于是我就想，咱可不可以写一个 React 开发环境的初始配置放到 github，需要的时候 git 下来用。等等，我能想到的，应该别人也想到了才对，几番打听终于找到了一个脚手架工具——<a href="http://yeoman.io/">Yeoman</a>。</p><p><strong>Yeoman 官网定义是：这是一个现代 WebApp 的网页脚手架工具</strong>，提供各种框架脚手架，所以也会有 React 了。</p><p>要使用 Yeoman，首先必须得有 node 和 npm，这个没有的自行安装了。有了 node 开发环境，安装 Yeoman 就简单多了。我使用的是 manjaroLinux，Win 什么的我不知道了。</p><p>通过下面的命令在 Terminal 全局安装 yo。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">sudo</span> npm i yo -g<br></code></pre></td></tr></table></figure><p>要使用 yo，还需要安装自己想要的 <a href="http://yeoman.io/generators/">generator</a>。<a href="http://yeoman.io/generators/"> generator</a> 安装的方法和 yo 是一样的，都是全局安装，要是 <a href="http://yeoman.io/generators/"> generator</a> 打不开，开始在 <a href="https://npms.io/search?q=keywords:yeoman-generator">npms</a> 找。我现在使用的是 <a href="https://github.com/react-webpack-generators/generator-react-webpack">generator-react-webpack</a>，README 里面有详细的安装使用说明，不过我使用的时候遇到一些问题。下面说说我使用的步骤。</p><p>1、安装 generator-react-webpack：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">sudo</span> npm i -g generator-react-webpack<br></code></pre></td></tr></table></figure><p>2、创建项目文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">mkdir</span> my-new-project &amp;&amp; <span class="hljs-built_in">cd</span> my-new-project<br></code></pre></td></tr></table></figure><p>3、使用 yo 初始化 generator-react-webpack 脚手架</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ yo <span class="hljs-comment"># 按回车，里面有些配置自己看着确定就好</span><br></code></pre></td></tr></table></figure><p>这样子就初始化好了一个 React 开发环境了。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Node.js 做出自己的 CLI 工具</title>
    <link href="/posts/18aecbd.html"/>
    <url>/posts/18aecbd.html</url>
    
    <content type="html"><![CDATA[<p>最近自己用 Node 写了很多的小工具，然而并不能全局使用。上网找了下答案，发现了 TJ 大神写的 Commander.js 可以很方便的制作命令行工具。于是就照着 API 把之前的 <a href="https://github.com/bubao/GetZhiHuZhuanLan">知乎专栏爬虫</a> 给整成 CLI 工具。我把工具命名为 <a href="https://github.com/bubao/nodc.git">nodc</a>，意思是<code>node collection</code>。除了知乎专栏爬虫，我还把中央天气预报加到里面。以后有用空还会加入跟多的小工具。</p><span id="more"></span><h2 id="commander-命令行模块"><a href="#commander-命令行模块" class="headerlink" title="commander: 命令行模块"></a><strong><a href="https://github.com/tj/commander.js"><code>commander</code></a>: 命令行模块</strong></h2><p>这个模块是 TJ 大神封装好的模块，能快速开发命令行工具。官网有很多例子，我直接上我用到的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-keyword">var</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;commander&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;shelljs/global&quot;</span>);<br><span class="hljs-keyword">var</span> zhihu = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./src/zhihu.js&quot;</span>);<br><span class="hljs-keyword">var</span> weather = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./src/weather.js&quot;</span>);<br><br>program<br>.<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;crawler [zhihuId]&quot;</span>)<br>.<span class="hljs-title function_">alias</span>(<span class="hljs-string">&quot;cr&quot;</span>)<br>.<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot; 知乎专栏爬虫 &quot;</span>)<br>.<span class="hljs-title function_">option</span>(<span class="hljs-string">&quot;-o ,--out &lt;path&gt;&quot;</span>, <span class="hljs-string">&quot; 输出位置&quot;</span>)<br>.<span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">zhihuId, options</span>) &#123;<br><span class="hljs-keyword">var</span> zhihuId = zhihuId || <span class="hljs-string">&quot;leanreact&quot;</span>;<br><span class="hljs-keyword">var</span> path = options.<span class="hljs-property">out</span> || process.<span class="hljs-title function_">cwd</span>(); <span class="hljs-comment">//当前执行路径</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;   知乎专栏爬取 %s 到 %s 文件夹&quot;</span>, zhihuId, path);<br><span class="hljs-title function_">zhihu</span>(zhihuId, path);<br>&#125;)<br>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;--help&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;  举个栗子：&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ nodc crawler leanreact&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ nodc cr leanreact -o ~/&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;);<br><br>program<br>.<span class="hljs-title function_">command</span>(<span class="hljs-string">&quot;weather [townName]&quot;</span>)<br>.<span class="hljs-title function_">alias</span>(<span class="hljs-string">&quot;wt&quot;</span>)<br>.<span class="hljs-title function_">description</span>(<span class="hljs-string">&quot; 天气助手 &quot;</span>)<br>.<span class="hljs-title function_">option</span>(<span class="hljs-string">&quot;-d ,--detail&quot;</span>, <span class="hljs-string">&quot; 输出位置&quot;</span>)<br>.<span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">townName, program</span>) &#123;<br><span class="hljs-keyword">var</span> townName = townName || <span class="hljs-string">&quot;深圳&quot;</span>;<br><span class="hljs-comment">// var d =  program.detail || false;//当前执行路径</span><br><span class="hljs-comment">// console.log(&#x27;   知乎专栏爬取 %s 到 %s 文件夹&#x27;,townName, path);</span><br><span class="hljs-title function_">weather</span>(townName, program);<br>&#125;)<br>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;--help&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;  举个栗子：&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ nodc crawler leanreact&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;    $ nodc cr leanreact -o ~/&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>&#125;);<br><br>program.<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>);<br></code></pre></td></tr></table></figure><p>上面是 commander 模块创建类似 git 一样的子命令的代码</p><p><code>command</code>：是创建子命令的方法，可以接收两个参数。接收一个参数时，可以使用 <code>action</code> 方法在后面发起动作。接收两个参数时，第二个参数是命令说明，后边就不能使用<code>action</code>了。<code>[zhihuId]</code>意思是可选参数，因为我后面在<code>action</code>方法里设置了默认知乎专栏 id</p><p><code>alias</code>：子命令别名</p><p><code>description</code>：命令摘要说明</p><p><code>option</code>：子命令属性。我设置了输出路径属性，接收两个参数，第二个参数为命令说明。字符串中<code>-o</code>必须在<code>--out</code>前面，后面<code>&lt;path&gt;</code>是必填参数。如果<code>option</code>不跟在<code>command</code>后面，则作为主命令的属性。</p><p><code>action</code>：动作，顾名思义，就是发起子命令时做什么动作。传一个匿名函数做参数，前面 command 后面括号的内容可以作为参数传入。而 option 的中括号的参数需要用<code>options. 参数</code>来传入</p><p><code>on</code>：这里设置了 help 的说明</p><p><code>.parse(process.argv)</code>：没了这个代码好像不能用，这个放在所有 program 的最后，就像是 JavaScript 程序的<code>return</code>，放在这行代码后面的<code>commander</code> 模块代码都不会执行，就算只是简单打<code>console.log</code>也不会执行。不过我在前面调用了<code>zhihu(zhihuId,path)</code>，<code>zhihu()</code>里面的代码引用并不受它影响。</p><p>关于这个模块就说这么多。更多用法可以去 github 看 README，有中文版的。</p><h2 id="整合-GetZhiHuZhuanLan"><a href="#整合-GetZhiHuZhuanLan" class="headerlink" title="整合 GetZhiHuZhuanLan"></a>整合 <a href="https://github.com/bubao/GetZhiHuZhuanLan">GetZhiHuZhuanLan</a></h2><p>之前写这个爬虫留下了很多问题没处理，这也是我参考 <a href="https://github.com/zhangolve/zhihu-answer-convert-to-md-by-node">zhangolve 的项目</a> 的后遗症。第一个问题是，把整个爬虫分成两部分处理的：爬取下载，线下处理。第二个问题是，代码转换都成单行。由于这段时间都没空，也就搁置了。前些天看到 Node 也能写命令行工具，就拿这个爬虫来试手。翻出来看，完全不能忍啊。于是找各种办法把问题处理了。</p><h3 id="把两个分离模块合在同一个文件里"><a href="#把两个分离模块合在同一个文件里" class="headerlink" title="把两个分离模块合在同一个文件里"></a>把两个分离模块合在同一个文件里</h3><p>其实不写成同一个文件里也没关系的。不过为了开发方便，不用切换文件，我还是硬把两个模块的所有代码都放进去了。放进去，改了下参数名跑了一次，卧槽，线下处理的 for 循环居然跑在爬取下载模块的前面，怪不得之前我参考的项目是把两个文件分开来执行。</p><p>怎么办？怎么办？这问题很让人抓狂啊。</p><p>这时候一定要冷静，两个模块能分开运行，都能完成自己的任务，问题处在哪里？问题在于 JavaScript 的任务队列里：线下处理模块是被 for 包裹的同步运行代码，而爬取下载是一个异步的任务。如果把两个模块放一起，异步任务发起后，执行异步需要时间，而这时候，轮到 for 循环，它要处理下载好的 json 文件，可是异步下载还没完成呢，自然 for 里面的任务就异常了。</p><h3 id="首次使用-eventproxy"><a href="#首次使用-eventproxy" class="headerlink" title="首次使用 eventproxy"></a>首次使用 <a href="https://github.com/JacksonTian/eventproxy">eventproxy</a></h3><p>相同了这个问题，赶紧去恶补 callback ，异步的知识，用了 async，感觉要搞很多代码，转向用朴灵大神的<code>eventproxy</code>。其实这个我完全是第一次玩呀，硬着头皮上吧。</p><p>看了下 <a href="https://github.com/JacksonTian/eventproxy/blob/master/README.md">README</a>，幸好有中文版的，用了<code>all</code>和<code>after</code>两种方法。<code>all</code>是全部事件触发<code>emit</code>，就会执行执行。<code>after</code>是在<code>n</code>次执行完后，才触发，<code>n</code>是<code>after</code>的第二个参数。</p><p>按理说 for 循环用<code>after</code>比较好处理，然而我拿不到 for 的次数，因为被封装在另一个函数中。我试了好多次都不成功。换<code>all</code>吧，<code>all</code>面临一个问题是，怎么样监听什么售后下载完，才发送给<code>all</code>。由于我用的是<code>request</code>模块的<code>pipe</code>方法，后面不能监听呀。<code>eventproxy</code>还没知道怎么用呢，两个方法都不能立马行得通，很打击人的啊。</p><h3 id="认准一条路，脚踏实地的走下去"><a href="#认准一条路，脚踏实地的走下去" class="headerlink" title="认准一条路，脚踏实地的走下去"></a>认准一条路，脚踏实地的走下去</h3><p><code>after</code>试过了很多次都行不通，<code>all</code>又因为<code>request</code>后面直接使用<code>pipe</code>不能监听。果断选择<code>all</code>，至少我知道只要能监听<code>request</code>什么时候执行完，就可以发起<code>all</code>了。而<code>after</code>我根本就没有思路，就算这条路是捷径，我也走不了，还不如脚踏实地的 focus 目标。</p><p>既然<code>request</code>直接使用<code>pipe</code>不能监听，那我不直接使用不就行了。上网找了个 <a href="https://segmentfault.com/q/1010000009323745/a-1020000009454031">方法</a>，用<code>fs.writeStream</code>的<code>on</code>监听。把<code>eventproxy</code>的<code>emit</code>放在<code>on</code>callback 里面，用一个变量来累加计算，判断<code>for</code>写入次数来执行<code>emit</code>。</p><h2 id="中央气象预报"><a href="#中央气象预报" class="headerlink" title="中央气象预报"></a>中央气象预报</h2><p>这个脚本还是比较容易实现的，在这里谢谢 <a href="https://github.com/wuguanghai45">吴广海</a> 兄弟，帮我优化了代码。为了显示好看一点，我使用了<code>cli-table2</code>表格模块，在知乎爬虫和天气预报里都使用了 Emoji。</p><h2 id="运行与使用"><a href="#运行与使用" class="headerlink" title="运行与使用"></a>运行与使用</h2><p>因为我本来就没有 npmjs 的账号，所以不能发布在 npmjs 上，那怎么样全局使用呢？方法还是有的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 获取源码</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/bubao/nodc<br><span class="hljs-comment"># 修改 index.js 第一行，换成自己 node 运行路径</span><br><br><span class="hljs-comment"># 项目的根目录下</span><br>$ <span class="hljs-built_in">sudo</span> npm i -g<br></code></pre></td></tr></table></figure><p>全部操作都在下面了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看帮助</span><br>$ nodc -h<br><span class="hljs-comment"># 知乎爬虫完整子命令</span><br>$ nodc cr [zhihuzhuanlanId] -o &lt;path&gt;<br><span class="hljs-comment"># 默认路径为当前文件夹下</span><br>$ nodc cr [zhihuzhuanlanId]<br><span class="hljs-comment"># 默认只爬取 learnreact 专栏</span><br>$ nodc cr<br><span class="hljs-comment"># 天气预报完整子命令</span><br>$ nodc wt [townName] -d<br><span class="hljs-comment"># 天气基本信息</span><br>$ nodc wt [townName]<br><span class="hljs-comment"># 默认深圳天气</span><br>$ nodc wt<br></code></pre></td></tr></table></figure><p><strong>知乎专栏爬虫</strong></p><p>这个项目其实还有很多小 bug，<code>code</code>标签转换成 markdown 时是单反引号。目前的 markdown 转换工具使用的是 <a href="https://github.com/island205/h2m">h2m</a> ，如果有更好的工具请告知我，让我能尽快完善这个小爬虫，谢谢。</p><p><strong>中央天气预报</strong></p><p>这个项目用了 <a href="https://github.com/jokermonn/-Api">-API</a> 提供的 api 写的天气查询，目前还不是很完善，但是已经可以用了，后续继续做些小细节上的工作。</p><h2 id="还有很多事没做呢"><a href="#还有很多事没做呢" class="headerlink" title="还有很多事没做呢"></a>还有很多事没做呢</h2><p>这是只是我<code>nodc</code>的第一个小功能，我还想集成更多。</p><p><strong><code>nodc</code> 功能列表</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 知乎专栏爬虫</li><li><input checked="" disabled="" type="checkbox"> 中央天气预报</li><li><input disabled="" type="checkbox"> 结巴分词全文排序关键词</li><li><input disabled="" type="checkbox"> 彩色输出</li><li><input disabled="" type="checkbox"> 翻译</li><li><input disabled="" type="checkbox"> 纪念日提醒</li><li><input disabled="" type="checkbox"> 每日小 tag</li><li><input disabled="" type="checkbox"> …</li></ul><p>而知乎专栏爬虫还有些问题需要解决：</p><ul><li><input checked="" disabled="" type="checkbox"> 文件名上加入文章发布时间，方便排序 (<code>20170717@learnreact.md</code>)</li><li><input disabled="" type="checkbox"> 代码还很不美观，而且部分代码需要重写，虽然可以运行（用 <code>request</code> 代替 <code>https</code>)</li><li><input disabled="" type="checkbox"> 增加 <a href="https://github.com/visionmedia/node-progress">进度条</a>，让爬虫进度更直观。</li><li><input disabled="" type="checkbox"> 增加多 id 下载</li><li><input disabled="" type="checkbox"> 输出带 <a href="https://github.com/Marak/colors.js">颜色</a> 的信息</li></ul><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><p>你们可能会说，别人其实已经造好了很多轮子，比如翻译就有 <a href="https://github.com/Flowerowl/ici">ici</a>，为什么我还要自己弄？因为别人的东西，如果出了 bug ，我自己修改会很费力，或者我只能坐以待毙。而我想通过一个个小项目开源给大家一起来完善，自己享用自己的劳动成果，也是一件乐事。</p><p>我希望这个小项目能更多的人参与进来，一起 DIY 自己的命令行工具集。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《星界之梯》查询网页开发记录</title>
    <link href="/posts/cef2f6bc.html"/>
    <url>/posts/cef2f6bc.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://as.firedogstudio.com/images/banner/banner_20150127_03a.png" alt="banner"></p><span id="more"></span><p>之前玩一款港游 <a href="http://as.firedogstudio.com/">《星界之梯》</a> 就一直想把里面的立绘找出来做桌面，所以一边玩一遍寻思解包的方法。</p><h2 id="游戏分析"><a href="#游戏分析" class="headerlink" title="游戏分析"></a>游戏分析</h2><p>要拿到资源，首先要确定游戏的资源在哪。我玩游戏的时候发现一个现象，就是在游戏副本里面，断开网络，并不影响副本里面的操作，只有通关把网络打开，就能 connect 到服务器领取奖励。</p><p>也就是说，游戏大部分的运行逻辑都在手机端完成的，服务端只是对手机端的充值，副本胜利判定，和账户中关卡开放程度进行管理。</p><p>那手机端的游戏数据会放在哪里呢？不应该在 apk 里面，因为图片，音效，运行逻辑数据太大，只能是需要的时候读取。而为了 apk 不卡顿，这些数据不应该存放在外置 SD 卡。而系统的 app 的 root 路径是需要管理员权限的，游戏如果把数据放那里，那没有 Root 用户怎么安装游戏呢？所以，游戏数据包应该在手机内存的<code>Android/data/</code>文件夹下。</p><p>果然，我在<code>Android/data/</code>文件夹下的<code>com.firedog</code>里面找到了数据。以前要是更新，还会看到<code>*.obb</code>文件在<code>Android/obb/</code>文件夹下。</p><h2 id="游戏包解析"><a href="#游戏包解析" class="headerlink" title="游戏包解析"></a>游戏包解析</h2><p>上面说到的<code>*.obb</code>文件，其实是 Android 游戏数据包。以前玩过手机 QQ 美化，所以知道 Android 上的特殊格式一般可以解压打开。而<code>*.obb</code>解压得到的就是<code>Android/data/</code>下的数据。</p><p>接下来看解压后的数据，里面有 json 文件，unity3d 的文件。json 文件是一种对象数据文件，所以立绘是不会在这里的。而且我用 sublime 搜索没发现有任何 png 或者 jpg 的文件引用。先放一边，我们要的立绘不在这。接下来动手拆 unity3d 数据了。</p><h3 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h3><p>没做过游戏，不太清楚 unity3d 的包怎么打开，上百度查了一圈，找到了 <a href="https://github.com/ata4/disunity">disunity</a> 和 <a href="https://github.com/RaduMC/UnityStudio">UnityStudio</a>。<a href="https://github.com/ata4/disunity">disunity</a> 是一个命令行反编译 unity3d 工具，而 <a href="https://github.com/RaduMC/UnityStudio">UnityStudio</a> 是 win 上使用的反编译 unity3d 工具。我用的是 Linux，所以毫不犹豫用了 <a href="https://github.com/ata4/disunity">disunity</a>。说起来这款工具的作者在 2016 年 1 月 18 号停更了 Java 版本，2017 年 08 月 13 日我翻了一下发现有个 Python 版本的昨天刚刚更新。把里面的版本试了一圈，发现 3.x 系列才能正确的反编译出东西，4.x 貌似还是有点小问题，5.0 根本不能用好吗。</p><p><strong>disunity 3.x 使用方法</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">disunity extract Web.unity3d<br><span class="hljs-comment"># 或者</span><br>java -jar disunity.jar extract Web.unity3d<br></code></pre></td></tr></table></figure><h3 id="图片格式批量转换"><a href="#图片格式批量转换" class="headerlink" title="图片格式批量转换"></a>图片格式批量转换</h3><p>得到了很多文件夹，里面有音频、纯文本数据和后缀为<code>tga</code>的文件，我要的 png 呢？难道是这些<code>tga</code>后缀文件？不知道就百度呗，果然这个 tga 也是图片资源，开始我电脑不识别呀，还是转换成大众点的格式比较好，上 github 找轮子，果然还是有人写过的，<a href="https://github.com/steel1990/tga2png">tga2png</a> 有例子，可是我需要批量呀，既然是 js 模块，我用 node 写个批量处理好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">let</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;glob&quot;</span>)<span class="hljs-comment">//文件模式匹配</span><br><span class="hljs-keyword">var</span> filename = <span class="hljs-string">&#x27;CutInNew&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Afiles</span> = <span class="hljs-string">`./files/<span class="hljs-subst">$&#123;filename&#125;</span>/**/**/Texture2D/*.tga`</span><br><span class="hljs-keyword">var</span> tga2png = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tga2png&#x27;</span>);<span class="hljs-comment">//tga 转 png 工具</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>)<span class="hljs-comment">//异步工具</span><br><br>fs.<span class="hljs-title function_">exists</span>(filename, <span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>) &#123;<br>  <span class="hljs-keyword">if</span> (exists)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filename + <span class="hljs-string">&#x27;文件夹存在&#x27;</span>);<br>  <span class="hljs-keyword">else</span> &#123;<br>    fs.<span class="hljs-title function_">mkdir</span>(filename, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>      <span class="hljs-keyword">if</span> (err)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`创建<span class="hljs-subst">$&#123;filename&#125;</span>文件夹成功`</span>);<br>    &#125;)<br>  &#125;<br><br>&#125;);<br><span class="hljs-title function_">glob</span>(<span class="hljs-title class_">Afiles</span>, <span class="hljs-string">&#x27;buffer&#x27;</span>,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">err, afiles</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * [async 遍历文件名，并转换格式]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">async</span>.<span class="hljs-title function_">mapSeries</span>(afiles, <span class="hljs-keyword">function</span>(<span class="hljs-params">item, callback</span>) &#123;<br>      <span class="hljs-keyword">var</span> arrUrl = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>      <span class="hljs-keyword">var</span> name = arrUrl[arrUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;.tga&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      <span class="hljs-keyword">var</span> fname = arrUrl[arrUrl.<span class="hljs-property">length</span> - <span class="hljs-number">3</span>]<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">tga2png</span>(item, fname == <span class="hljs-string">&#x27;TC&#x27;</span> ? <span class="hljs-string">`./<span class="hljs-subst">$&#123;filename&#125;</span>/<span class="hljs-subst">$&#123;fname&#125;</span>-<span class="hljs-subst">$&#123;name&#125;</span>.png`</span> : <span class="hljs-string">`./<span class="hljs-subst">$&#123;filename&#125;</span>/<span class="hljs-subst">$&#123;name&#125;</span>.png`</span>)<br>          .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;the png buffer is &#x27;</span>, fname + <span class="hljs-string">&#x27;-&#x27;</span> + name);<br>          &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, err);<br>          &#125;);<br>        <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, item + <span class="hljs-string">&#x27;!!!&#x27;</span>);<br>      &#125;, <span class="hljs-number">0</span>);<br>    &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, results</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;);<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><p>这样就拿到立绘了。</p><p>不过有个问题，obb 里面有些资源不全呀，游戏没出错。应该是有部分资源在 apk 里面。动手反编译 apk。</p><h3 id="反编译-apk"><a href="#反编译-apk" class="headerlink" title="反编译 apk"></a>反编译 apk</h3><p>这里用到了一个工具 <a href="https://ibotpeaches.github.io/Apktool/">apktool</a>，官网有说明的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 反编译</span><br>$ apktool d test.apk<br><span class="hljs-comment"># 打包</span><br>$ apktool b <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>还有一种方法比较暴力，直接解压，用 <a href="https://sourceforge.net/projects/dex2jar/">dex2jar</a> 转换成 jar 用 <a href="http://jd.benow.ca/">jd-gui</a> 看源码。</p><h2 id="用纯-React-写一个-AS-查询网页"><a href="#用纯-React-写一个-AS-查询网页" class="headerlink" title="用纯 React 写一个 AS 查询网页"></a>用纯 React 写一个 AS 查询网页</h2><p>这个游戏的行使有 1000 多个，有时候搭配起来还是很麻烦的，所以就有了写个查询的网页。</p><p>星界之梯的数据其实不符合我操作的预期的，例如：</p><ol><li>有些有名字的行使，并没有发布出来，也就是和立绘没有一一对应。</li><li>行使的数据分散到不同的 json 文件，而文件对应关系也不理想。</li></ol><p>还有些是前端的问题：</p><ol><li>React 没有双向绑定，要点击一个头像，在侧边栏显示详情，组件关系怎么解决？</li><li>图片太多，全部加载完的话会需要很长时间，有什么好的方案？</li></ol><p>目前这四个问题需要我一步一步解决。</p><h3 id="json-数据处理"><a href="#json-数据处理" class="headerlink" title="json 数据处理"></a>json 数据处理</h3><p>数据如果没法对应起来，前端做的事就很麻烦了。为了解决这个问题，我决定把所有需要的数据写到一个 json 文件中，这样子处理起来，就容易许多了。</p><p>整合完 json，接下来就是让立绘和数据一一对应。头像的文件和立绘文件是一一对应，所以只有检测头像是否存在，也就能知道立绘是否存在了。做法是读取头像文件夹存在的文件，把文件名转换成数值，保存到数组中，需要的时候拼接字符串即可。但是这个数组不能和整合好的 json 文件对应，所以 json 文件不能引用这个数组。怎么处理？</p><p>其实可以这么做，把数组作为中间数据，用来规范命名资源文件，到时候 json 文件只需要数值拼接成字符串就能访问到准确的资源文件。</p><h3 id="React-通信问题"><a href="#React-通信问题" class="headerlink" title="React 通信问题"></a>React 通信问题</h3><p>React 是单向数据的，常用的有<code>props</code>和<code>state</code>，<code>props</code>是父组件给子组件传值用的信使，<code>state</code>是组件内部的状态。没有子组件向父组件传值的方法呀。官方给出的答案是状态提升。</p><p>状态提升，就是把<code>state</code>统一放在父组价中管理，父组件通过<code>props</code>把子组件需要的参数传给子组件。JavaScript 有个神技能，就是一等公民，所以我们可以把一个函数传递给子组件，子组件拿到参数，里面有需要的值和一个父组件中定义的函数，子组件把参数拿来给自己用，当有事触发，可以把触发的信息具体是什么塞到父组件给的函数里返回给父组件。这样就能实现子组件向父组件通信了。</p><p>而我想在左边栏显示详情，右边是全部行使的头像，点击头像，左边栏显示对应的行使详情。状态提升就能做到。</p><p>首先定义一个函数传递给右边栏组件，右边栏里面的的头像都要自己唯一的 ID，同时有个点击触发 handler 传递 id 给父组件的函数返回给父组件，父组件拿到 id 就传递给左边栏显示。左右边栏是兄弟关系。</p><h3 id="图片太多的问题"><a href="#图片太多的问题" class="headerlink" title="图片太多的问题"></a>图片太多的问题</h3><p>行使头像还好，可是行使立绘就呵呵哒了呀。怎么样才能让行使立绘需要的时候才加载呢？问了慕课网的鞭挞师，答案是 CSS 引入图片，就这么简单。</p><h3 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a>界面美化</h3><p>虽然东西是写出来了，可是我感觉左边栏的滚动条好丑呀，可是隐藏滚动调，要是左边的内容太多，那就看不到了。….. 关键时刻找度娘，找到了个可行方案，就是写两个 div，上面的 div 比下面的 div 宽度小，就把下面的 div 的滚动条给盖住了，看不到的。而下面的 div 还是能滚动。</p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 与 Redux 中的数组处理</title>
    <link href="/posts/73a303cb.html"/>
    <url>/posts/73a303cb.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>昨天把《深入 React 技术栈》翻了一半，头实在是大，今天换一本实体书《React 与 Redux 开发实例精解》。</p><p>本篇笔记为《React 与 Redux 开发实例精解》第 15 章内容</p></blockquote><span id="more"></span><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p><code>reduce()</code>方法接收一个函数作为累加器（accumulator），数组中的内个值（从左到右）开始合并，最终为一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">reduce</span>(callback[,initialValue])<br></code></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><ul><li><code>callback</code>：执行数组中内个值的函数（也可以叫 reducer），包含四个参数。<ul><li><code>previousValue</code>：上次调用回调返回的值，或者是提供的初始值（initialValue）。</li><li><code>currentValue</code>：数组中当前被处理的元素。</li><li><code>index</code>：当前数组在数组中的索引。</li><li><code>array</code>：调用<code>reduce</code>的数组</li></ul></li><li><code>initialValue</code>：作为第一次调用<code>callback</code>的第一个参数。这个参数不是必要的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> completedCount = todos.<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">count,todo</span>)=&gt;</span>(todo.<span class="hljs-property">completed</span>?count+<span class="hljs-number">1</span>:count),<br>  <span class="hljs-number">0</span><br>)<br></code></pre></td></tr></table></figure><p><strong>代码解释</strong>：</p><ul><li><code>todos</code>：是一个数组</li><li><code>reduce()</code>的第一个值是箭头函数，这个箭头函数的第一个函数的第一个参数<code>count</code>的上一个值，第二个参数<code>todo</code>是当前元素的值。</li><li><code>reduce()</code>的第二个参数 0 是一个初始值，作用是值<code>count</code>的初始值为 0。</li></ul><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p><code>filte()</code>方法使用指定的函数测试所有的元素，并返回创建一个包含所有通过测试的元素的新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">filter</span>(callback[,thisArg])<br></code></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><ul><li>callback：用来测试数组的每个元素的函数，包含三个参数。返回 <code>true</code>表示保留该元素（通过测试），返回 <code>false</code>则不保留<ul><li><code>currentValue</code>：数组中当前被传递的元素。</li><li><code>index</code>：元素的引用</li><li><code>array</code>：被遍历的数组</li></ul></li><li><code>thisArg</code>：可选，执行<code>callback</code>时使用的<code>this</code>值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> state.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span>=&gt;</span><br>  todo.<span class="hljs-property">id</span>!==action.<span class="hljs-property">id</span><br>)<br></code></pre></td></tr></table></figure><p><strong>代码解释</strong>：</p><ul><li>state 是个任务数组</li><li>filter 的参数是一个箭头函数，该箭头函数只有一个参数 todo，也就是数组的当前项元素，箭头函数后面那个判断语句，如果返回 true 则保留当前项，反之则移除当前项。</li></ul><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p><code>map()</code>方法但会一个由原数组中每个元素调用一个指定方法后的返回值组成的新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">map</span>(callback[,thisArg])<br></code></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><ul><li>callback：原数组中的元素调用该方法后返回一个新的元素。该方法包含如下三个参数<ul><li><code>currentValue</code>：数组中当前被传递的元素。</li><li><code>index</code>：元素的引用</li><li><code>array</code>：被遍历的数组</li></ul></li><li><code>thisArg</code>：可选，执行<code>callback</code>时使用的<code>this</code>值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> state.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">todo</span>=&gt;</span>(<br>  todo.<span class="hljs-property">id</span> === action.<span class="hljs-property">id</span>?<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,todo,&#123;<span class="hljs-attr">text</span>:action.<span class="hljs-property">text</span>&#125;):<br>    todo<br>));<br></code></pre></td></tr></table></figure><p><strong>代码解释</strong>：</p><ul><li>state 是个变化前的 state，是一个数组。</li><li><code>map()</code>的参数是一个箭头函数。该箭头函数的第一个参数是 todo，返回值是一个使用三目运算符的表达式，同来返回一个新的数组。如果 id 匹配，则通过<code>Object.assign()</code>合并一个新的属性，也就是给 todo 添加或者重写一个 text 属性，属性值为<code>action.text</code></li></ul><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p><code>every()</code>方法于测试数组中所有的元素是否都通过了指定函数的测试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">every</span>(callback[,thisArg])<br></code></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><ul><li>callback：原数组中的元素调用该方法后返回一个新的元素。该方法包含如下三个参数<ul><li><code>currentValue</code>：数组中当前被传递的元素。</li><li><code>index</code>：元素的引用</li><li><code>array</code>：被遍历的数组</li></ul></li><li><code>thisArg</code>：可选，执行<code>callback</code>时使用的<code>this</code>值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> areAllMarked = state.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">todo</span>=&gt;</span>todo.<span class="hljs-property">completed</span>)<br></code></pre></td></tr></table></figure><p>遍历任何数组，每一项任务的<code>completed</code>属性均为<code>true</code>时，返回<code>true</code>。</p><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p><code>some()</code>方法于测试数组中是否最少有一项元素通过了指定函数的测试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">some</span>(callback[,thisArg])<br></code></pre></td></tr></table></figure><p><strong>参数解释</strong>：</p><ul><li>callback：原数组中的元素调用该方法后返回一个新的元素。该方法包含如下三个参数<ul><li><code>currentValue</code>：数组中当前被传递的元素。</li><li><code>index</code>：元素的引用</li><li><code>array</code>：被遍历的数组</li></ul></li><li><code>thisArg</code>：可选，执行<code>callback</code>时使用的<code>this</code>值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> areAllMarked = state.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">todo</span>=&gt;</span>todo.<span class="hljs-property">completed</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 组件间通信</title>
    <link href="/posts/d2113aae.html"/>
    <url>/posts/d2113aae.html</url>
    
    <content type="html"><![CDATA[<p>React 的各个组件是彼此相互独立的，所以组件与组件间的通信是很重要的。从嵌套关系上看，就会有三种不同的通信方式：</p><ol><li>父组件向子组件通信</li><li>子组件向父组件通信</li><li>没有嵌套关系的组件通信</li></ol><span id="more"></span><h2 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h2><p>React 的数据流动是单向的，父组件向子组件通信也是最常见的方式。父组件通过<code>props</code>向子组件传递需要的信息。祭源码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> element = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Welcome</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Sara&quot;</span> /&gt;</span></span>;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  element,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>简单粗暴了一点，因为用了无状态组件，没有<code>Class</code>没有<code>constructor</code>，也没有生命周期。关于无状态组件和类组件，可以去官网看看。</p><p>解释一下：在使用<code>Welcome</code>组件时，在<code>Welcome</code>标签中像 HTML 标签写属性一样，把<code>&quot;Sara&quot;</code>传递给<code>Welcome</code>组件的<code>name</code>属性。<code>Welcome</code>组件通过<code>props.name</code>拿到<code>&quot;Sara&quot;</code>这个值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; render &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ListTitle</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/ListTitle.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ListItem</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/listItem.js&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> title = <span class="hljs-string">&#x27;父组件向子组件通信&#x27;</span>;<br>        <span class="hljs-keyword">let</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ListTitle</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">title</span> &#125; /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        list.map((item, index) =&gt; &#123;</span><br><span class="language-xml">                            return (</span><br><span class="language-xml">                                <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">index</span> &#125; <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item</span> &#125; /&gt;</span></span><br><span class="language-xml">                            )</span><br><span class="language-xml">                        &#125;)</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure><p>去 <a href="https://segmentfault.com/a/1190000010336868">segmentfault</a> 找了个代码贴上，类组件也有了</p><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><p>有时候我们想子组件返回些值给父组件，我们会有两种方式实现：</p><ol><li>利用回调函数：这是 JavaScript 的灵活方便之处，这样就可以拿到运行时状态。</li><li>利用自定义事件机制：这种方法更通用，使用也更广泛，设计组件时，可以考虑加入事件机制往往可以达到简化组件的 API 的目的。</li></ol><p>在简单的场景下使用自定义时间显然过于复杂，为了达到目的，一般选择较为简单的方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-keyword">static</span> defaultProps = &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;this.props.checked&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                    <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.props.onChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                /&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;this.props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-keyword">static</span> defaultProps = &#123;<br>        list = [],<br>        <span class="hljs-attr">handleItemChange</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>    &#125;;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">list</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">entry</span> =&gt;</span> (&#123;<span class="hljs-attr">text</span>: entry.<span class="hljs-property">text</span>, <span class="hljs-attr">checked</span>: entry.<span class="hljs-property">checked</span>&#125;)),<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-title function_">onItemeChange</span>(<span class="hljs-params">entry</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;list&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">list</span>: list.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">prevEntry</span> =&gt;</span> (&#123;<br>                <span class="hljs-attr">text</span>: prevEntry.<span class="hljs-property">text</span>,<br>                <span class="hljs-attr">checked</span>: entry.<span class="hljs-property">text</span> === prevEntry.<span class="hljs-property">text</span><br>                    ? !prevEntry.<span class="hljs-property">checked</span><br>                    : prevEntry.<span class="hljs-property">checked</span><br>            &#125;)),<br>        &#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">handleItemChange</span>(entry)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                    this.state.list.map((entry, index)=&gt;&#123;</span><br><span class="language-xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">ListItem</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">key</span> = <span class="hljs-string">&#123;</span>`<span class="hljs-attr">list-</span>$&#123;<span class="hljs-attr">index</span>&#125;`&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">value</span> = <span class="hljs-string">&#123;entry.text&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">checked</span> = <span class="hljs-string">&#123;entry.checked&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                            <span class="hljs-attr">onChange</span> = <span class="hljs-string">&#123;this.onItemeChange.bind(this,</span> <span class="hljs-attr">entry</span>)&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">                        /&gt;</span></span><br><span class="language-xml">                    &#125;)</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的栗子中，我们在 List 组件中构建了 handleItemChange 方法，这样在使用 List 组件时，就可以在运行是拿到改变的项对应的值。比如，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleItemChange</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleItemChange</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>    <span class="hljs-title function_">handleItemChange</span>(<span class="hljs-params">item</span>)&#123;<br>        <span class="hljs-comment">// console.log(item)</span><br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span> </span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">list</span>=<span class="hljs-string">&#123;[&#123;text:1&#125;,&#123;text:2&#125;]&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">handleItemChange</span>=<span class="hljs-string">&#123;this.handleItemChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            /&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到<code>setState</code>一般与回调函数均会成对出现，这是因为回调函数即是转换内部状态时的函数传统。</p><p>上面的栗子太难看懂？又去抄了一份代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx">onItemChange = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; list &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">list</span>: list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">prevItem</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">text</span>: prevItem.<span class="hljs-property">text</span>,<br>                <span class="hljs-attr">checked</span>: prevItem.<span class="hljs-property">text</span> === item.<span class="hljs-property">text</span> ? !prevItem.<span class="hljs-property">checked</span> : prevItem.<span class="hljs-property">checked</span><br>            &#125;<br>        &#125;)<br>    &#125;);<br>&#125;<br>onTitleChange = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;利用回掉函数，子组件向父组件通信&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="跨级组件通信"><a href="#跨级组件通信" class="headerlink" title="跨级组件通信"></a>跨级组件通信</h3><p>如果我们有多层嵌套，传递用 props 就显得很不优雅了，甚至有些冗余。例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;background:</span> <span class="hljs-attr">this.props.color</span>&#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;this.props.children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.text&#125; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;this.props.color&#125;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> color = <span class="hljs-string">&quot;purple&quot;</span>;<br>    <span class="hljs-keyword">const</span> children = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">messages</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;message.text&#125;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;color&#125;</span> /&gt;</span></span><br>    );<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>context</code>是这样做的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">PropTypes</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;prop-types&#x27;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;background:</span> <span class="hljs-attr">this.context.color</span>&#125;&#125;&gt;</span></span><br><span class="language-xml">        &#123;this.props.children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">contextTypes</span> = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.text&#125; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">getChildContext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&quot;purple&quot;</span>&#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> children = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">messages</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;message.text&#125;</span> /&gt;</span></span><br>    );<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">MessageList</span>.<span class="hljs-property">childContextTypes</span> = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>警告：React 官方并不推荐大量使用<code>context</code>，虽然它可以减少逐层传递，但当组件结构复杂的时候，我们并不知道<code>context</code>是从哪里传过来的。<code>Context</code>就像一个全局变量，而全局变量正是导致应用走向混乱的罪魁祸首之一，给组件带来了外部依赖的副作用。使用<code>context</code>比较好的场景正真意义上的全局信息且不会改变。例如界面主题，用户信息等。</p></blockquote><p>Redux 作者总结了一个非常有意思的 cheatsheet：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shouldIUseReactContextFeature</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">amILirarayAuthor</span>()&amp;&amp; <span class="hljs-title function_">doINeedToPassSomeThingDownDeeply</span>())&#123;<br>        <span class="hljs-comment">// 一个自定义的 &lt;option&gt; 组件可能想于它的 &lt;select&gt; 对话</span><br>        <span class="hljs-comment">// 这是可以的，弹药记住，这是一个实验性的 API，如果在一些情况下不能成功。</span><br>        <span class="hljs-comment">// 那么需要回滚改变它</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">amIFindWith</span>(<span class="hljs-variable constant_">API_CHANGES</span> &amp;&amp; <span class="hljs-variable constant_">BUGGY_UDATES</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(myUseCase === <span class="hljs-string">&#x27;thening&#x27;</span>|| myUseCase === <span class="hljs-string">&#x27;localization&#x27;</span>)&#123;<br>        <span class="hljs-comment">// 在应用中， context 一般用于不会改变的全局变量</span><br>        <span class="hljs-comment">// 如果你坚持使用它，建议提供一个高阶函数</span><br>        <span class="hljs-comment">// 当我们要改变这个 API 的时候，只需要改变一个地方就可以了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">iPromiseToWriteHOCInsteadOfUsingDisrecly</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_">librarayAskMeToUseContext</span>())&#123;<br>        <span class="hljs-comment">//向它提供一个高阶组件</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;File an issue with this library.&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 祝你好运</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">yolo</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="没有嵌套关系的组件通信"><a href="#没有嵌套关系的组件通信" class="headerlink" title="没有嵌套关系的组件通信"></a>没有嵌套关系的组件通信</h2><ol><li>没有嵌套关系的，那只能通过可以影响全局的一些机制去考虑，自定义事件机制不失为一种上佳的方法。</li><li>在 componentDidMount 事件中，如果组件完成挂载，再订阅事件。<br>当组件卸载的时候，在 componentWillUnmount 事件中取消事件的订阅。</li></ol><blockquote><p>笔记参考来源：<br><a href="https://segmentfault.com/a/1190000010336868">React 组件间通信</a></p><p><a href="http://www.ituring.com.cn/book/1898">深入 React 技术栈</a></p><p><a href="https://discountry.github.io/">React 中文文档</a></p><p>end</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 表单组件</title>
    <link href="/posts/b1420a79.html"/>
    <url>/posts/b1420a79.html</url>
    
    <content type="html"><![CDATA[<p>之前写 AS_firedog 项目的时候，遇到一个问题，就是怎么获取到 <code>&lt;input /&gt;</code>的值，最后虽然在网上找了份代码解决了，但是还是很懵懂。</p><span id="more"></span><p>在《深入 React 技术栈》中，我就领略到了 React 的表单组件和原生组件的不同，React 中很多很多组件都需要自己封装后才能实现原生的效果，而这带来的，是 React 可以对表单的状态进行控制，另外，在状态里已经可以拿到表单的值了，这一步在 html 中我们也是需要手动去处理的。</p><h3 id="交互属性"><a href="#交互属性" class="headerlink" title="交互属性"></a>交互属性</h3><p>表单组件支持几个受用户影响的属性：</p><ul><li><code>value</code>，用于<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>组件，获取值。</li><li><code>checked</code>，用于类型为<code>checkbox</code>或者<code>radio</code>的<code>&lt;input&gt;</code>组件</li><li><code>selected</code>，用于<code>&lt;option&gt;</code>组件。</li></ul><p>当上面的三个属性发生变化时，表单组件可以通过<code>onChange</code>回调函数来监听组件变化。</p><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>React 受控组件更新 state 的流程</p><ol><li>可以通过在初始 state 中设置表单的默认值。</li><li>每单表单的值发生变化时，调用<code>onChange</code>事件处理器。</li><li>事件处理器通过合成事件对象<code>e</code>(<code>event</code>) 来拿到改变后的状态，并更新应用的<code>state</code></li><li><code>setState</code>触发 View 的重新渲染，完成表单组件值的更新。</li></ol><blockquote><p>值得注意的是，React 中我们不能想 HTML 一样把默认值设置在<code>value</code>中，这样子组件的值将永远不会改变。</p></blockquote><p>虽然 React 表单组件比 HTML 元素的组件要复杂，每次状态改变都会执行上面这几步，可是这样让我们的表单的状态更可靠，更可控，因为这意味着我们在渲染之前，对表单的值进行清洗和校验。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">state = &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello!&#x27;</span><br>&#125;<br><span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">value</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;);<br>&#125;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们可以用受控组件来截取用户输入的前 140 个字符，并转换为大写：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">handleChange</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>    <span class="hljs-attr">value</span>: e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">140</span>).<span class="hljs-title function_">toUpperCase</span>(),<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>受控组件不维持一个自己的内部状态；它单纯的基于 props 渲染。</p><h3 id="不受控组件"><a href="#不受控组件" class="headerlink" title="不受控组件"></a>不受控组件</h3><p>有受控组件，自然也就有不受控组件了。受控组件通过初始 state 来设定<code>value</code>的默认值，靠<code>onChange</code>方法来监听，用<code>setState</code>更新组件。而不受控组件压根就不设置<code>value</code>属性，它自己管理自己的状态。可以通过<code>onChange</code>方法监听变化。</p><p>那问题来了，如果我想写不受控组件，又想设置默认值呢？</p><p>答案是可以的，可以使用 <code>defaultValue</code> 属性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">defaultValue</span>=<span class="hljs-string">&quot;Hello!&quot;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 React 中，非受控组件是一种反模式，它的值不受组件自身的 state 或 props 控制。通常，需要通过为其添加 <code>ref</code> prop 来访问渲染后的底层 DOM 元素。<code>defaultValue</code> 和 <code>defaultChecked</code> props 只能在内部渲染时被使用。通过 <code>defaultValue</code> 或者 <code>defaultChecked</code> 来设置表单的默认值，它仅会被渲染一次，在后续的渲染时并不起作用。下面对比以下两个示例。</p><h3 id="textarea-使用"><a href="#textarea-使用" class="headerlink" title="textarea 使用"></a>textarea 使用</h3><p>React 的<code>&lt;textarea&gt;</code>的值不像 HTML 一样写成子节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;textarea name=<span class="hljs-string">&quot;description&quot;</span> value=<span class="hljs-string">&quot;This is a description.&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>当然也不是不能那样写，如果 <em>非要</em> 使用子节点，效果和使用 <code>defaultValue</code> 一样。</p><p><strong>栗子</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EssayForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Please write an essay about your favorite DOM element.&#x27;</span><br>    &#125;;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">value</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;An essay was submitted: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">value</span>);<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          Name:</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="select-使用"><a href="#select-使用" class="headerlink" title="select 使用"></a>select 使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;select&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;grapefruit&quot;</span>&gt;</span>Grapefruit<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lime&quot;</span>&gt;</span>Lime<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;coconut&quot;</span>&gt;</span>Coconut<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mango&quot;</span>&gt;</span>Mango<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p>如果是不受控组件，则使用 <code>defaultValue</code>。</p><blockquote><p>注意：给 <code>value</code> 属性传递一个数组，可以选中多个选项：<code>&lt;select multiple=&#123;true&#125; value=&#123;[&#39;B&#39;, &#39;C&#39;]&#125;&gt;</code>。</p></blockquote><p><strong>栗子</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlavorForm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;coconut&#x27;</span>&#125;;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleChange</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleSubmit</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">handleChange</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">value</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Your favorite flavor is: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">value</span>);<br>    event.<span class="hljs-title function_">preventDefault</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          Pick your favorite La Croix flavor:</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;grapefruit&quot;</span>&gt;</span>Grapefruit<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lime&quot;</span>&gt;</span>Lime<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;coconut&quot;</span>&gt;</span>Coconut<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mango&quot;</span>&gt;</span>Mango<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总之，<code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code>, 和 <code>&lt;select&gt;</code> 都十分类似 - 他们都通过传入一个<code>value</code>属性来实现对组件的控制。</p><h3 id="多个输入的解决方法"><a href="#多个输入的解决方法" class="headerlink" title="多个输入的解决方法"></a>多个输入的解决方法</h3><p>当你有处理多个受控的<code>input</code>元素时，你可以通过给每个元素添加一个<code>name</code>属性，来让处理函数根据 <code>event.target.name</code>的值来选择做什么。</p><p><strong>栗子</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reservation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">isGoing</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">numberOfGuests</span>: <span class="hljs-number">2</span><br>    &#125;;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleInputChange</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handleInputChange</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">handleInputChange</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = event.<span class="hljs-property">target</span>;<br>    <span class="hljs-keyword">const</span> value = target.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;checkbox&#x27;</span> ? target.<span class="hljs-property">checked</span> : target.<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">const</span> name = target.<span class="hljs-property">name</span>;<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      [name]: value<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          Is going:</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isGoing&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;this.state.isGoing&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleInputChange&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          Number of guests:</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numberOfGuests&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.numberOfGuests&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleInputChange&#125;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>本文代码来源 <a href="https://discountry.github.io/react/docs/forms.html">discountry</a>；<br>2017 年 07 月 28 日 00:18:30</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
      <tag>表单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理和语言知识</title>
    <link href="/posts/d0c89869.html"/>
    <url>/posts/d0c89869.html</url>
    
    <content type="html"><![CDATA[<p>我是上大学后才真正接触编程，那时候因为专业要搞单片机，大一第二学期就开了一门 C++ 的课。我很喜欢敲代码的，自己看书到了<code>指针</code>那一章时卡住了，而那时候老师还刚刚上两个星期的课。于是我就开始逃课在宿舍自学<code>c</code>，上机课才拿代码去问老师问题。</p><span id="more"></span><p>而当我越学越深的时候，我看到这世界上不止<code>c</code>，<code>c++</code>，还有很多我未曾见过的语言，我还经常上 <a href="https://learnxinyminutes.com/">learn x in y minutes</a> 看看一些语言的语法。一直以来我都要一个很天真的想法，为什么不统一成一种语言干所有计算机上的事呢？直到我在知乎上看到 <a href="https://zhuanlan.zhihu.com/p/27554023">大前端开发者需要了解的基础编译原理和语言知识</a>。</p><!--more--><h2 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h2><p>一说到编程，我们都会想到 C 语言，编程的第一个程序按照惯例都写<code>hello word</code>，那我们就从 C 语言的<code>hello word</code>程序说起。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);  <span class="hljs-comment">// 字符串的长度是 11</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>要把上面的代码运行起来，我们需要预处理、词法分析、语法分析、生成中间代码，生成目标代码，汇编，链接 等步骤。</p><h3 id="词法分析和语法分析"><a href="#词法分析和语法分析" class="headerlink" title="词法分析和语法分析"></a>词法分析和语法分析</h3><p>编译器开始干活了，它把前面五个步骤都完成了。它读取源码，把源码一句一句的拆分成词（让我想到了中文分词）。经过<strong>词法分析</strong>，编译器已经知道每个单词了，然而练成一句话是什么意思，还需要语法分析。语法树将字符串格式的源代码转化为树状的数据结构，更容易被计算机理解和处理。但它距离中间代码还有一定的距离。</p><h3 id="生成中间码"><a href="#生成中间码" class="headerlink" title="生成中间码"></a>生成中间码</h3><p>以 GCC 为例，生成中间代码可以分为三个步骤：</p><ul><li>语法树转高端 gimple</li><li>高端 gimple 转低端 gimple</li><li>低端 gimple 经过 cfa 转 ssa 再转中间代码</li></ul><p>干了些什么就这么过了吧。下一个问题</p><p><strong>为什么要生成中间码？</strong></p><p>一方面中间码和语言无关，也和 CPU 与具体实现无关。可以理解为中间代码是一种非常抽象，又非常普适的代码。</p><p>如果用编码格式来解释的话，我们在<code>UTF8</code>编码下打开<code>GBK</code>编码写的文件，就会出现乱码。直接转化是可以的，然而，如果是 3 种编码转化的话，每种编码都需要 2 种转化编码转化工具，如果是 N 中编码，那每种语言都需要 N-1 种转化工具。工作量很大呀。</p><p>我们可以通过 <code>Unicode</code> 编码，作为中间码，文件编辑完成，转为 Unicode 编码，再需要转其他编码时，把<code>Unicode</code>编码转成其他编码。这样子每种编码只需要两种编码器就够了。</p><p>那问题来了，是不是通过中间码，我们可以把所有的语言都转成相同的中间码，就实现其他语言的功能呢？这个问题后面再说。</p><h3 id="目标代码"><a href="#目标代码" class="headerlink" title="目标代码"></a>目标代码</h3><p>目标代码也可以叫做汇编代码。由于中间代码已经非常接近于实际的汇编代码，它几乎可以直接被转化。主要的工作量在于兼容各种 CPU 以及填写模板。在最终生成的汇编代码中，不仅有汇编命令，也有一些对文件的说明。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>接下来就是汇编器干活的时候了，它从编译器手里接过用汇编代码进一步转成二进制码。二进制码是计算机认识的语言。我是电气专业的，自然是学过汇编语言。汇编其实很想我们命令行写的命令，让计算机去干活。写汇编码的时候能深深的感觉，到自己在手动执行计算机。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>目标文件中不可能把所有的变量和函数都定义在文件内部。比如 strlen 函数就是一个被调用的外部函数，此时就需要把 main.o 这个目标文件和包含了 strlen 函数实现的目标文件链接起来。生成 main.o 的过程中，strlen() 函数的地址并不知道，所以只能先用 0 来代替，直到最后链接时，才会修改成真实的地址。</p><p>链接器就是靠着重定位表来知道哪些地方需要被重定位的。每个可能存在重定位的段都会有对应的重定位表。在链接阶段，链接器会根据重定位表中，需要重定位的内容，去别的目标文件中找到地址并进行重定位。</p><p>有时候我们还会听到动态链接这个名词，它表示重定位发生在运行时而非编译后。动态链接可以节省内存，但也会带来加载的性能问题，这里不详细解释，感兴趣的读者可以阅读《程序员的自我修养》这本书。</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>最后简单描述一下预处理。预处理主要是处理一些宏定义，比如#define、#include、#if 等。预处理的实现有很多种，有的编译器会在词法分析前先进行预处理，替换掉所有 # 开头的宏，而有的编译器则是在词法分析的过程中进行预处理。当分析到 # 开头的单词时才进行替换。虽然先预处理再词法分析比较符合直觉，但在实际使用中，GCC 使用的却是一边词法分析，一边预处理的方案。</p><h2 id="编译-VS-解释"><a href="#编译-VS-解释" class="headerlink" title="编译 VS 解释"></a>编译 VS 解释</h2><p>关于编译原理的基础知识虽然枯燥，但掌握这些知识有助于我们理解一些有用的，但不太容易理解的概念。接下来，我们简单看一下别的语言是如何运行的。</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Java 代码执行的步骤可以分为两部分，编译和执行。<code>*.java</code>编译成<code>*.class</code>，然后 Java 虚拟机执行<code>*.class</code>得到接过，和 c 语言是一样的。</p><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><p>一般来说我们也把解释型语言叫做脚本语言，比如 Python、Ruby、JavaScript 等等。这类语言的特点是，不需要编译，直接由解释器执行。换言之，运行流程变成了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">源代码 -&gt; 解释器 -&gt; 运行结果<br></code></pre></td></tr></table></figure><p>这里的解释器是一个黑箱子，各种实现方式。它的实现可以非常类似于 Java 的执行过程。至于虚拟机，它并不是什么黑科技，它的内部可以编译执行，也可以解释执行。如果是编译执行，那么它会把字节码编译成当前 CPU 下的机器码然后统一执行。如果是解释执行，它会逐条翻译字节码。</p><p>有意思的是，如果虚拟机是编译执行的，那么这套流程和 C 语言几乎一样，都满足下面这个流程：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">源代码 -&gt; 中间代码 -&gt; 目标代码 -&gt; 运行结果<br></code></pre></td></tr></table></figure><blockquote><p>大块引用</p><p>因此，解释型语言和编译型语言的根本区别在于，对于用户来说，到底是直接从源码开始执行，还是从中间代码开始执行。以 C 语言为例，所有的可执行程序都是二进制文件。而对于传统意义的 Python 或者 JavaScript，用户并没有拿到中间代码，他们直接从源码开始执行。从这个角度来看， Java 不可能是解释型语言，虽然 Java 虚拟机会解释字节码，但是对于用户来说，他们是从编译好的 .class 文件开始执行，而非源代码。</p><p>实际上，在 x86 这种复杂架构下，二进制的机器码也不能被硬件直接执行，CPU 会把它翻译成更底层的指令。从这个角度来说，我们眼中的硬件其实也是一个虚拟机，执行了一些“抽象”指令，但我相信不会有人认为 C 语言是解释型语言。因此，有没有虚拟机，虚拟机是不是解释执行，会不会生成中间代码，这些都不重要，重要的是如果从中间代码开始执行，而且 AST 已经事先生成好，那就是编译型的语言。</p><p>如果更本质一点看问题，根本就不存在解释型语言或者编译型语言这种说法。已经有人证明，如果一门语言是可以解释的，必然可以开发出这门语言的编译器。反过来说，如果一门语言是可编译的，我只要把它的编译器放到解释器里，把编译推迟到运行时，这么语言就可以是解释型的。事实上，早有人开发出了 C 语言的解释器：</p><p>C 源代码 -&gt; C 语言解释器（运行时编译、汇编、链接） -&gt; 运行结果<br>我相信这一点很容易理解，规范和实现是两套分离的体系。我们平常说的 C 语言的语法，实际上是一套规范。理论上来说每个人都可以写出自己的编译器来实现 C 语言，只要你的编译器能够正确运行，最终的输出结果正确即可。而编译型和解释型说的其实是语言的实现方案，是提前编译以获得最大的性能提高，还是运行时去解析以获得灵活性，往往取决于语言的应用场景。所以说一门语言是编译型还是解释型的，这会非常可笑。一个标准怎么可能会有固定的实现呢？之所以给大家留下了 C 语言是编译型语言，Python 是解释型语言的印象，往往是因为这门语言的应用场景决定了它是主流实现是编译型还是解释型。</p></blockquote><h3 id="自举（引用）"><a href="#自举（引用）" class="headerlink" title="自举（引用）"></a>自举（引用）</h3><p>不知道有没有人思考过，C 语言的编译器是如何实现的？实际上它还是用 C 语言实现的。这种自己能编译自己的神奇能力被称为自举 (Bootstrap)。</p><p>乍一看，自举是不可能的。因为 C 语言编译器，比如 GCC，要想运行起来，必定需要 GCC 的编译器将它编译成二进制的机器码。然而 GCC 的编译器又如何编译呢……</p><p>解决问题的关键在于打破这个循环，我们可以先用一个比 C 语言低级的语言来实现一个 C 语言编译器。这件事是可能做到的，因为这个低级语言必然会比 C 语言简单，比如我们可以直接用汇编代码来写 C 语言的编译器。由于越低级的语言越简单，但表达能力越弱，所以用汇编来写可能太复杂这种情况下我们可以先用一个比 C 语言低级但比汇编高级的语言来实现 C 语言的编译器，同时用汇编来实现这门语言的编译器。总之就是不断用低级语言来写高级语言的编译器，虽然语言越低级，它的表达能力越弱，但是它要解析的语言也在不断变简单，所以这件事是可以做到的。</p><p>有了低级语言写好的 C 语言编译器以后，这个编译器是二进制格式的。此时就可以删掉所有的低级语言，只留一个二进制格式的 C 语言编译器，接下来我们就可以用 C 语言写编译器，再用这个二进制格式的编译器去编译 C 语言实现的 C 语言编译器了，于是完成了自举。</p><p>从这个角度来看，解释型语言是不可能自举的。以 Python 为例，自举要求它能用 Python 语言写出来 Python 的解释器，然而这个解释器如何运行呢，最终还是需要一个解释器。而解释器体系下， Python 都是从源码经过解释器执行，又不能留下什么可以直接被硬件执行的二进制形式的解释器文件，自然是没办法自举的。然而，就像前面说的，Python 完全可以实现一个编译器，这种情况下它就是可以自举的。</p><p>所以一门语言能不能自举，主要取决于它的实现形式能否被编译并留下二进制格式的可执行文件。</p><h2 id="运行时（引用）"><a href="#运行时（引用）" class="headerlink" title="运行时（引用）"></a>运行时（引用）</h2><p>以 C 语言为例，有非常多的操作最终都依赖于 glibc 这个动态链接库。包括但不限于字符串处理 (strlen、strcpy)、信号处理、socket、线程、IO、动态内存分屏 (malloc) 等等。这一点很好理解，如果回忆一下之前编译器的工作原理，我们会发现它仅仅是处理了语言的语法，比如变量定义，函数声明和调用等等。至于语言的功能， 比如内存管理，內建的类型，一些必要功能的实现等等。如果要对运行时库进行分类，大概有两类。一种是语言自身功能的实现，比如一些內建类型，内置的函数；另一种则是语言无关的基础功能，比如文件 IO，socket 等等。</p><p>由于每个程序都依赖于运行时库，这些库一般都是动态链接的，比如 C 语言的 (g)libc。这样一来，运行时库可以存储在操作系统中，节省内存占用空间和应用程序大小。</p><p>对于 Java 语言来说，它的垃圾回收功能，文件 IO 等都是在虚拟机中实现，并提供给 Java 层调用。从这个角度来看，虚拟机&#x2F;解释器也可以被看做语言的运行时环境（库）。</p><h2 id="swift-运行时库"><a href="#swift-运行时库" class="headerlink" title="swift 运行时库"></a>swift 运行时库</h2><p>经过这样的解释，相信 swift 的运行时库就很容易理解了。一方面，swift 是绝对的静态语言，另一方面，swift 毫无疑问的带有自己的运行时库。举个最简单的例子，如果阅读 swift 源码就会发现某些类型，比如字符串 (String)，或者数组，再或者某些函数 (print) 都是用 swift 实现的，这些都是 swift 运行时库的一部分。按理说，运行时库应该内置于操作系统中并且和应用程序动态链接，然而坑爹的 Swift 在本文写作之时依然没有稳定 ABI，导致每个程序都必须自带运行时库，这也就是为什么目前 swift 开发的 app 普遍会增加几 Mb 包大小的原因。</p><p>说到 ABI，它其实就是一个编译后的 API。简单来说，API 是描述了在应用程序级别，模块之间的调用约定。比如某个模块想要调用另一个模块的功能，就必须根据被调用模块提供的 API 来调用，因为 API 中规定了方法名、参数和返回结果的类型。而当源码被编译成二进制文件后，它们之间的调用也存在一些规则和约定。</p><p>比如模块 A 有两个整数 a 和 b，它们的内存布局如下：</p><p><img src="https://pic2.zhimg.com/v2-ab788afe15827f513f4fbddc24e3f7a1_b.png" alt="img"></p><p>这时候别的模块调用 A 模块的 b 变量，可以通过初始地址加偏移量的方式进行。</p><p>如果后来模块 A 新增了一个整数 c，它的内存布局可能会变成：</p><p><img src="https://pic1.zhimg.com/v2-63c126a9ea1ece2ba5da17245edbbbc0_b.png" alt="img"></p><p>如果调用方还是使用相同的偏移量，可以想见，这次拿到的就是变量 a 了。因此，每当模块 A 有更新，所有依赖于模块 A 的模块都必须重新编译才能正确工作。如果这里的模块 A 是 swift 的运行时库，它内置于操作系统并与其他模块（应用程序）动态链接会怎么样呢？结果就是每次更新系统后，所有的 app 都无法打开。显然这是无法接受的。</p><p>当然，ABI 稳定还包括其他的一些要求，比如调用和被调用者遵守相同的调用约定（参数和返回值如何传递）等。</p><h2 id="JavaScript-那些事"><a href="#JavaScript-那些事" class="headerlink" title="JavaScript 那些事"></a>JavaScript 那些事</h2><p>JavaScript 的宿主环境和其他语言不同，一般来说是浏览器，当然还有 Node。</p><p>先看看浏览器，DOM 操作 ECMAScript 中并没有相应的 API，这是浏览器提供的。浏览器并没有给 JavaScript IO 接口读取系统文件，自然在浏览器上 JavaScript 是不具备 IO 能力的。而不同厂家的浏览器的实现不同，导致 JavaScript 有时候还要判断浏览器来选择代码去实现功能。和 JavaScript 一样干同一件事的还要 CSS。</p><p>换成 Node 环境下，JavaScript 虽然不能操作 DOM 了（毕竟 DOM 是浏览器才有的东西），但是可以用<code>fs</code> 模块对系统文件进行操作。这时候，Node.js 就更像是一个标准的 JavaScript 解析器了。这也是为什么 Node.js 让 JavaScript 可以编写后端应用的原因。</p><h3 id="JIT-优化（引用）"><a href="#JIT-优化（引用）" class="headerlink" title="JIT 优化（引用）"></a>JIT 优化（引用）</h3><p>解释执行效率低的主要原因之一在于，相同的语句被反复解释，因此优化的思路是动态的观察哪些代码是经常被调用的。对于那些被高频率调用的代码，可以用编译器把它编译成机器码并且缓存下来，下次执行的时候就不用重新解释，从而提升速度。这就是 JIT(Just-In-Time) 的技术原理。</p><p>但凡基于缓存的优化，一定会涉及到缓存命中率的问题。在 JavaScript 中，即使是同一段代码，在不同上下文中生成的机器码也不一定相同。比如这个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果这里的 a 和 b 都是整数，可以想见最终的代码一定是汇编中的 add 命令。如果类似的加法运算调用了很多次，解释器可能会认为它值得被优化，于是编译了这段代码。但如果下一次调用的是 add(“hello”, “world”)，之前的优化就无效了，因为字符串加法的实现和整数加法的实现完全不同。</p><p>于是优化后的代码（二进制格式）还得被还原成原先的形式（字符串格式），这样的过程被称为去优化。反复的优化 -&gt; 去优化 -&gt; 优化 …… 非常耗时，大大降低了引入 JIT 带来的性能提升。</p><p>JIT 理论上给传统的 JavaScript 带了了 20-40 倍的性能提升，但由于上述去优化的存在，在实际运行的过程中远远达不到这个理论上的性能天花板。</p><h2 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h2><p>前文说过，JavaScript 实际上是由浏览器引擎负责解析并提供一些功能的。浏览器引擎可能是由 C++ 这样高效的语言实现的，那么为什么不用 C++ 来写网页呢？实际上我认为从技术角度来说并不存在问题，直接下发 C++ 代码，然后交给 C++ 解释器去执行，再调用浏览器的 C++ 组件，似乎更加符合直觉一些。</p><p>之所以选择 JavaScript 而不是 C++，除了主流浏览器目前都只支持 JavaScript 而不支持 C++ 这个历史原因以外，更重要的一点是一门语言的高性能和简单性不可兼得。JavaScript 在运行速度方面做出了牺牲，但也具备了简单易开发的优点。作为通用编程语言，JavaScript 和 C++ 主要的性能差距就在于缺少类型标注，导致无法进行有效的提前编译。之前说过 JIT 这种基于缓存去猜测类型的方式存在瓶颈，那么最精确的方式肯定还是直接加上类型标注，这样就可以直接编译了，代表性的作品有 Mozilla 的 Asm.js。</p><p>Asm.js 是 JavaScript 的一个子集，任何 JavaScript 解释器都可以解释它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>    a = a | <span class="hljs-number">0</span>  <span class="hljs-comment">// 任何整数和自己做按位或运算的结果都是自己</span><br>    b = b | <span class="hljs-number">0</span>  <span class="hljs-comment">// 所以这个标记不改变运算结果，但是可以提示编译器 a、b 都是整数</span><br>    <span class="hljs-keyword">return</span> a + b | <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有 Asm.js 特定的解释器，完全可以把它提前编译出来。即使没有也没关系，因为它完全是 JavaScript 语法的子集，普通的解释器也可以解释。</p><p>然而，回顾一下我们最初对解释器的定义：解释器是一个黑盒，输入源码，输出运行结果。Asm.js 其实是黑盒内部的一个优化，不同的黑盒（浏览器）无法共享这一优化。换句话说 Asm.js 写成的代码放到 Chrome 上面和普通的 JavaScript 毫无区别。</p><p>于是，包括微软、谷歌和苹果在内的各大公司觉得，是时候搞个标准了，这个标准就是 WebAssembly 格式。它是介于中间代码和目标代码之间的一种二进制格式，借用 WebAssembly 系列（四）WebAssembly 工作原理 一文的插图来表示：</p><p><img src="https://pic4.zhimg.com/v2-92d8993cfb8710d9d9c478555f5c770b_b.jpg" alt="img"></p><p>通常从中间代码到机器码，需要经过平台具体化（转目标代码）和二进制化（汇编器把汇编代码变为二进制机器码）这两个步骤。而 WebAssembly 首先完成了第二个步骤，即已经是二进制格式的，但只是一系列虚拟的通用指令，还需要转换到各个 CPU 架构上。这样一来，从 WebAssembly 到机器码其实是透明且统一的，各个浏览器厂商只需要考虑如何从中间代码转换 WebAssembly 就行了。</p><p>由于编译器的前端工具 Clang 可以把 C&#x2F;C++ 转换成中间代码，因此理论上它们都可以用来开发网页。然而谁会这么这么做呢，放着简单快捷，现在又高效的 JavaScript 不写，非要去啃 C++？</p><h2 id="跨语言那些事儿"><a href="#跨语言那些事儿" class="headerlink" title="跨语言那些事儿"></a>跨语言那些事儿</h2><p>C++ 写网页这个脑洞虽然比较大，但它启发我思考一个问题：“对于一个常见的可以由某个语言完成的任务（比如 JavaScript 写网页），能不能换一个语言来实现（比如 C++)，如果不能，制约因素在哪里”。</p><p>由于绝大多数主流语言都是 <a href="http://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzI0NzI1NzU5NA==&mid=2247483729&idx=1&sn=8903c833e88c0465e765f47b38dcc6d0&scene=21%23wechat_redirect"><strong>图灵完备的</strong></a>，也就是说一切可计算的问题，在这些语言层面都是等价的，都可以计算。那么制约语言能力的因素也就只剩下了运行时的环境是否提供了相应的功能。比如前文解释过的，虽然浏览器中的 JavaScript 不能读写文件，不能实现一个服务器，但这是浏览器（即运行时环境）不行，不是 JavaScript 不行，只要把运行环境换成 Node.js 就行了。</p><h2 id="直接语法转换"><a href="#直接语法转换" class="headerlink" title="直接语法转换"></a>直接语法转换</h2><p>大部分读者应该接触过简单的逆向工程。比如编译后的 .o 目标文件和 .class 字节码都可以反编译成源代码，这种从中间代码倒推回源代码的技术也被叫做反编译 (decompile)，反编译器的工作流程基本上是编译器的倒序，只不过完美的反编译一般来说比较困难，这取决于中间代码的实现。像 Java 字节码这样的中间代码，由于信息比较全，所以反编译就相对容易、准确一些。C 代码在生成中间代码时丢失了很多信息，因此就几乎不可能 100% 准确的倒推回去，感兴趣的读者可以参考一下知名的反编译工具 Hex-Rays 的一篇博客。</p><p>前文说过，编译器前端可以对多种语言进行词法分析和语法分析，并且生成一套语言无关的中间代码，因此理论上来说，如果某个编译器前端工具支持两个语言 A 和 B 的解析，那么 A 和 B 是可以互相转换的，流程如下：</p><blockquote><p>A 源码 &lt;–&gt; 语言无关的中间代码 &lt;–&gt; B 源码</p></blockquote><p>其中从源码转换到中间代码需要使用编译器，从中间代码转换到源码则使用反编译器。</p><p>但在实际情况中，事情会略复杂一些，这是因为中间代码虽然是一套语言无关、CPU 也无关的指令集，但不代表不同语言生成的中间代码就可以通用。比如中间代码共有 1、2、3、……、6 这六个指令。A 语言生成的中间代码仅仅是所有指令的一个子集，比如是 1-5 这 5 个指令；B 语言生成的中间代码可能是所有指令的另一个子集，比如 2-6。这时候我们说的 B 语言的反编译器，实际上是从 2-6 的指令子集推导出 B 语言源码，它对指令 1 可能无能为力。</p><p>以 GCC 的中间代码 RTL: Register Transfer Language 为例，官方文档 在对 RTL 的解释中，就明确的把 RTL 树分为了通用的、C&#x2F;C++ 特有的、Java 特有的等几个部分。</p><p><img src="https://pic3.zhimg.com/v2-616e1fc357fab2bfbe2adad9d39e2ca6_b.jpg" alt="img"></p><p>具体来说，我们知道 Java 并不能直接访问内存地址，这一点和浏览器上的 JavaScript 不能读写文件很类似，都是因为它们的运行环境（虚拟机）具备这种能力，但没有在语言层面提供。因此，含有指针四则运算的 C 代码无法直接被转换成 Java 代码，因为 Java 字节码层面并没有定义这样的抽象，一种简单的方案是申请一个超大的数组，然后自己模拟内存地址。</p><p>所以，即使编译器前端同时支持两种语言的解析，要想进行转换，还必须处理两种语言在中间代码层面的一些小差异，实际流程应该是：</p><blockquote><p>A 源码 &lt;–&gt; 中间代码子集 (A) &lt;–适配器–&gt; 中间代码子集 (B) &lt;–&gt; B 源码</p></blockquote><p>这个思路已经不仅仅停留在理论上了，比如 Github 上有一个库：emscripten 就实现了将任何 Clang 支持的语言（比如 C&#x2F;C++ 等）转换成 JavaScript，再比如 lljvm 实现了 C 到 Java 字节码的转换。</p><p>然而前文已经解释过，实现单纯语法的转换意义并不大。一方面，对于图灵完备的语言来说，换一种表示方法（语言）去解决相同的问题并没有意义。另一方面，语言的真正功能绝不仅仅是语法本身，而在于它的运行时环境提供了什么样的功能。比如 Objective-C 的 Foundation 库提供了字典类型 NSDictionary，它如果直接转换成 C 语言，将是一个找不到的符号。因为 C 语言的运行时环境根本就不提供对这种数据结构的支持。因此凡是在语言层面进行强制转换的，要么利用反编译器拿到一堆格式正确但无法运行的代码，要么就自行解析语法树并为转换后的语言添加对应的能力，来实现转换前语言的功能。</p><p><img src="https://pic3.zhimg.com/v2-b08ab5004af7f26682a40ba3620f89fa_b.jpg" alt="img"></p><p>比如图中就是一个 C 语言转换 Java 的工具，为了实现 C 语言中的字符串申请和释放内存，这个工具不得不自己实现了 com.mtsystems.coot.String8 类。这样巨大的成本，显然不够普适，应用场景相对有限。</p><p>总之，直接的语法转换是一个美好的想法，但实现起来难度大，收益有限，通常是为了移植已经用某个语言写好的框架，或者开个脑洞用于学习，但实际应用场景并不多。</p><h2 id="胶水语言-Python"><a href="#胶水语言-Python" class="headerlink" title="胶水语言 Python"></a>胶水语言 Python</h2><p>Python 一个很强大的特点是胶水语言，可以把 Python 理解为各种语言的粘合剂。对于 Python 可以处理的逻辑，用 Python 代码即可完成。如果追求极致的性能或者调用已经实现的功能，也可以让 Python 调用已经由别的语言实现的模块，以 Python 和 C 语言的交互解释一下。</p><p>首先，如果是 C 语言要执行 Python 代码，显然需要一个 Python 的解释器。由于在 Mac OS X 系统上，Python 解释器是一个动态链接库，所以只要导入一下头文件即可，下面这段代码可以成功输出 “Hello Python!!!”:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#import <span class="hljs-string">&lt;Python/Python.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * argv[])</span> &#123;<br>    Py_SetProgramName(argv[<span class="hljs-number">0</span>]);<br>    Py_Initialize();<br>    PyRun_SimpleString(<span class="hljs-string">&quot;print &#x27;Hello Python!!!&#x27;\n&quot;</span>);<br>    Py_Finalize();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是在 iOS 应用里，由于 iOS 系统没有对应的动态库，所以需要把 Python 的解释器打包成一个静态库并且链接到应用中，网上已经有人做好了：python-for-iphone，这就是为什么我们看到一些教育类的应用模拟了 Python 解释器，允许用户编写 Python 代码并得到输出。</p><p>Python 调用 Objective-C&#x2F;C 也不复杂，只需要在 C 代码中指定要暴露的模块 A 和要暴露的方法 a，然后 Python 就可以直接调用了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> A<br>A.a()<br></code></pre></td></tr></table></figure><p>详细的教程可以看这里：如何实现 C&#x2F;C++ 与 Python 的通信？</p><p>有时候，如果能把自己熟悉的语言应用到一个陌生的领域，无疑会大大降低上手的难度。以 iOS 开发为例，开发者的日常其实是利用 Objective-C 语法来描述一些逻辑，最终利用 UIKit 等框架完成和应用的交互。 一种很自然而然的想法是，能不能用 Python 来实现逻辑，并且调用 Objective-C 的接口，比如 UIKit、Foundation 等。实际上前者是完全可以实现的，但是 Python 调用 Objective-C 远比调用 C 语言要复杂得多。</p><p>一方面从之前的分析中也能看出，并不是所有的源码编译成目标文件都可以被 Python 引用；另一方面，最重要的是 Objective-C 方法调用的特性。我们知道方法调用实际上会被编译成 msg_Send 并交给 runtime 处理，最终找到函数指针并调用。这里 Objective-C 的 runtime 其实是一个用 C 语言实现动态链接库，它可以理解为 Objective-C 运行时环境的一部分。换句话说，没有 runtime 这个库，包含方法调用的 Objective-C 代码是不可能运行起来的，因为 msg_Send 这个符号无法被重定向，运行时将找不到 msg_Send 函数的地址。就连原生的 Objective-C 代码都需要依赖运行时，想让 Python 直接调用某个 Objective-C 编译出来的库就更不可能了。</p><p>想用 Python 写开发 iOS 应用是有可能的，比如：PyObjc，但最终还是要依赖 Runtime。大概的思路是首先用 Python 拿到 runtime 这个库，然后通过这个库去和 runtime 交互，进而具备了调用 Objective-C 和各种框架的能力。比如我要实现 Python 中的 UIView 这个类，代码会变成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> objc<br><br><span class="hljs-comment"># 这个 objc 是动态加载 libobjc.dylib 得到的</span><br><span class="hljs-comment"># Python 会对 objc 做一些封装，提供调用 runtime 的能力</span><br><span class="hljs-comment"># 实际的工作还是交给 libobjc.dylib 完成</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UIView</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, param</span>):<br>        objc.msgSend(<span class="hljs-string">&quot;UIView&quot;</span>, <span class="hljs-string">&quot;init&quot;</span>, param)<br></code></pre></td></tr></table></figure><p>这么做的性价比并不高，如果和 JSPatch 相比，JSPatch 使用了内置的 JavaScriptCore 作为 JavaScript 的解析器，而 PyObjc 就得自己带一个 libPython.a 解释器。此外，由于 iOS 系统的沙盒限制，非越狱机器并不能拿到 libobjc 库，所以这个工具只能在越狱手机上使用。</p><h2 id="OCS"><a href="#OCS" class="headerlink" title="OCS"></a>OCS</h2><p>既然说到了 JSPatch 这一类动态化的 iOS 开发工具，我就斗胆猜测一下腾讯 OCS 的实现原理，目前介绍 OCS 的文章寥寥无几，由于苹果公司的要求，原文已经被删除，从新浪博客上摘录了一份：OCS ——史上最疯狂的 iOS 动态化方案。如果用一句话来概述，那么就是 OCS 是一个 Objective-C 解释器。</p><p>首先，OCS 基于 clang 对下发的 Objective-C 代码做词法、语法分析，生成 AST 然后转化成自定义的一套中间码 (OSScript)。当然，原生的 Objective-C 可以运行，绝不仅仅是编译器的功劳。就像之前反复强调的那样，运行时环境也必不可少，比如负责 GCD 的 libdispatch 库，还有内存管理，多线程等等功能。这些功能原来都由系统的动态库实现，但现在必须由解释器实现，所以 OCS 的做法是开发了一套自己的虚拟机去解释执行中间码。这个运行原理就和 JVM 非常类似了。</p><p>当然，最终还是要和 Objective-C 的 Runtime 打交道，这样才能调用 UIKit 等框架。由于对虚拟机的实现原理并不清楚，这里就不敢多讲了，希望在学习完 JVM 以后再做分享。</p>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做给自己用的命令行工具</title>
    <link href="/posts/8f7d7e58.html"/>
    <url>/posts/8f7d7e58.html</url>
    
    <content type="html"><![CDATA[<p>最近自己用 Node 写了很多的小工具，然而并不能全局使用。上网找了下答案，发现了 TJ 大神写的 Commander.js 可以很方便的制作命令行工具。于是就照着 API 把之前的 知乎专栏爬虫 给整成 CLI 工具。我把工具命名为 <a href="https://github.com/bubao/nodc.git"><code>nodc</code></a>，意思是<code>node collection</code>，然而这一路并不平静，所以写下此文。</p><span id="more"></span><h3 id="commander-命令行模块"><a href="#commander-命令行模块" class="headerlink" title="commander: 命令行模块"></a><strong><a href="https://github.com/tj/commander.js"><code>commander</code></a>: 命令行模块</strong></h3><p>这个模块是 TJ 大神封装好的模块，能快速开发命令行工具。官网有很多例子，我直接上我用到的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> program = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;commander&#x27;</span>);<br><br>program<br>    .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;crawler [zhihuId]&#x27;</span>)<br>    .<span class="hljs-title function_">alias</span>(<span class="hljs-string">&#x27;cr&#x27;</span>)<br>    .<span class="hljs-title function_">description</span>(<span class="hljs-string">&#x27;🔄 知乎专栏爬虫 ⛎&#x27;</span>)<br>    .<span class="hljs-title function_">option</span>(<span class="hljs-string">&#x27;-o ,--out &lt;path&gt;&#x27;</span>,<span class="hljs-string">&quot;🔙 输出位置&quot;</span>)<br>    .<span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">zhihuId, options</span>)&#123;<br>        <span class="hljs-keyword">var</span> zhihuId = zhihuId || <span class="hljs-string">&quot;leanreact&quot;</span>;<br>        path =  options.<span class="hljs-property">out</span> || process.<span class="hljs-title function_">cwd</span>();<span class="hljs-comment">//当前执行路径</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;🐛   知乎专栏爬取 %s 到 %s 文件夹&#x27;</span>,zhihuId, path);<br>        <span class="hljs-title function_">zhihu</span>(zhihuId,path)<br>    &#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;--help&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;  举个例子：&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;    $ nodc crawler leanreact&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;    $ nodc cr leanreact -o ~/&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>();<br>  &#125;);<br>program<br>    .<span class="hljs-title function_">parse</span>(process.<span class="hljs-property">argv</span>);<br></code></pre></td></tr></table></figure><p>上面是 commander 模块创建类似 git 一样的子命令的代码</p><p><code>command</code>：是创建子命令的方法，可以接收两个参数。接收一个参数时，可以使用 <code>action</code> 方法在后面发起动作。接收两个参数时，第二个参数是命令说明，后边就不能使用<code>action</code>了。<code>[zhihuId]</code>意思是可选参数，因为我后面在<code>action</code>方法里设置了默认知乎专栏 id</p><p><code>alias</code>：子命令别名</p><p><code>description</code>：命令摘要说明</p><p><code>option</code>：子命令属性。我设置了输出路径属性，接收两个参数，第二个参数为命令说明。字符串中<code>-o</code>必须在<code>--out</code>前面，后面<code>&lt;path&gt;</code>是必填参数。如果<code>option</code>不跟在<code>command</code>后面，则作为主命令的属性。</p><p><code>action</code>：动作，顾名思义，就是发起子命令时做什么动作。传一个匿名函数做参数，前面 command 后面括号的内容可以作为参数传入。而 option 的中括号的参数需要用<code>options. 参数</code>来传入</p><p><code>on</code>：这里设置了 help 的说明</p><p><code>.parse(process.argv)</code>：没了这个代码好像不能用，这个放在所有 program 的最后，就像是 JavaScript 程序的<code>return</code>，放在这行代码后面的<code>commander</code> 模块代码都不会执行，就算只是简单打<code>console.log</code>也不会执行。不过我在前面调用了<code>zhihu(zhihuId,path)</code>，<code>zhihu()</code>里面的代码引用并不受它影响。</p><p>关于这个模块就说这么多。更多用法可以去 github 看 README，有中文版的。</p><h3 id="整合-GetZhiHuZhuanLan"><a href="#整合-GetZhiHuZhuanLan" class="headerlink" title="整合 GetZhiHuZhuanLan"></a>整合 <a href="https://github.com/bubao/GetZhiHuZhuanLan">GetZhiHuZhuanLan</a></h3><p>之前写这个爬虫留下了很多问题没处理，这也是我参考 <a href="https://github.com/zhangolve/zhihu-answer-convert-to-md-by-node">zhangolve 的项目</a> 的后遗症。第一个问题是，把整个爬虫分成两部分处理的：爬取下载，线下处理。第二个问题是，代码转换都成单行。由于这段时间都没空，也就搁置了。前些天看到 Node 也能写命令行工具，就拿这个爬虫来试手。翻出来看，完全不能忍啊。于是找各种办法把问题处理了。</p><h4 id="把两个分离模块合在同一个文件里"><a href="#把两个分离模块合在同一个文件里" class="headerlink" title="把两个分离模块合在同一个文件里"></a>把两个分离模块合在同一个文件里</h4><p>其实不写成同一个文件里也没关系的。不过为了开发方便，不用切换文件，我还是硬把两个模块的所有代码都放进去了。放进去，改了下参数名跑了一次，卧槽，线下处理的 for 循环居然跑在爬取下载模块的前面，怪不得之前我参考的项目是把两个文件分开来执行。</p><p>怎么办？怎么办？这问题很让人抓狂啊。</p><p>这时候一定要冷静，两个模块能分开运行，都能完成自己的任务，问题处在哪里？问题在于 JavaScript 的任务队列里：线下处理模块是被 for 包裹的同步运行代码，而爬取下载是一个异步的任务。如果把两个模块放一起，异步任务发起后，执行异步需要时间，而这时候，轮到 for 循环，它要处理下载好的 json 文件，可是异步下载还没完成呢，自然 for 里面的任务就异常了。</p><h4 id="首次使用-eventproxy"><a href="#首次使用-eventproxy" class="headerlink" title="首次使用 eventproxy"></a>首次使用 <a href="https://github.com/JacksonTian/eventproxy">eventproxy</a></h4><p>相同了这个问题，赶紧去恶补 callback ，异步的知识，用了 async，感觉要搞很多代码，转向用朴灵大神的<code>eventproxy</code>。其实这个我完全是第一次玩呀，硬着头皮上吧。</p><p>看了下 <a href="https://github.com/JacksonTian/eventproxy/blob/master/README.md">README</a>，幸好有中文版的，用了<code>all</code>和<code>after</code>两种方法。<code>all</code>是全部事件触发<code>emit</code>，就会执行执行。<code>after</code>是在<code>n</code>次执行完后，才触发，<code>n</code>是<code>after</code>的第二个参数。</p><p>按理说 for 循环用<code>after</code>比较好处理，然而我拿不到 for 的次数，因为被封装在另一个函数中。我试了好多次都不成功。换<code>all</code>吧，<code>all</code>面临一个问题是，怎么样监听什么售后下载完，才发送给<code>all</code>。由于我用的是<code>request</code>模块的<code>pipe</code>方法，后面不能监听呀。<code>eventproxy</code>还没知道怎么用呢，两个方法都不能立马行得通，很打击人的啊。</p><h4 id="认准一条路，脚踏实地的走下去"><a href="#认准一条路，脚踏实地的走下去" class="headerlink" title="认准一条路，脚踏实地的走下去"></a>认准一条路，脚踏实地的走下去</h4><p><code>after</code>试过了很多次都行不通，<code>all</code>又因为<code>request</code>后面直接使用<code>pipe</code>不能监听。果断选择<code>all</code>，至少我知道只要能监听<code>request</code>什么时候执行完，就可以发起<code>all</code>了。而<code>after</code>我根本就没有思路，就算这条路是捷径，我也走不了，还不如脚踏实地的 focus 目标。</p><p>既然<code>request</code>直接使用<code>pipe</code>不能监听，那我不直接使用不就行了。上网找了个 <a href="https://segmentfault.com/q/1010000009323745/a-1020000009454031">方法</a>，用<code>fs.writeStream</code>的<code>on</code>监听。把<code>eventproxy</code>的<code>emit</code>放在<code>on</code>callback 里面，用一个变量来累加计算，判断<code>for</code>写入次数来执行<code>emit</code>。</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>因为我本来就没有 npmjs 的账号，所以不能发布在 npmjs 上，那怎么样全局使用呢？方法还是有的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 项目的根目录下</span><br>$ <span class="hljs-built_in">sudo</span> npm i -g<br></code></pre></td></tr></table></figure><p>搞定。</p><h3 id="还有很多事没做呢"><a href="#还有很多事没做呢" class="headerlink" title="还有很多事没做呢"></a>还有很多事没做呢</h3><p>这是只是我<code>nodc</code>的第一个小功能，我还想集成更多</p><p><strong><code>nodc</code> 功能列表</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 知乎专栏爬虫</li><li><input disabled="" type="checkbox"> 结巴分词全文排序关键词</li><li><input disabled="" type="checkbox"> 天气预报</li><li><input disabled="" type="checkbox"> 中英翻译</li><li><input disabled="" type="checkbox"> …</li></ul><p>而知乎专栏爬虫还有些问题需要解决：</p><ul><li><input disabled="" type="checkbox"> 文件名上加入文章发布时间，方便排序 (<code>20170717@learnreact.md</code>)</li><li><input disabled="" type="checkbox"> 代码还很不美观，而且部分代码需要重写，虽然可以运行（用 <code>request</code> 代替 <code>https</code>)</li><li><input disabled="" type="checkbox"> 增加 <a href="https://github.com/visionmedia/node-progress">进度条</a>，让爬虫进度更直观。</li><li><input disabled="" type="checkbox"> 增加多 id 下载</li><li><input disabled="" type="checkbox"> 输出带 <a href="https://github.com/Marak/colors.js">颜色</a> 的信息</li></ul><p>你们可能会说，别人其实已经造好了很多轮子，比如翻译就有 <a href="https://github.com/Flowerowl/ici">ici</a>，为什么我还要自己弄？因为别人的东西，如果出了 bug 🐛，我自己修改会很费力，或者我只能坐以待毙。而我想通过一个个小项目开源给大家一起来完善，自己享用自己的劳动成果，也是一件乐事。</p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
      <tag>node.js</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中文分词之类的东西</title>
    <link href="/posts/5058e8e9.html"/>
    <url>/posts/5058e8e9.html</url>
    
    <content type="html"><![CDATA[<p>受朋友之托，写一个小脚本，断断续续做了两天，写一下两天的收获。</p><span id="more"></span><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>有个朋友说专业文档很枯燥难懂，需要一个能把全文的关键词找出来并排序的东西，找不到现成的，问我能不能做一个。我前些天也听车神说有关分词的东西，用这个机会认识一下中文分词也不错。本来还想弄下 <code>PDF 2 TXT</code>的，不过没找到合适的工具，先弄这个吧。</p><p>要实现把全文的关键词找出来并排序，就需要识别文中的词而不是字，有了词才能进行排序。中文和其他语言不同，没有明确的词分界，不像英语有空格作为词边界。分词算法什么的我实在弄不出来了，所以用别人的吧。上百度和 Github 找工具，最后确定用结巴分词，因为结巴分词有 JavaScript 版，分词还是很 OK 的。</p><h2 id="开干"><a href="#开干" class="headerlink" title="开干"></a>开干</h2><p><strong>分词统计并排序</strong>：</p><p>之前是用 JavaScript 版的结巴分词写的，不过在分词统计的时候没想起来 JavaScript 有什么能排序的模块，就换 Python 版的结巴分词写了。</p><p>因为那个朋友的资料是繁体的，为了兼容繁体，我引入了繁体字典，不过加载好像有问题，我直接把繁体字典当用户字典加载了。</p><p>说这么多干嘛，上源码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># index.py</span><br><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">/*@version: 0.1</span><br><span class="hljs-string"> * @author: Bubao</span><br><span class="hljs-string"> * @contact: asd565586630@gmail.com</span><br><span class="hljs-string"> * @time: 2017-07-13 00:22:00</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> jieba.posseg <span class="hljs-keyword">as</span> pseg<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><span class="hljs-comment"># 用户字典 可自行添加专业名词 防止被 jieba 分错了</span><br>jieba.load_userdict(<span class="hljs-string">&#x27;dict/user.dict&#x27;</span>)<br><span class="hljs-comment"># jieba.load_userdict(&#x27;dict/dict.txt.big&#x27;)</span><br><span class="hljs-comment"># 简体&amp;繁体字典 这个不用修改，所以我让他当用户字典加载了</span><br><span class="hljs-comment">#jieba.set_dictionary(&#x27;dict/dict.txt.big&#x27;)</span><br><span class="hljs-comment"># &#x27;./源文件。txt&#x27;为想打开的文件</span><br>file_object = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./源文件。txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment">## 定义一个 list</span><br>L =<span class="hljs-built_in">list</span>()<br><span class="hljs-comment">## 获取带词性的词对象（没学过 py 不知道得到的是什么）</span><br>words = pseg.cut(file_object.read())<br>i=<span class="hljs-number">0</span><br><span class="hljs-comment">## 遍历这个词对象</span><br><span class="hljs-keyword">for</span> word, flag <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-comment">## 如果词性 (flag) 或者词 (word) 属于这个范围就直接跳过 自己填写</span><br>    <span class="hljs-keyword">if</span> flag==<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-keyword">or</span> flag==<span class="hljs-string">&quot;p&quot;</span>  <span class="hljs-keyword">or</span> flag==<span class="hljs-string">&quot;uj&quot;</span> <span class="hljs-keyword">or</span> word==<span class="hljs-string">&quot;年&quot;</span><span class="hljs-keyword">or</span> word==<span class="hljs-string">&quot;月&quot;</span><span class="hljs-keyword">or</span> word==<span class="hljs-string">&quot;日&quot;</span> :<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-comment">## 打印计数 为了区分程序是不是挂了</span><br>    i=i+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-comment">##把词追加到 list 中</span><br>    L.append(word)<br><span class="hljs-comment">## 计算出现次数</span><br>getObj = Counter(L)<br><span class="hljs-comment">## 写到。/getObj.json 文件里</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./getObj.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-built_in">str</span>(getObj).replace(<span class="hljs-string">&quot;Counter(&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>))<br>f.close()<br>file_object.close()<br><span class="hljs-comment">## end</span><br></code></pre></td></tr></table></figure><p><strong>查询关键词频</strong>：</p><p>弄完分词，朋友又说能不能加一个关键词查找，可以到想要的词出现的频率。我毕竟 Python 是边学边写的，还是用 node 写这个功能把。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* Search.js*/</span><br><span class="hljs-comment">/*@version: 0.1</span><br><span class="hljs-comment"> * @author: Bubao</span><br><span class="hljs-comment"> * @contact: asd565586630@gmail.com</span><br><span class="hljs-comment"> * @time: 2017-07-13 00:22:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [keyWord description]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">Array</span>&#125;</span><br><span class="hljs-comment"> * 把想搜索的词用 “&quot;关键词&quot;,”  这种方式写在 “[  ]”  中间，</span><br><span class="hljs-comment"> * 记得关键词引号后面有英文逗号</span><br><span class="hljs-comment"> * 引号也是引文的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> keyWord = [<br>    <span class="hljs-string">&quot;本行&quot;</span>,<br>    <span class="hljs-string">&quot;人民币&quot;</span>,<br>];<br><br><span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./getObj.json&#x27;</span>));<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Arr</span> = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; keyWord.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> get = keyWord[i] + <span class="hljs-string">&#x27;:&#x27;</span> + json[keyWord[i]]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(get)<br>    <span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">push</span>(get)<br>&#125;<br><span class="hljs-comment">//你要的关键词在这里</span><br>fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&#x27;keyWord.txt&#x27;</span>, <span class="hljs-title class_">Arr</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;\n&#x27;</span>), <span class="hljs-string">&#x27;utf8&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>自动化脚本</strong>：</p><p>因为用了两种语言，运行要分段，我这么懒的人，这么会等第一段运行完再运行第二段呢，一言不合写<code>sh</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># main.sh</span><br><span class="hljs-comment">#/*@version: 0.1</span><br><span class="hljs-comment"># * @author: Bubao</span><br><span class="hljs-comment"># * @contact: asd565586630@gmail.com</span><br><span class="hljs-comment"># * @time: 2017-07-13 00:22:00</span><br><span class="hljs-comment"># */</span><br>python index.py<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------关键词-------------------&quot;</span><br>node Search.js<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------------------------------------</span><br><span class="hljs-string">排序在 getObj.json 文件</span><br><span class="hljs-string">关键词搜索在 keyWord.txt 文件&quot;</span><br></code></pre></td></tr></table></figure><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><ol><li>把要转换的文件放在在当前文件夹，并改名为<code>源文件。txt</code>，运行<code>sudo easy_install jieba</code></li><li>终端下运行 <code>python index.py</code>，等待完成，等待完成期间可以在<code>Search.js</code>文件里把想要搜索的关键字填在数组里，保存好。</li><li>完成第二步，接着执行<code>node  Search.js</code>，等待完成。</li><li>关键字搜索结果在<code>keyWord.txt</code>文件里</li><li>或者写个脚本自动化，<code>sh main.sh</code></li></ol><h2 id="额外收获"><a href="#额外收获" class="headerlink" title="额外收获"></a>额外收获</h2><p>毕竟是自己摸索写的东西，收获还是不错的。为了以后想用的时候能找得到，便也记录下来。</p><h3 id="分词工具"><a href="#分词工具" class="headerlink" title="分词工具"></a>分词工具</h3><p><strong>jieba</strong>：这个工具挺好用的，这个是 python 版的，还有很多种版本</p><p><strong>codecs</strong>：一个 python 库，用来转码的</p><p><strong>Counter</strong>：一个 python 库工具，用来做统计的</p><h3 id="一些杂脚本"><a href="#一些杂脚本" class="headerlink" title="一些杂脚本"></a>一些杂脚本</h3><p><strong>gbk2utf8</strong>：</p><p>网上下载些文本文件，很多都是在 win 上写的，win 上一般默认保存为<code>gbk</code>。这样在 Linux 上打开都是乱码，所以上网找了段代码自己改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">/*@version: 0.1</span><br><span class="hljs-string"> * @author: Bubao</span><br><span class="hljs-string"> * @contact: asd565586630@gmail.com</span><br><span class="hljs-string"> * @time: 2017-07-13 00:22:00</span><br><span class="hljs-string"> */</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> codecs<br><span class="hljs-comment"># gbk 转 utf8 脚本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReadFile</span>(<span class="hljs-params">filePath,encoding=<span class="hljs-string">&quot;gb18030&quot;</span></span>):<br>    <span class="hljs-keyword">with</span> codecs.<span class="hljs-built_in">open</span>(filePath,<span class="hljs-string">&quot;r&quot;</span>,encoding) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WriteFile</span>(<span class="hljs-params">filePath,u,encoding=<span class="hljs-string">&quot;utf-8&quot;</span></span>):<br>    <span class="hljs-keyword">with</span> codecs.<span class="hljs-built_in">open</span>(filePath,<span class="hljs-string">&quot;w&quot;</span>,encoding) <span class="hljs-keyword">as</span> f:<br>        f.write(u)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">UTF8_2_GBK</span>(<span class="hljs-params">src,dst</span>):<br>    content = ReadFile(src,encoding=<span class="hljs-string">&quot;gb18030&quot;</span>)<br>    WriteFile(dst,content,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br>UTF8_2_GBK(<span class="hljs-string">&quot;./in.txt&quot;</span>,<span class="hljs-string">&quot;./out.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/yanyiwu/nodejieba"><strong>nodejiba</strong></a></p><p>之前是用 node 版的结巴写的分词，后来因为 py 比较容易写统计，就换 py 写分词了。留下这段代码以后需要再看看咯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*@version: 0.1</span><br><span class="hljs-comment"> * @author: Bubao</span><br><span class="hljs-comment"> * @contact: asd565586630@gmail.com</span><br><span class="hljs-comment"> * @time: 2017-07-13 00:22:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> nodejieba = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodejieba&quot;</span>)<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>)<br><span class="hljs-keyword">var</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;./4.txt&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)<br>nodejieba.<span class="hljs-title function_">load</span>(&#123;<br>    <span class="hljs-attr">userDict</span>: <span class="hljs-string">&#x27;./dict.utf8&#x27;</span>,<br>&#125;)<br><span class="hljs-keyword">var</span> result = nodejieba.<span class="hljs-title function_">extract</span>(data, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">var</span> a = &#123;<br>    <span class="hljs-string">&quot;fen&quot;</span>: []<br>&#125;<br><span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; result.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (result[i].<span class="hljs-property">tag</span> !== <span class="hljs-string">&quot;uj&quot;</span> &amp;&amp; result[i].<span class="hljs-property">tag</span> !== <span class="hljs-string">&quot;zg&quot;</span> &amp;&amp; result[i].<span class="hljs-property">tag</span> !== <span class="hljs-string">&quot;x&quot;</span>) &#123;<br>        a.<span class="hljs-property">fen</span>[j] = &#123;<br>            <span class="hljs-string">&quot;word&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;tag&quot;</span>: <span class="hljs-string">&quot;2&quot;</span><br>        &#125;;<br>        a.<span class="hljs-property">fen</span>[j].<span class="hljs-property">word</span> = result[i].<span class="hljs-property">word</span>;<br>        a.<span class="hljs-property">fen</span>[j].<span class="hljs-property">tag</span> = result[i].<span class="hljs-property">tag</span>;<br>        fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&quot;./5.txt&quot;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a), <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        j++<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br></code></pre></td></tr></table></figure><p><strong><a href="https://github.com/qiuwei/sogou_hotwords_yong">scel2txt</a></strong></p><p>因为弄分词的原因，想找一下专业名词，就跑到搜狗输入法的词库下载词包，发现这个格式我解码不了，上 github 找了别人的脚本（其实我并不知道这段代码是谁写的）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python  </span><br><span class="hljs-comment"># -*- coding: utf-8 -*-  </span><br>  <br><span class="hljs-keyword">import</span> struct  <br><span class="hljs-keyword">import</span> sys  <br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> pdb  <br><span class="hljs-comment">#搜狗的 scel 词库就是保存的文本的 unicode 编码，每两个字节一个字符（中文汉字或者英文字母）  </span><br><span class="hljs-comment">#找出其每部分的偏移位置即可  </span><br><span class="hljs-comment">#主要两部分  </span><br><span class="hljs-comment">#1. 全局拼音表，貌似是所有的拼音组合，字典序  </span><br><span class="hljs-comment">#       格式为 (index,len,pinyin) 的列表  </span><br><span class="hljs-comment">#       index: 两个字节的整数 代表这个拼音的索引  </span><br><span class="hljs-comment">#       len: 两个字节的整数 拼音的字节长度  </span><br><span class="hljs-comment">#       pinyin: 当前的拼音，每个字符两个字节，总长 len  </span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#2. 汉语词组表  </span><br><span class="hljs-comment">#       格式为 (same,py_table_len,py_table,&#123;word_len,word,ext_len,ext&#125;) 的一个列表  </span><br><span class="hljs-comment">#       same: 两个字节 整数 同音词数量  </span><br><span class="hljs-comment">#       py_table_len:  两个字节 整数  </span><br><span class="hljs-comment">#       py_table: 整数列表，每个整数两个字节，每个整数代表一个拼音的索引  </span><br><span class="hljs-comment">#  </span><br><span class="hljs-comment">#       word_len: 两个字节 整数 代表中文词组字节数长度  </span><br><span class="hljs-comment">#       word: 中文词组，每个中文汉字两个字节，总长度 word_len  </span><br><span class="hljs-comment">#       ext_len: 两个字节 整数 代表扩展信息的长度，好像都是 10  </span><br><span class="hljs-comment">#       ext: 扩展信息 前两个字节是一个整数（不知道是不是词频） 后八个字节全是 0  </span><br><span class="hljs-comment">#  </span><br><span class="hljs-comment">#      &#123;word_len,word,ext_len,ext&#125; 一共重复 same 次 同音词 相同拼音表  </span><br>  <br><span class="hljs-comment">#拼音表偏移，  </span><br>startPy = <span class="hljs-number">0x1540</span>;  <br>  <br><span class="hljs-comment">#汉语词组表偏移  </span><br>startChinese = <span class="hljs-number">0x2628</span>;  <br>  <br><span class="hljs-comment">#全局拼音表  </span><br>  <br>GPy_Table =&#123;&#125;  <br>  <br><span class="hljs-comment">#解析结果  </span><br><span class="hljs-comment">#元组（词频，拼音，中文词组）的列表  </span><br>GTable = []  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">byte2str</span>(<span class="hljs-params">data</span>):  <br>    <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;将原始字节码转为字符串&#x27;&#x27;&#x27;</span>  <br>    i = <span class="hljs-number">0</span>;  <br>    length = <span class="hljs-built_in">len</span>(data)  <br>    ret = <span class="hljs-string">u&#x27;&#x27;</span>  <br>    <span class="hljs-keyword">while</span> i &lt; length:  <br>        x = data[i] + data[i+<span class="hljs-number">1</span>]  <br>        t = unichr(struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,x)[<span class="hljs-number">0</span>])  <br>        <span class="hljs-keyword">if</span> t == <span class="hljs-string">u&#x27;\r&#x27;</span>:  <br>            ret += <span class="hljs-string">u&#x27;\n&#x27;</span>  <br>        <span class="hljs-keyword">elif</span> t != <span class="hljs-string">u&#x27; &#x27;</span>:  <br>            ret += t  <br>        i += <span class="hljs-number">2</span>  <br>    <span class="hljs-keyword">return</span> ret  <br><span class="hljs-comment">#获取拼音表  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getPyTable</span>(<span class="hljs-params">data</span>):  <br>  <br>    <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] != <span class="hljs-string">&quot;\x9D\x01\x00\x00&quot;</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>  <br>    data = data[<span class="hljs-number">4</span>:]  <br>    pos = <span class="hljs-number">0</span>  <br>    length = <span class="hljs-built_in">len</span>(data)  <br>    <span class="hljs-keyword">while</span> pos &lt; length:  <br>        index = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        <span class="hljs-comment">#print index,  </span><br>        pos += <span class="hljs-number">2</span>  <br>        l = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        <span class="hljs-comment">#print l,  </span><br>        pos += <span class="hljs-number">2</span>  <br>        py = byte2str(data[pos:pos+l])  <br>        <span class="hljs-comment">#print py  </span><br>        GPy_Table[index]=py  <br>        pos += l  <br>  <br><span class="hljs-comment">#获取一个词组的拼音  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getWordPy</span>(<span class="hljs-params">data</span>):  <br>    pos = <span class="hljs-number">0</span>  <br>    length = <span class="hljs-built_in">len</span>(data)  <br>    ret = <span class="hljs-string">u&#x27;&#x27;</span>  <br>    <span class="hljs-keyword">while</span> pos &lt; length:  <br><br>        index = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        ret += GPy_Table[index]  <br>        pos += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> ret  <br>  <br><span class="hljs-comment">#获取一个词组  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getWord</span>(<span class="hljs-params">data</span>):  <br>    pos = <span class="hljs-number">0</span>  <br>    length = <span class="hljs-built_in">len</span>(data)  <br>    ret = <span class="hljs-string">u&#x27;&#x27;</span>  <br>    <span class="hljs-keyword">while</span> pos &lt; length:  <br><br>        index = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        ret += GPy_Table[index]  <br>        pos += <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> ret  <br>  <br><span class="hljs-comment">#读取中文表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getChinese</span>(<span class="hljs-params">data</span>):  <br>    <span class="hljs-comment">#import pdb  </span><br>    <span class="hljs-comment">#pdb.set_trace()  </span><br><br>    pos = <span class="hljs-number">0</span>  <br>    length = <span class="hljs-built_in">len</span>(data)  <br>    <span class="hljs-keyword">while</span> pos &lt; length:  <br>        <span class="hljs-comment">#同音词数量  </span><br>        same = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        <span class="hljs-comment">#print &#x27;[same]:&#x27;,same,  </span><br><br>        <span class="hljs-comment">#拼音索引表长度  </span><br>        pos += <span class="hljs-number">2</span>  <br>        py_table_len = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>        <span class="hljs-comment">#拼音索引表  </span><br>        pos += <span class="hljs-number">2</span>  <br>        py = getWordPy(data[pos: pos+py_table_len])  <br>  <br>        <span class="hljs-comment">#中文词组  </span><br>        pos += py_table_len  <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(same):  <br>            <span class="hljs-comment">#中文词组长度  </span><br>            c_len = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>            <span class="hljs-comment">#中文词组  </span><br>            pos += <span class="hljs-number">2</span><br>            word = byte2str(data[pos: pos + c_len])  <br>            <span class="hljs-comment">#扩展数据长度  </span><br>            pos += c_len<br>            ext_len = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>            <span class="hljs-comment">#词频  </span><br>            pos += <span class="hljs-number">2</span>  <br>            count  = struct.unpack(<span class="hljs-string">&#x27;H&#x27;</span>,data[pos]+data[pos+<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]  <br>  <br>            <span class="hljs-comment">#保存  </span><br>            GTable.append((count,py,word))  <br><br>            <span class="hljs-comment">#到下个词的偏移位置  </span><br>            pos +=  ext_len  <br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">file_name</span>):  <br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">60</span>  <br>    f = <span class="hljs-built_in">open</span>(file_name,<span class="hljs-string">&#x27;rb&#x27;</span>)  <br>    data = f.read()  <br>    f.close()<br><br>    <span class="hljs-keyword">if</span> data[<span class="hljs-number">0</span>:<span class="hljs-number">12</span>] !=<span class="hljs-string">&quot;\x40\x15\x00\x00\x44\x43\x53\x01\x01\x00\x00\x00&quot;</span>:  <br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;确认你选择的是搜狗 (.scel) 词库？&quot;</span>  <br>        sys.exit(<span class="hljs-number">0</span>)  <br>    <span class="hljs-comment">#pdb.set_trace()  </span><br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;词库名：&quot;</span> ,byte2str(data[<span class="hljs-number">0x130</span>:<span class="hljs-number">0x338</span>])<span class="hljs-comment">#.encode(&#x27;GB18030&#x27;)  </span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;词库类型：&quot;</span> ,byte2str(data[<span class="hljs-number">0x338</span>:<span class="hljs-number">0x540</span>])<span class="hljs-comment">#.encode(&#x27;GB18030&#x27;)  </span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;描述信息：&quot;</span> ,byte2str(data[<span class="hljs-number">0x540</span>:<span class="hljs-number">0xd40</span>])<span class="hljs-comment">#.encode(&#x27;GB18030&#x27;)  </span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;词库示例：&quot;</span>,byte2str(data[<span class="hljs-number">0xd40</span>:startPy])<span class="hljs-comment">#.encode(&#x27;GB18030&#x27;)  </span><br><br>    getPyTable(data[startPy:startChinese])  <br>    getChinese(data[startChinese:])  <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <br>  <br>    <span class="hljs-comment">#将要转换的词库添加在这里就可以了  </span><br>    o = [<span class="hljs-string">&#x27;1.scel&#x27;</span>,]<br>    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> o:  <br>        deal(f)  <br><br>    <span class="hljs-comment">#保存结果</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sougou.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)  <br>    <span class="hljs-keyword">for</span> count,py,word <span class="hljs-keyword">in</span> GTable:  <br>        <span class="hljs-comment">#GTable 保存着结果，是一个列表，每个元素是一个元组（词频，拼音，中文词组），有需要的话可以保存成自己需要个格式  </span><br>        <span class="hljs-comment">#我没排序，所以结果是按照上面输入文件的顺序  </span><br>        f.write( unicode(<span class="hljs-string">&#x27;&#123;%(count)s&#125;&#x27;</span> %&#123;<span class="hljs-string">&#x27;count&#x27;</span>:count&#125;+py+<span class="hljs-string">&#x27; &#x27;</span>+ word).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>) )<span class="hljs-comment">#最终保存文件的编码 GB18030，可以自给改  </span><br>        f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)  <br>    f.close()<br></code></pre></td></tr></table></figure><p><strong><a href="https://github.com/tisyang/emoji-scel2txt">emoji-scel2txt</a></strong></p><p>这是 Ruby 写的，颜文字导出</p><p><strong><a href="https://github.com/archerhu/scel2mmseg">scel2mmseg</a></strong></p><p>这是 python 写的，到处成 mmseg 格式，据说这个可以用来做中文分词，以后再看看吧。</p><p><strong><a href="https://github.com/E-Neo/scel2pyim">scel2pyim</a></strong><br>一个将搜狗输入法 scel 细胞词库转换为 emacs chinese-pyim 文本词库的小工具。因为我最近在学 emacs，就收藏了。</p><p><strong><a href="https://github.com/gamelife1314/scel2txt">scel2txt</a></strong></p><p>还是个 scel2txt 小工具。</p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>nlp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Emacs 中英对齐</title>
    <link href="/posts/913e3792.html"/>
    <url>/posts/913e3792.html</url>
    
    <content type="html"><![CDATA[<p><a href="http://thinkcat.me/2017/02/10/emacs%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E9%BD%90/">emacs 配置表格中英文对齐</a></p><span id="more"></span><p>我一直很想找个好用 GTD 工具，能替换 Emacs 的 Org-mode。我从昨天才开始正式使用 Emacs ，配置了 子龙山人 的 <a href="http://book.emacs-china.org/">Spacemacs</a>，感觉挺好的。不过 Org-mode 有个很大的问题是，中文会导致 Org-mode 的表格不对齐，这让很 geek 的 Emacs 看起来超级不舒服。今天在网上找到了一个教程：<a href="http://thinkcat.me/2017/02/10/emacs%E9%85%8D%E7%BD%AE%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E9%BD%90/">emacs 配置表格中英文对齐</a>，测试成功。</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/tumashu/chinese-fonts-setup">chinese-fonts-setup</a></p><h3 id="Spacemacs-配置"><a href="#Spacemacs-配置" class="headerlink" title="Spacemacs 配置"></a>Spacemacs 配置</h3><p>首先是安装该插件，在<code>spacemacs</code>的配置文件 <code>.spacemacs</code> 中的 <code>dotspacemacs-additional-packages</code>项目里面添加：<code>chinese-fonts-setup</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs el">(dotspacemacs-additional-packages(chinese-fonts-setup))<br></code></pre></td></tr></table></figure><p>然后在 dotspacemacs&#x2F;user-config () 中添加： (use-package chinese-fonts-setup)<br>重新启动 emacs， 就会自动安装该插件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs el">dotspacemacs/user-config () <br>(use-package chinese-fonts-setup)<br></code></pre></td></tr></table></figure><h3 id="chinese-fonts-setup-的使用"><a href="#chinese-fonts-setup-的使用" class="headerlink" title="chinese-fonts-setup 的使用"></a>chinese-fonts-setup 的使用</h3><ol><li>使用<code>M-x</code> 输入 chinese-fonts-setup ，进入插件。</li><li>点击表格<code>对齐</code>，如果不对齐，可以到<code>中文</code>和<code>英文</code>两个按钮下设置中文英文字体。</li><li>点击字体配置完成，在<code>其他</code>按钮下复制生成代码，粘贴到 <code>～/.spacemacs</code>最下面。</li><li>重启 Emacs</li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Emacs</tag>
      
      <tag>Org mode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack2 视频学习笔记</title>
    <link href="/posts/cc2211e3.html"/>
    <url>/posts/cc2211e3.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://oay5ngsv9.bkt.clouddn.com/blogTitle/bubao-webpack.png" alt="webpack"></p><span id="more"></span><p>好几天没写博客了，今天在想博客怎么处理，突然发现大神 <a href="http://blog.parryqiu.com/">博客</a> 有很多前端视频教程，就顺便把之前学的 Webpack 补一补，之前的 <a href="https://bubao.github.io/2017/07/01/%E7%BA%AFReact&%E7%BA%AFRedux/">《纯 React&amp;纯 Redux》</a> 的笔记中的 <a href="https://bubao.github.io/2017/07/01/%E7%BA%AFReact&%E7%BA%AFRedux/#Webpack">Webpack</a> 和这个 Webpack 2 互为补充，我就不做分离了。因为是给自己看的，所以这是个超级不负责任的笔记。</p><h3 id="001-Webpack-简介"><a href="#001-Webpack-简介" class="headerlink" title="001 - Webpack 简介"></a><a href="https://www.bilibili.com/video/av11128844/#page=1">001 - Webpack 简介</a></h3><p><a href="https://webpack.github.io/">Webpack</a> 前端资源模块化管理和打包工具。通过加载器 (loader) 的转换，任何形式的资源都可以视为模块。</p><p>在 <a href="https://book.douban.com/subject/26928402/">《React 与 Redux 开发实例精解》</a> Webpack 做这些事。</p><ul><li>编译、加载使用 ES2015 和 JSX 语法的模块</li><li>实现开发服务器和热替换</li><li>加载图片文件</li><li>加载字体文件</li><li>加载样式文件</li><li>加载 Json 文件</li><li>使用同构工具实现同构渲染</li><li>压缩代码</li><li>哈希命名</li></ul><h3 id="002-NodeJS-安装与配置"><a href="#002-NodeJS-安装与配置" class="headerlink" title="002 - NodeJS 安装与配置"></a><a href="https://www.bilibili.com/video/av11128844/#page=2">002 - NodeJS 安装与配置</a></h3><p>这个不说了，看视频</p><h3 id="003-Webpack-项目初始化"><a href="#003-Webpack-项目初始化" class="headerlink" title="003 - Webpack 项目初始化"></a><a href="https://www.bilibili.com/video/av11128844/#page=3">003 - Webpack 项目初始化</a></h3><p><strong>初始工作</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装 node 和 npm</span><br><span class="hljs-comment"># 创建文件夹，并初始化项目</span><br>$ <span class="hljs-built_in">mkdir</span> 003<br>$ npm init -y<br></code></pre></td></tr></table></figure><p><strong>安装 webpack 模块</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install webpack --save-dev <span class="hljs-comment">#这是局部的</span><br>$ npm install webpack -g <span class="hljs-comment">#这是全局的</span><br></code></pre></td></tr></table></figure><p><strong>创建文件</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">mkdir</span> app<br>$ <span class="hljs-built_in">cd</span> app<br>$ <span class="hljs-built_in">touch</span> index.js<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app/index.js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>打包</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ webpack app/index.js build/bundle.js<br></code></pre></td></tr></table></figure><p>经过这一步，<code>build</code>文件夹下面就会出现一个<code>bundle.js</code>文件</p><h3 id="004-Webpack-初体验"><a href="#004-Webpack-初体验" class="headerlink" title="004 - Webpack 初体验"></a><a href="https://www.bilibili.com/video/av11128844/#page=4">004 - Webpack 初体验</a></h3><p>下面，我们来使用一个插件，来体验一下用 webpack 做网页。</p><p><strong>准备</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install html-webpack-plugin --save-dev<br>$ <span class="hljs-built_in">touch</span> webpack.config.js<br></code></pre></td></tr></table></figure><p><strong>编写代码</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app/index.js</span><br><span class="hljs-keyword">import</span> component <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./component.js&#x27;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">component</span>())<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app/component.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-title function_">default</span> (text = <span class="hljs-string">&#x27;hello world&#x27;</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    element.<span class="hljs-property">innerHTML</span> = text;<br>    <span class="hljs-keyword">return</span> element<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PATHS</span> = &#123;<br>    <span class="hljs-attr">app</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;app&#x27;</span>),<br>    <span class="hljs-attr">build</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;build&#x27;</span>)<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: &#123;<br>        <span class="hljs-attr">app</span>: <span class="hljs-variable constant_">PATHS</span>.<span class="hljs-property">app</span>,<br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-variable constant_">PATHS</span>.<span class="hljs-property">build</span>,<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].js&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Webpack demo&#x27;</span><br>        &#125;)<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ webpack<br></code></pre></td></tr></table></figure><p><strong>结果</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">build<br>├── app.js<br>└── index.html#这是我用插件帮忙生成的<br></code></pre></td></tr></table></figure><h3 id="005-Webpack-编译输出日志"><a href="#005-Webpack-编译输出日志" class="headerlink" title="005 - Webpack 编译输出日志"></a><a href="https://www.bilibili.com/video/av11128844/#page=5">005 - Webpack 编译输出日志</a></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  004 webpack<br>Hash: cc2d357e75c09b6ce858<br>Version: webpack 3.0.0# 版本<br>Time: 884ms <span class="hljs-comment"># 编译用时</span><br><span class="hljs-comment">#    输出       大小</span><br>     Asset       Size  Chunks             Chunk Names<br>    app.js    3.06 kB       0  [emitted]  app<br>index.html  180 bytes          [emitted]  <br><span class="hljs-comment">## 用了那些文件</span><br>   [0] ./app/index.js 78 bytes &#123;0&#125; [built]<br>   [1] ./app/component.js 135 bytes &#123;0&#125; [built]<br><span class="hljs-comment">## 用了什么插件</span><br>Child html-webpack-plugin <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;index.html&quot;</span>:<br>       [2] (webpack)/buildin/global.js 509 bytes &#123;0&#125; [built]<br>       [3] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]<br>        + 2 hidden modules<br></code></pre></td></tr></table></figure><h3 id="006-使用快捷方式进行编译"><a href="#006-使用快捷方式进行编译" class="headerlink" title="006 - 使用快捷方式进行编译"></a><a href="https://www.bilibili.com/video/av11128844/#page=6">006 - 使用快捷方式进行编译</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//package.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;004&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack --env production&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.29.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>运行</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm run build<br></code></pre></td></tr></table></figure><p><strong>查看<code>scripts</code>命令</strong></p><p>如果想看 <code>package.json</code> 中的脚本有哪些，再也不用手动打开 <code>package.json</code> 文件了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm run<br>Lifecycle scripts included <span class="hljs-keyword">in</span> 004:#项目名 004<br>  <span class="hljs-built_in">test</span> <span class="hljs-comment"># 脚本名 test</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Error: no test specified&quot;</span> &amp;&amp; <span class="hljs-built_in">exit</span> 1<br><br>available via `npm run-script`:<br>  build <span class="hljs-comment">#脚本名 build</span><br>    webpack --<span class="hljs-built_in">env</span> production<br></code></pre></td></tr></table></figure><h3 id="007-配置-WDS-进行浏览器自动刷新"><a href="#007-配置-WDS-进行浏览器自动刷新" class="headerlink" title="007 - 配置 WDS 进行浏览器自动刷新"></a><a href="https://www.bilibili.com/video/av11128844/#page=7">007 - 配置 WDS 进行浏览器自动刷新</a></h3><p><strong>安装 <code>webpack-dev-server</code></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm i webpack-dev-server --save-dev<br></code></pre></td></tr></table></figure><p><strong>配置 script</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  ...<br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;webpack-dev-server --env development&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>运行</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm start<br><span class="hljs-comment">#实时监听文件变化，全局刷新</span><br></code></pre></td></tr></table></figure><h3 id="008-WDS-端口号等配置相关"><a href="#008-WDS-端口号等配置相关" class="headerlink" title="008 - WDS 端口号等配置相关"></a><a href="https://www.bilibili.com/video/av11128844/#page=8">008 - WDS 端口号等配置相关</a></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//webpack.config.js</span><br>module.exports =<span class="hljs-punctuation">&#123;</span><br>  devServer<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    host<span class="hljs-punctuation">:</span> process.env.HOST<span class="hljs-punctuation">,</span><br>    port<span class="hljs-punctuation">:</span> process.env.PORT<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="009-配置-ESLint-实现代码规范自动测试-（上）"><a href="#009-配置-ESLint-实现代码规范自动测试-（上）" class="headerlink" title="009 - 配置 ESLint 实现代码规范自动测试 （上）"></a><a href="https://www.bilibili.com/video/av11128844/#page=9">009 - 配置 ESLint 实现代码规范自动测试 （上）</a></h3><p>配置一个 <a href="http://eslint.org/">ESLint</a> 来虐自己吧 O(∩_∩)O</p><p><strong>安装</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i eslint --save-dev<br></code></pre></td></tr></table></figure><p><strong>配置</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  ....<br>  <span class="hljs-attr">&quot;lintjs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint app/ webpack.*.js --cache&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .eslintrc.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">commonjs</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">es6</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">extends</span>: <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;comma-dangle&#x27;</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;always-multiline&#x27;</span>],<br>    <span class="hljs-attr">indent</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-number">2</span>],<br>    <span class="hljs-string">&#x27;linebreak-style&#x27;</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;unix&#x27;</span>],<br>    <span class="hljs-attr">quotes</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;single&#x27;</span>],<span class="hljs-comment">//引号</span><br>    <span class="hljs-attr">semi</span>: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;always&#x27;</span>],<span class="hljs-comment">//分号</span><br>    <span class="hljs-string">&#x27;no-unused-vars&#x27;</span>: [<span class="hljs-string">&#x27;warn&#x27;</span>],<span class="hljs-comment">//不使用的变量警报</span><br>    <span class="hljs-string">&#x27;no-console&#x27;</span>: <span class="hljs-number">0</span>,<span class="hljs-comment">//不能用 console 打印</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm run eslintjs<br></code></pre></td></tr></table></figure><p><strong>自动修复 error</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm run eslintjs --fix<br></code></pre></td></tr></table></figure><h3 id="010-配置-ESLint-实现代码规范自动测试-（下）"><a href="#010-配置-ESLint-实现代码规范自动测试-（下）" class="headerlink" title="010 - 配置 ESLint 实现代码规范自动测试 （下）"></a><a href="https://www.bilibili.com/video/av11128844/#page=10">010 - 配置 ESLint 实现代码规范自动测试 （下）</a></h3><p>上一节好麻烦，现在我们来一边打包一边检测</p><p><strong>安装加载器</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i eslint-loader --save-dev<br></code></pre></td></tr></table></figure><p><strong>配置加载器</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-attr">module</span>: &#123;<br>  <span class="hljs-attr">rules</span>: [&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>    <span class="hljs-attr">enforce</span>: <span class="hljs-string">&#x27;pre&#x27;</span>,<br><br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;eslint-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">emitWarning</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm start<br></code></pre></td></tr></table></figure><p><strong>浏览器显示 ESLint 错误</strong>:</p><p>为了不用切换 Terminal 、Chrome、sublime 之前切换，我们把错误直接抛到显示器上，Terminal 只处理打包，Chrome 看语法错误，在 sublime 修改就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">host</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">HOST</span>, <span class="hljs-comment">// Defaults to `localhost`</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">// Defaults to 8080</span><br>    <span class="hljs-attr">overlay</span>: &#123;<br>      <span class="hljs-attr">errors</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">warnings</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>  &#125;,<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="011-Webpack2-中加载-CSS-的相关配置与实战"><a href="#011-Webpack2-中加载-CSS-的相关配置与实战" class="headerlink" title="011 - Webpack2 中加载 CSS 的相关配置与实战"></a><a href="https://www.bilibili.com/video/av11128844/#page=7">011 - Webpack2 中加载 CSS 的相关配置与实战</a></h3><p>webpack 除了能打包 js 文件，我们还能打包各种资源，这次先来栏加载 css 文件的加载方法。</p><p><strong>安装加载器</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm i css-loader style-loader --save-dev<br></code></pre></td></tr></table></figure><p><strong>配置</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js 的 module: &#123;rules:[写在这里]</span><br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>  <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>  <span class="hljs-attr">use</span>: [<br>    <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>    &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>      &#125;,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="012-理解-Webpack-中的-CSS-作用域与-CSS-Modules"><a href="#012-理解-Webpack-中的-CSS-作用域与-CSS-Modules" class="headerlink" title="012 - 理解 Webpack 中的 CSS 作用域与 CSS Modules"></a><a href="https://www.bilibili.com/video/av11128844/#page=12">012 - 理解 Webpack 中的 CSS 作用域与 CSS Modules</a></h3><p>为了防止 CSS 同名冲突。所以就有了这个。用上一节的配置，写上注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js 的 module: &#123;rules:[写在这里]</span><br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>  <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>  <span class="hljs-attr">use</span>: [<br>    <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>    &#123;<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>      <span class="hljs-attr">options</span>: &#123;<br>        <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//作用于</span><br>      &#125;,<br>    &#125;,<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="013-自动分离-CSS-到独立文件"><a href="#013-自动分离-CSS-到独立文件" class="headerlink" title="013 - 自动分离 CSS 到独立文件"></a><a href="https://www.bilibili.com/video/av11128844/#page=7">013 - 自动分离 CSS 到独立文件</a></h3><p>之前所以的 css、js 都打包成了 js。而浏览器最后才加载 js。如果把 css 放在 js 中，网页刷新就会闪一下，因为网页在没有加载 js 时，是没有 css 样式的（有浏览器默认样式）。所以我们有必要把 css 分离出来。</p><p><strong>安装</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm i extract-text-webpack-plugin --save-dev<br></code></pre></td></tr></table></figure><p><strong>配置</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ExtractTextPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;extract-text-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> plugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtractTextPlugin</span>(&#123;<br>  <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[name].css&#x27;</span>,<br>  <span class="hljs-attr">ignoreOrder</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br><span class="hljs-comment">// rules 修改</span><br><span class="hljs-attr">reles</span>:[&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>    <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>      <span class="hljs-attr">use</span>: plugin.<span class="hljs-title function_">extract</span>(&#123;<br>        <span class="hljs-attr">use</span>: &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;css-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>,<br>          &#125;,<br>        &#125;,<br>        fallback : <span class="hljs-string">&#x27;style-loader&#x27;</span>,<br>      &#125;),<br>&#125;]<br><br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Webpack demo&#x27;</span>,<br>  &#125;),<br>  plugin,<br>]<br></code></pre></td></tr></table></figure><h3 id="014-深入理解-Webpack-2-中的-loader"><a href="#014-深入理解-Webpack-2-中的-loader" class="headerlink" title="014 - 深入理解 Webpack 2 中的 loader"></a><a href="https://www.bilibili.com/video/av11128844/#page=14">014 - 深入理解 Webpack 2 中的 loader</a></h3><p>一般 loader 加载顺序是从右到左的，当然你可以设置前置加载，把东西提到前面先加载。</p><p>这节太难了吧，自己去文档看。</p><h3 id="015-Webpack-2-中的文件压缩"><a href="#015-Webpack-2-中的文件压缩" class="headerlink" title="015 - Webpack 2 中的文件压缩"></a><a href="https://www.bilibili.com/video/av11128844/#page=15">015 - Webpack 2 中的文件压缩</a></h3><p><strong>自动检查大小</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br> <span class="hljs-attr">performance</span>: &#123;<br>    <span class="hljs-attr">hints</span>: <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-comment">// &#x27;error&#x27;</span><br>    <span class="hljs-attr">maxEntrypointSize</span>: <span class="hljs-number">100000</span>, <span class="hljs-comment">// bytes 编译出来的大小限制</span><br>    <span class="hljs-attr">maxAssetSize</span>: <span class="hljs-number">450000</span>, <span class="hljs-comment">// bytes 资源大小限制</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p><strong>webpack 命令压缩</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">webpack -p<br></code></pre></td></tr></table></figure><p><strong>插件压缩</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i babili-webpack-plugin --save-dev<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">BabiliPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;babili-webpack-plugin&#x27;</span>);<br><span class="hljs-comment">/*******/</span><br><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Webpack demo&#x27;</span>,<br>  &#125;),<br>  plugin,<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BabiliPlugin</span>(),<br>]<br><br></code></pre></td></tr></table></figure><h3 id="016-Webpack-2-中生成-SourceMaps"><a href="#016-Webpack-2-中生成-SourceMaps" class="headerlink" title="016 - Webpack 2 中生成 SourceMaps"></a><a href="https://www.bilibili.com/video/av11128844/#page=16">016 - Webpack 2 中生成 SourceMaps</a></h3><p><strong>为什么要用这个？</strong>:</p><p>webpack 对我们的代码进行了混淆，调试根本没法用了。所以我们需要这个东西，视频的例子貌似还有自己找文件，我自己在 <a href="https://bubao.github.io/2017/07/01/%E7%BA%AFReact&%E7%BA%AFRedux/">《纯 React&amp;纯 Redux》</a> 中记录了另一个方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.config.js</span><br><span class="hljs-comment">//devtool: &#x27;cheap-module-eval-source-map&#x27;,</span><br><span class="hljs-comment">//devtool 是生成源码映射（source map），方便调试。开发时点击控制台警报可以调到源码位置而不是编译后的代码</span><br><span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span>,<br></code></pre></td></tr></table></figure><h3 id="017-Webpack-2-中分离打包项目代码与组件代码"><a href="#017-Webpack-2-中分离打包项目代码与组件代码" class="headerlink" title="017 - Webpack 2 中分离打包项目代码与组件代码"></a><a href="https://www.bilibili.com/video/av11128844/#page=17">017 - Webpack 2 中分离打包项目代码与组件代码</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-attr">entry</span>:&#123;<br>  <span class="hljs-attr">app</span>: <span class="hljs-variable constant_">PATHS</span>.<span class="hljs-property">app</span>,<br>  <span class="hljs-attr">vendor</span>:[<span class="hljs-string">&#x27;react&#x27;</span>]<br>&#125;<br><span class="hljs-comment">// 会打包成 app 和 vendor 文件</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Webpack demo&#x27;</span>,<br>    &#125;),<br>    plugin,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">BabiliPlugin</span>(),<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-property">optimize</span>.<span class="hljs-title class_">CommonsChunkPlugin</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;vendor&#x27;</span>,<br>    &#125;),<br>  ],<br></code></pre></td></tr></table></figure><blockquote><p>引入的时候先 vendor 在 app</p></blockquote><h3 id="18-使用可视化图表进行统计分析打包过程"><a href="#18-使用可视化图表进行统计分析打包过程" class="headerlink" title="18 - 使用可视化图表进行统计分析打包过程"></a><a href="https://www.bilibili.com/video/av11128844/#page=18">18 - 使用可视化图表进行统计分析打包过程</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;script&quot;</span>:&#123;<br>  <span class="hljs-string">&quot;stats&quot;</span>: <span class="hljs-string">&quot;webpack --env production --profile --json &gt; stats.json&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://webpack.github.io/analyse/"><strong>官方可视化工具</strong></a></p><p><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a></p><p><a href="http://blog.parryqiu.com/2017/06/16/webpack2-Statistics/">使用可视化图表对 Webpack 2 的编译与打包进行统计分析</a></p><h3 id="019-Webpack-2-中配置多页面编译"><a href="#019-Webpack-2-中配置多页面编译" class="headerlink" title="019 - Webpack 2 中配置多页面编译"></a><a href="https://www.bilibili.com/video/av11128844/#page=19">019 - Webpack 2 中配置多页面编译</a></h3><p>看视频</p><h3 id="020-Webpack-2-中的-HMR-Hot-Module-Replacement"><a href="#020-Webpack-2-中的-HMR-Hot-Module-Replacement" class="headerlink" title="020 - Webpack 2 中的 HMR ( Hot Module Replacement )"></a><a href="https://www.bilibili.com/video/av11128844/#page=27">020 - Webpack 2 中的 HMR ( Hot Module Replacement )</a></h3><p>看视频，不写了</p><p>—————- 分割线 —————- </p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Webpack 中文文档：</p><ul><li><a href="https://doc.webpack-china.org/">webpack-china Webpack 中文文档</a></li><li><a href="http://www.css88.com/doc/webpack2/">css88 Webpack 2.2 中文文档</a></li></ul><p>Webpack 教程：</p><ul><li><a href="https://devopen.club/course/webpack2.html">Webpack 2 视频教程</a></li></ul><p>其他：</p><ul><li><a href="https://devopen.club/?f=blog">DevOpenClub</a></li><li><a href="https://book.douban.com/subject/26928402/">React 与 Redux 开发实例精解</a></li><li><a href="https://github.com/ParryQiu/DevOpenClub-Tech-Webpack2">源码</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>前端</tag>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React ES6 类组件中的构造函数</title>
    <link href="/posts/8ddcab73.html"/>
    <url>/posts/8ddcab73.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://oay5ngsv9.bkt.clouddn.com/blogTitle/bubao-JS.png" alt="bubao-JS"></p><span id="more"></span><blockquote><p><a href="http://cheng.logdown.com/posts/2016/03/26/683329">React ES6 class constructor super()</a> 】</p><p>学 <a href="https://github.com/kdchang/reactjs101/blob/master/Ch04/props-state-introduction.md">Reactjs101</a> 时发现自己能看懂参看文章 <a href="http://cheng.logdown.com/posts/2016/03/26/683329">React ES6 class constructor super()</a> 。所以就翻译过来了</p></blockquote><p>当你用 ES6 语法 class 写 React 像这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Conponent</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">super</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或许会有两个疑问：</p><ol><li>必须在 constructor 中加入 super() 吗？</li><li><code>super()</code> 和 <code>super(props)</code> 之间有事吗不同？</li></ol><h2 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer 1"></a>Answer 1</h2><blockquote><p>有 <code>constructor</code> 就需要 <code>super()</code></p></blockquote><p>如果你有个构造函数 <code>constructor</code> 就 必须要有 <code>super()</code> 。看看下面的例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span> &#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello &#123; this.props.world &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码是完全有效的。你不需要在你所有创建的组件中加入<code>super()</code> 。然而，如果你代码中有构造函数，那你必须调用 <code>super()</code> ：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">//Error: &#x27;this&#x27; is not allowed before super()</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为在没有调用 <code>super()</code>之前<code>this</code> 未初始化，这就是为什么 <code>this</code> 不能在 <code>super()</code>之前。</p><p>你或许想你能创建一个不调用 <code>super()</code> 的空构造函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;&#125; <span class="hljs-comment">// Error: missing super() call in constructor</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ES6  class constructors 必须调用 <code>super</code> 如果是子类。因此，你必须调用 <code>super()</code> 只要你有一个构造函数。（但子类不需要有构造函数）。</p><h2 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer 2"></a>Answer 2</h2><blockquote><p>只有你想把<code>this.props</code>写在构造函数中才需要调用<code>super(props)</code>：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>); <span class="hljs-comment">// this.props is undefined</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>); <span class="hljs-comment">// prints out whatever is inside props</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果你想在其他地方使用它，没有必要设置<code>props</code>到构造函数中。因为 React 会自动为你设置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">// There is no need to call `super(props)` or even having a constructor </span><br>        <span class="hljs-comment">// this.props is automatically set for you by React </span><br>        <span class="hljs-comment">// not just in render but another where else other than the constructor</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>);  <span class="hljs-comment">// it works!</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
      <tag>译文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux 终端使用彩色 Emoji</title>
    <link href="/posts/4cc4482.html"/>
    <url>/posts/4cc4482.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://oay5ngsv9.bkt.clouddn.com/blogTitle/bubao-emoji.png" alt="bubao-emoji"></p><span id="more"></span><blockquote><p>cairo-coloredemoji、配置由 hexchain 提供</p></blockquote><p><strong>安装 Cairo</strong>：</p><p><code>aur/cairo-coloredemoji</code></p><p>AUR 上的资源好像下载有问题，如果安装出错，手动下载后，放到 tmp 的对应位置，再安装就能成功了</p><p><strong>安装字体</strong>：</p><p><code>extra/noto-fonts-emoji</code></p><p><strong>配置<code>~/.config/fontconfig/fonts.conf</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">fontconfig</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;fonts.dtd&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">fontconfig</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;font&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;rgba&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">const</span>&gt;</span>rgb<span class="hljs-tag">&lt;/<span class="hljs-name">const</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;font&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hintstyle&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">const</span>&gt;</span>hintfull<span class="hljs-tag">&lt;/<span class="hljs-name">const</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;font&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;antialias&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">bool</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;font&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;lcdfilter&#x27;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;assign&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">const</span>&gt;</span>lcddefault<span class="hljs-tag">&lt;/<span class="hljs-name">const</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default font (no fc-match pattern) --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;prepend&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default font for the zh_CN locale (no fc-match pattern) --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">compare</span>=<span class="hljs-string">&#x27;contains&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;lang&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>zh_CN<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;prepend&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Sans CJK SC<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default sans-serif font --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;pattern&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&#x27;any&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>sans-serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;prepend&#x27;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&#x27;same&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default serif fonts --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;pattern&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&#x27;any&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;prepend&#x27;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&#x27;same&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Serif<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Default monospace fonts --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&#x27;pattern&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">qual</span>=<span class="hljs-string">&#x27;any&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>monospace<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;family&#x27;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&#x27;prepend&#x27;</span> <span class="hljs-attr">binding</span>=<span class="hljs-string">&#x27;same&#x27;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Sans<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prgname&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>firefox<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">match</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;pattern&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prgname&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>chrome<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">edit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;family&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;prepend&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>Noto Color Emoji<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">edit</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">match</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>我直接使用 hexchain 的 <a href="https://gist.github.com/hexchain/47f550472e79d0805060">配置</a></p><p><strong>Emoji 字符宽度</strong><br>安装<code>aur/vte3-ng-fullwidth-emoji</code></p><p><strong>设置<code>wcwidth</code>宽度</strong></p><blockquote><p><code>wcwidth</code>对字符宽度的计算由 locale 决定，比如对于常用的<code>en_US.UTF-8</code>等，glibc 提供的<code>/usr/share/i18n/charmaps/UTF-8.gz</code>中<code>WIDTH</code>、<code>END WIDTH</code>区块给出了字符宽度信息。但其中没有列出 Emoji 字符，因此宽度将用缺省值 1。</p><p>我用 <a href="https://gist.github.com/MaskRay/86b71b50d30cfffbca7a">https://gist.github.com/MaskRay/86b71b50d30cfffbca7a</a> 重新生成一个<code>UTF-8</code>，gzip 压缩后覆盖<code>/usr/share/i18n/charmaps/UTF-8.gz</code>，然后执行<code>locale-gen</code>。修改后，可以用 <a href="https://gist.github.com/MaskRay/8042e39dc822a57c217f">https://gist.github.com/MaskRay/8042e39dc822a57c217f</a> 确定<code>wcwidth</code>计算出来的宽度确实变更了。</p><h4 id="Arch-Linux-用户"><a href="#Arch-Linux-用户" class="headerlink" title="Arch Linux 用户"></a>Arch Linux 用户</h4><p><code>/etc/pacman.d/hooks/update-charmaps-UTF-8.hook</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">[Trigger]<br>Operation = Upgrade<br>Type = File<br>Target = usr/share/i18n/charmaps/UTF-8.gz<br><br>[Action]<br>When = PostTransaction<br>Exec = /etc/pacman.d/hooks/update-charmaps-UTF-8.py<br></code></pre></td></tr></table></figure><p><code>/etc/pacman.d/hooks/update-charmaps-UTF-8.py</code>:</p><p>从 <a href="https://gist.github.com/MaskRay/86b71b50d30cfffbca7a">https://gist.github.com/MaskRay/86b71b50d30cfffbca7a</a> 下载</p><p>by:<a href="http://maskray.me/blog/2016-03-13-terminal-emulator-fullwidth-color-emoji">MasKray</a></p></blockquote><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 🚂🚊🚉🚞🚆🚄🚅🚈🚇🚝🚋🚃🚟<br></code></pre></td></tr></table></figure><p><strong>图片展示</strong><br><img src="http://oay5ngsv9.bkt.clouddn.com/emoji.png" alt="emoji"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>好像 wcwidth 还是有问题的，按 tab 会遗留第一个字母</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>archlinux</tag>
      
      <tag>Emoji</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知乎专栏爬虫</title>
    <link href="/posts/1d8fc11f.html"/>
    <url>/posts/1d8fc11f.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://oay5ngsv9.bkt.clouddn.com/blogTitle/bubao-zhihu.png" alt="bubao-zhihu"></p><p>知乎是一个好地方，最近翻阅<strong>知乎</strong>官网，发现<strong>知乎专栏</strong>藏的很隐蔽，如果不知道专栏名，只能在搜索中找关键词。而对于我们不知道的领域，我们几乎是认为知乎是没有这方面的专栏的。关于这个会用 Google 的朋友应该会知道怎么样在网上找到所有的<strong>知乎专栏</strong><span id="more"></span></p><h2 id="爬虫诞生"><a href="#爬虫诞生" class="headerlink" title="爬虫诞生"></a>爬虫诞生</h2><p>作为一个收藏癖，看到好东西不藏在本地就不爽，虽然存起来大多时候是忘记它的存在的。再者，最近发现有些知乎专栏的文章确实不错，就萌生了爬专栏文章的念头。在 github 上找了很久，发现没有爬专栏的爬虫，只找到爬某用户回答的爬虫。模仿别人的爬虫，于是这个 <a href="https://github.com/bubao/GetZhiHuZhuanLan">爬虫</a> 就诞生了。</p><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><p>其实我也不太明白这个爬虫的原理，四个<code>*.js</code>文件，只有一个是我自己写的，其他的都是网上找的，反正就是能用就对了 (⊙v⊙)。</p><p>废话不多说了，源码送上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;request&#x27;</span>);<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>)<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./config.js&#x27;</span>);<br><span class="hljs-keyword">const</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./download.js&#x27;</span>);<br><span class="hljs-keyword">const</span> zhihuId = config.<span class="hljs-property">zhihuId</span>;<br><span class="hljs-keyword">const</span> dir = <span class="hljs-string">`<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>;<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://zhuanlan.zhihu.com/<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;---------start----------------&#x27;</span>);<br>fs.<span class="hljs-title function_">exists</span>(dir, <span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>) &#123;<br>    <span class="hljs-keyword">if</span> (exists)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dir + <span class="hljs-string">&#x27;文件夹存在&#x27;</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        fs.<span class="hljs-title function_">mkdir</span>(dir, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">if</span> (err)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建&#x27;</span> + dir + <span class="hljs-string">&#x27;文件夹成功&#x27;</span>);<br>        &#125;)<br>    &#125;<br><br>&#125;);<br>server.<span class="hljs-title function_">download</span>(url, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>        <span class="hljs-comment">//console.log(data);</span><br><br>        <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data);<br><br>        <span class="hljs-keyword">var</span> postsCount = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>($(<span class="hljs-string">&quot;textarea#preloadedState&quot;</span>).<span class="hljs-title function_">text</span>()).<span class="hljs-property">columns</span>[<span class="hljs-string">`<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>].<span class="hljs-property">postsCount</span><br>            <span class="hljs-comment">//console.log(postsCount)</span><br>            <span class="hljs-comment">//console.log(&quot;done&quot;);</span><br><br>        <span class="hljs-title function_">loopdown</span>(postsCount)<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loopdown</span>(<span class="hljs-params">postsCount</span>) &#123;<br>    <span class="hljs-comment">// body...</span><br>    <span class="hljs-keyword">var</span> posts = postsCount % <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">var</span> times = (postsCount - posts) / <span class="hljs-number">20</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= times; i++) &#123;<br>        <span class="hljs-keyword">var</span> urlp = <span class="hljs-string">`https://zhuanlan.zhihu.com/api/columns/<span class="hljs-subst">$&#123;zhihuId&#125;</span>/posts?limit=20&amp;offset=<span class="hljs-subst">$&#123;i*<span class="hljs-number">20</span>&#125;</span>`</span><br><br>        request<br>            .<span class="hljs-title function_">get</span>(urlp, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, res, body</span>) &#123;<br>                <span class="hljs-comment">// console.log(err);</span><br>                <span class="hljs-comment">// console.log(res);</span><br>                <span class="hljs-comment">//console.log(body);</span><br>            &#125;)<br>            .<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dir&#125;</span>/<span class="hljs-subst">$&#123;i&#125;</span>.json`</span>))<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dir&#125;</span>/<span class="hljs-subst">$&#123;i&#125;</span>.json`</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>fs</code>模块用来创建文件夹和读写<code>*.json</code>数据</li><li><code>request</code>模块用来获取 api 的内容，并用<code>pipe</code>来写入文件。</li><li><code>cheerio</code>模块用来获取网页中的 DOM，因为 DOM 里面有部分我需要的数据</li></ul><p>其他的就没什么了。值得一提，的是知乎的 api 一直最多只支持读取 20 条数据，所以我用<code>console.log()</code>打印我有多少<code>*.json</code>文件，(<code>*.json</code>文件个数-1)<em>20&lt;得到的文章数&lt;&#x3D;<code>*.json</code>文件个数</em> 20。虽然我也打印了总的文章数在控制台。</p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇：纯 React&amp;纯 Redux</title>
    <link href="/posts/4bb8d0fd.html"/>
    <url>/posts/4bb8d0fd.html</url>
    
    <content type="html"><![CDATA[<p><img src="http://oay5ngsv9.bkt.clouddn.com/blogTitle/React&Redux.jpg" alt="React"></p><span id="more"></span><h2 id="第一章-技术简介"><a href="#第一章-技术简介" class="headerlink" title="第一章 技术简介"></a>第一章 技术简介</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>Q：<a href="https://facebook.github.io/react/">React 是什么？</a></p><p>A：React 是一个声明式、高效、灵活的、创建用户界面的 JavaScript 库</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>Q：<a href="http://www.redux.org.cn/">Rudex 是什么？</a></p><p>A：Redux 是一个 JavaScript 状态容器，提供科预测的状态管理</p><h4 id="Redux-三大原则：单一数据源、state-只读、使用纯函数来执行修改"><a href="#Redux-三大原则：单一数据源、state-只读、使用纯函数来执行修改" class="headerlink" title="Redux 三大原则：单一数据源、state 只读、使用纯函数来执行修改"></a><a href="http://www.redux.org.cn/docs/introduction/ThreePrinciples.html">Redux 三大原则：单一数据源、state 只读、使用纯函数来执行修改</a></h4><p><strong>单一数据源</strong>：在整个应用的 state 被存储在一颗对象树中，并且这个对象树只存在于唯一一个 store 中。state 指的是数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-title function_">getState</span>())<br><br><span class="hljs-comment">/* Prints</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  visibilityFilter: &#x27;SHOW_ALL&#x27;,</span><br><span class="hljs-comment">  todos: [</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">      text: &#x27;Consider using Redux&#x27;,</span><br><span class="hljs-comment">      completed: true,</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">      text: &#x27;Keep all state in a single tree&#x27;,</span><br><span class="hljs-comment">      completed: false</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">  ]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>state 只读</strong>：并不代表我们不能修改 state 。<strong>只读</strong>指的是不想允许直接对 state 这个变量重写赋值，但可以<strong>通过 action 和 reducer 返回一个新的 state。</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">store.<span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;COMPLETE_TODO&#x27;</span>,<br>  <span class="hljs-attr">index</span>: <span class="hljs-number">1</span><br>&#125;);<br><br>store.<span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;SET_VISIBILITY_FILTER&#x27;</span>,<br>  <span class="hljs-attr">filter</span>: <span class="hljs-string">&#x27;SHOW_COMPLETED&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>使用纯函数来执行修改</strong>：更新 state 的 reducer 只是一些纯函数，接收先前的 state 和 action， 并返回新的 state。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/**</span><br><span class="hljs-comment">visibilityFilter 是一个 reducer</span><br><span class="hljs-comment">接收 state 作为第一个参数，并初始化为&#x27;SHOW_ALL&#x27;</span><br><span class="hljs-comment">第二个参数为 action</span><br><span class="hljs-comment">使用 switch 来判断 action.type</span><br><span class="hljs-comment">并根据当前的 action.type</span><br><span class="hljs-comment">return 新的 state</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">visibilityFilter</span>(<span class="hljs-params">state = <span class="hljs-string">&#x27;SHOW_ALL&#x27;</span>, action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;SET_VISIBILITY_FILTER&#x27;</span>:<br>      <span class="hljs-keyword">return</span> action.<span class="hljs-property">filter</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">todos</span>(<span class="hljs-params">state = [], action</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;ADD_TODO&#x27;</span>:<br>      <span class="hljs-keyword">return</span> [<br>        ...state,<br>        &#123;<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span>,<br>          <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span><br>        &#125;<br>      ]<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;COMPLETE_TODO&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">todo, index</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (index === action.<span class="hljs-property">index</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, todo, &#123;<br>            <span class="hljs-attr">completed</span>: <span class="hljs-literal">true</span><br>          &#125;)<br>        &#125;<br>        <span class="hljs-keyword">return</span> todo<br>      &#125;)<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> &#123; combineReducers, createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">combineReducers 将两个 reducer 绑定成新的 reducer</span><br><span class="hljs-comment">createStore 把 reducer 包装生成 store</span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">let</span> reducer = <span class="hljs-title function_">combineReducers</span>(&#123; visibilityFilter, todos &#125;)<br><span class="hljs-keyword">let</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br></code></pre></td></tr></table></figure><p>Q：为什么使用 Redux</p><p>A：可预测、便于组织管理代码、支持 Universal 渲染、优秀的拓展能力、容易测试、开发工具、社区和生态系统</p><h4 id="为什么使用-Redux"><a href="#为什么使用-Redux" class="headerlink" title="为什么使用 Redux"></a>为什么使用 Redux</h4><p><strong>可预测</strong>：Redux 是一个数据源，想要修改它只能发起 action。reducer 又是纯函数，也就是说输入永远会得到相同的输出。这一切让程序运行变得可控、可预测。</p><p><strong>便于组织管理代码</strong>：严格而明确的程序结构使得代码更容易组织和管理。</p><p><strong>支持 Universal 渲染</strong>：单一数据源这个原则可以帮助解决 Universal 渲染中的数据传输问题，服务器渲染后只需给客户端传递一个变量即可，这个变量就存储 state 的对象树</p><p><strong>优秀的拓展能力</strong>：很多的中间件拓展</p><p><strong>容易测试</strong>：写单一功能的、没有外界以来的小型函数</p><p><strong>开发工具</strong>：可以通过使用 redux 开发工具实现追踪、回退和重放程序中的 action 和 state</p><h3 id="Node-Universal-渲染"><a href="#Node-Universal-渲染" class="headerlink" title="Node&amp;Universal 渲染"></a>Node&amp;Universal 渲染</h3><p>React&amp;Redux 是实现 Universal 渲染的理想技术组合</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel 是一个 JavaScript 编译器</p><p><strong>Babel 工具</strong></p><ul><li>Babel 内建工具：Babel CLI、Require Hook</li><li>各种构建系统：Webpack、Gulp、Grunt、RequireJs 等</li><li>测试框架：Jasmin、Karma、Mocha 等</li><li>语言 API：C#&#x2F;.NET、Node、Ruby</li><li>模板引擎：Jade</li><li>编辑器：WebStrom</li><li>调试器：Node Inspector</li></ul><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>前端资源模块化管理和打包工具。通过加载器 (loader) 的转换，任何形式的资源都可以视为模块</p><ul><li>编译、加载使用 ES2015 和 JSX 语法的模块</li><li>实现开发服务器和热替换</li><li>加载图片文件</li><li>加载字体文件</li><li>加载样式文件</li><li>加载 Json 文件</li><li>使用同构工具实现同构渲染</li><li>压缩代码</li><li>哈希命名</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="第二章-在-Node-js-中运行-React"><a href="#第二章-在-Node-js-中运行-React" class="headerlink" title="第二章 在 Node.js 中运行 React"></a>第二章 在 Node.js 中运行 React</h2><h3 id="编写-React-组件"><a href="#编写-React-组件" class="headerlink" title="编写 React 组件"></a>编写 React 组件</h3><p>通常我们需要写一个继承 (extends) 自 React.Component 的类，并在 render() 中返回你要展示的视图</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当如果这个组件只有一个 render 方法，可以写成下面的无状态组件，这也是 Aribnb 编码规范推荐的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>export</strong> 就是抛出这个组件，<strong>default</strong> 表示你能在别的文件中使用 <code>import App form &#39;./App&#39;</code> 导入这个组件。如果没有 <strong>default</strong> 则需要 <code>import &#123; App &#125; form &#39;./App&#39;</code> 导入这个组件。</p><h3 id="在-Node-js-中渲染组件"><a href="#在-Node-js-中渲染组件" class="headerlink" title="在 Node.js 中渲染组件"></a>在 Node.js 中渲染组件</h3><p>在<code>src/server.js</code>中引入 (import) 上面的组件，然后将其渲染成一个 HTML 字符串打印出来。在 Node.js 中我们使用<code>renderToString()</code>方法将组件渲染成字符串</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/server.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; renderToString &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom/server&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><br><span class="hljs-keyword">const</span> appHTML = <span class="hljs-title function_">renderToString</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(appHTML);<br></code></pre></td></tr></table></figure><h3 id="使用-Babel-编译运行-Node-js-程序"><a href="#使用-Babel-编译运行-Node-js-程序" class="headerlink" title="使用 Babel 编译运行 Node.js 程序"></a>使用 <a href="https://babeljs.io/">Babel</a> 编译运行 Node.js 程序</h3><p>使用 Require Hook 给每一个 require 方法上加上一个钩子，每次使用 require 加载 JavaScript 文件事，先使用 Babel 进行编译</p><blockquote><p>注意：Require Hook 优势是将编译和运行合二为一，造成劣势是性能消耗大，所以只在测试环境中使用</p></blockquote><p>1.Require Hook 安装：<code>npm i babel-register --save-dev</code></p><ol start="2"><li>使用：在入口文件顶部添加<code>require(&quot;babel-register&quot;)</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//index.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;babel-register&#x27;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./src/server.js&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li>安装 ES2015 和 React 的预设</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i --save-dev babel-preset-es2015 babel-preset-react<br></code></pre></td></tr></table></figure><ol start="4"><li>添加配置文件<code>./babelrc</code>，激活 ES2015 和 React 预设</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//.babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;react&quot;</span>, <span class="hljs-string">&quot;es2015&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  2 npm i<br>npm notice created a lockfile as package-lock.json. You should commit this file.<br>added 119 packages <span class="hljs-keyword">in</span> 24.763s<br>➜  2 npm start<br><br>&gt; 02-react-node@1.0.0 start /home/mike/文档/note/R&amp;R/rar/2<br>&gt; node index<br><br>&lt;h1 data-reactroot=<span class="hljs-string">&quot;&quot;</span> data-reactid=<span class="hljs-string">&quot;1&quot;</span> data-react-checksum=<span class="hljs-string">&quot;109777506&quot;</span>&gt;hello world&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>使用模块</p><h4 id="react-js-必需"><a href="#react-js-必需" class="headerlink" title="react.js  [必需]"></a><a href="https://facebook.github.io/react/index.html">react.js</a>  [必需]</h4><blockquote><p>React 是用来构建用户界面的 js 库，属于 view 层。<br>它有两大特点：1，单向数据绑定；2，虚拟 DOM<br>安装：<code>npm install --save react</code></p></blockquote><h4 id="babel-preset-react-必需"><a href="#babel-preset-react-必需" class="headerlink" title="babel-preset-react [必需]"></a><a href="https://github.com/babel/babel">babel-preset-react</a> [必需]</h4><blockquote><p>react 转码规则。为所有 react 插件所设置的 babel 预设。有了它，才能识别转译 jsx 语法等。<br>安装：<code>npm install --save-dev babel-preset-react</code></p></blockquote><h4 id="babel-preset-latest-必需"><a href="#babel-preset-latest-必需" class="headerlink" title="babel-preset-latest [必需]"></a><a href="http://babeljs.io/docs/plugins/preset-latest/">babel-preset-latest</a> [必需]</h4><blockquote><p>es2015,es2016,es2017 转码规则。为所有 es6 插件所设置的 babel 预设，<br>有了它，诸如，es6 的箭头函数，类，等等语法特性才能向 es5 转换。<br>安装：<code>npm install --save-dev babel-preset-latest</code><br>而这里使用的是<code>babel-preset-es2015</code><br>具体的 <code>babel-preset-latest</code>配置看 <a href="https://github.com/minooo/React-Study/blob/master/step-01/.babelrc">minooo 的配置</a></p></blockquote><h4 id="react-dom-js-必需"><a href="#react-dom-js-必需" class="headerlink" title="react-dom.js [必需]"></a><a href="https://npm.taobao.org/package/react-dom">react-dom.js</a> [必需]</h4><blockquote><p>react.js 主要用来创建元素和组件，当你想在 html 中渲染你的组件的时候，<br>你还得需要 react-dom.js。同时，react-dom.js 依赖于 react.js。<br>安装：<code>npm install --save react-dom</code></p></blockquote><hr><h2 id="第三章-在浏览器中运行-React"><a href="#第三章-在浏览器中运行-React" class="headerlink" title="第三章 在浏览器中运行 React"></a>第三章 在浏览器中运行 React</h2><p>例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i<br>npm run build<br>npm start<br></code></pre></td></tr></table></figure><h3 id="组件复用"><a href="#组件复用" class="headerlink" title="组件复用"></a>组件复用</h3><p>把第二章的 App.js 复制过来</p><h3 id="在浏览器中渲染-React"><a href="#在浏览器中渲染-React" class="headerlink" title="在浏览器中渲染 React"></a>在浏览器中渲染 React</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/client.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; render &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><br><span class="hljs-title function_">render</span>((<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#app&#x27;</span>));<br></code></pre></td></tr></table></figure><p>以上代码将<code>&lt;App /&gt;</code>组件渲染到 ID 为 app 的标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/dist/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用-Webpack-打包编译"><a href="#使用-Webpack-打包编译" class="headerlink" title="使用 Webpack 打包编译"></a>使用 <a href="https://webpack.github.io/">Webpack</a> 打包编译</h3><ol><li>安装 Webpack 和 babel-loader</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i --save-dev webpack babel-loader babel-core<br></code></pre></td></tr></table></figure><ol start="2"><li>添加 webpack.config.js 文件指定打包编译的配置信息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/client&#x27;</span>,<br>  <span class="hljs-comment">//入口文件位置</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: __dirname + <span class="hljs-string">&#x27;/static/dist&#x27;</span>,<br>    <span class="hljs-comment">//文件夹路径</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;main.js&#x27;</span><br>    <span class="hljs-comment">//文件名</span><br>  &#125;,<br>  <span class="hljs-comment">//出口文件位置</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">loaders</span>: [&#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>, <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&#x27;babel&#x27;</span>] &#125;]<br>  &#125;<br>  <span class="hljs-comment">//babel-loader 配置信息</span><br>  <span class="hljs-comment">//除了‘/node_modules/’文件夹，其他地方的`*.js`文件都用 babel-loader 编译</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>同样需要安装 ES2015 和 React 的预设</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i --save-dev babel-preset-es2015 babel-preset-react<br></code></pre></td></tr></table></figure><ol start="4"><li>添加配置文件<code>./babelrc</code>，激活 ES2015 和 React 预设</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//.babelrc</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;react&quot;</span>, <span class="hljs-string">&quot;es2015&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h4 id="react-js-必需-1"><a href="#react-js-必需-1" class="headerlink" title="react.js [必需]"></a><a href="https://facebook.github.io/react/index.html">react.js</a> [必需]</h4><blockquote><p>React 是用来构建用户界面的 js 库，属于 view 层。<br>它有两大特点：1，单向数据绑定；2，虚拟 DOM<br>安装：<code>npm install --save react</code></p></blockquote><hr><h4 id="react-dom-js-必需-1"><a href="#react-dom-js-必需-1" class="headerlink" title="react-dom.js [必需]"></a><a href="https://npm.taobao.org/package/react-dom">react-dom.js</a> [必需]</h4><blockquote><p>react.js 主要用来创建元素和组件，当你想在 html 中渲染你的组件的时候，<br>你还得需要 react-dom.js。同时，react-dom.js 依赖于 react.js。<br>安装：<code>npm install --save react-dom</code></p></blockquote><hr><h4 id="webpack-必需"><a href="#webpack-必需" class="headerlink" title="webpack [必需]"></a><a href="https://npm.taobao.org/package/react-dom">webpack</a> [必需]</h4><blockquote><p>于人而言，尤其是当开发大型项目时，每个包每个模块每个静态资源都应尽可能的条理清晰的罗列出来，<br>这样方便我们开发；于机器而言，就不需要这么“条理清晰”了，此时应最大限度的压缩优化这些资源，<br>如何把这些资源模块“杂糅”在一起，这就是 webpack 要做的。<br>安装：<code>npm install --save-dev webpack</code><br>备注：webpack 2.0 即将发布<br>webpack 最基本的启动 webpack 命令<br>webpack -w 提供 watch 方法，实时进行打包更新<br>webpack -p 压缩混淆脚本，这个非常非常重要！<br>webpack -d 生成 map 映射文件，告知哪些模块被最终打包到哪里了，方便调试<br>webpack –progress 显示打包进程，百分比显示<br>webpack –config XXX.js &#x2F;&#x2F;使用另一份配置文件（比如 webpack.config2.js）来打包 webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br>webpack –profile 输出性能数据，可以看到每一步的耗时<br>webpack –display-error-details 方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。<br>webpack –display-modules 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块<br><a href="https://segmentfault.com/a/1190000005089993">webpack 入门配置</a></p></blockquote><hr><h4 id="babel-preset-react-必需-1"><a href="#babel-preset-react-必需-1" class="headerlink" title="babel-preset-react [必需]"></a><a href="https://github.com/babel/babel">babel-preset-react</a> [必需]</h4><blockquote><p>react 转码规则。为所有 react 插件所设置的 babel 预设。有了它，才能识别转译 jsx 语法等。<br>安装：<code>npm install --save-dev babel-preset-react</code></p></blockquote><hr><h4 id="babel-preset-latest-必需-1"><a href="#babel-preset-latest-必需-1" class="headerlink" title="babel-preset-latest [必需]"></a><a href="http://babeljs.io/docs/plugins/preset-latest/">babel-preset-latest</a> [必需]</h4><blockquote><p>es2015,es2016,es2017 转码规则。为所有 es6 插件所设置的 babel 预设，<br>有了它，诸如，es6 的箭头函数，类，等等语法特性才能向 es5 转换。<br>安装：<code>npm install --save-dev babel-preset-latest</code><br>而这里使用的是<code>babel-preset-es2015</code><br>具体的 <code>babel-preset-latest</code>配置看 <a href="https://github.com/minooo/React-Study/blob/master/step-01/.babelrc">minooo 的配置</a></p></blockquote><h2 id="第四章-开发服务器和热替换"><a href="#第四章-开发服务器和热替换" class="headerlink" title="第四章 开发服务器和热替换"></a>第四章 开发服务器和热替换</h2><p><strong>例子</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm i<br>npm start<br></code></pre></td></tr></table></figure><p>之前直接同 webpack 打包，每次修改后都需要先运行一次<code>npm run build</code>，再手动刷新浏览器，效率实在是太低了。懒癌发作，使用开发服务器（webpack-dev-server）和热替换（hot-reloadeing）技术解决这个问题</p><h3 id="配置-Babel"><a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h3><p>配置 Babel 时期支持热替换的最快捷方式是使用<code>react-hmre</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//.babel</span><br>&#123;<br>  <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>, <span class="hljs-string">&quot;react&quot;</span>],<br>  <span class="hljs-string">&quot;env&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;development&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;react-hmre&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//限制只在开发时候用 react-hmre</span><br></code></pre></td></tr></table></figure><p><strong>react-hmre 功能</strong></p><p>这个预设的第一个功能是热替换 React 模块，还可以捕获错误，并将包含错误对战信息的红色警告页面输出到浏览器。</p><blockquote><p>注意：如果将无状态组件放在组件顶层，热替换将会出错，所以现在的 App 组件是类组件。</p></blockquote><h3 id="配置-Webpack"><a href="#配置-Webpack" class="headerlink" title="配置 Webpack"></a>配置 Webpack</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">//引入 path 模块</span><br><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-comment">//引入 webpack 模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;cheap-module-eval-source-map&#x27;</span>,<br>  <span class="hljs-comment">//devtool 是生成源码映射（source map），方便调试。开发时点击控制台警报可以调到源码位置而不是编译后的代码</span><br>  <span class="hljs-attr">entry</span>: [<br>    <span class="hljs-comment">//入口文件</span><br>    <span class="hljs-string">&#x27;webpack-hot-middleware/client&#x27;</span>,<br>    <span class="hljs-comment">//引入热替换的中间件。原理是：先连接上服务器，等接受需要重新编译的代码的通知，一旦代码变动吗，就会收到通知进而更新客户端代码</span><br>    <span class="hljs-string">&#x27;./index.js&#x27;</span><br>  ],<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">//输出文件</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-comment">//输出文件夹</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-comment">//输出文件名</span><br>    <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;/static/&#x27;</span><br>    <span class="hljs-comment">//公共路径，所有资源的前缀，这个路径是虚拟的，无法在硬盘中找到，被编译后的脚本被保存在内存中</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">//插件列表</span><br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-property">optimize</span>.<span class="hljs-title class_">OccurrenceOrderPlugin</span>(),<br>    <span class="hljs-comment">//用于给经常使用的模块分配最小长度的 ID</span><br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">HotModuleReplacementPlugin</span>()<br>    <span class="hljs-comment">//用于热替换</span><br>  ],<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">loaders</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<span class="hljs-comment">//后缀类型</span><br>        <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&#x27;babel&#x27;</span>],<span class="hljs-comment">//加载器类型</span><br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<span class="hljs-comment">//排除文件夹</span><br>        <span class="hljs-attr">include</span>: __dirname<br>      &#125;<br>    ]<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="配置-Express-服务器"><a href="#配置-Express-服务器" class="headerlink" title="配置 Express 服务器"></a>配置 Express 服务器</h3><p>在 Express 服务器中添加 webpackDevMiddleware 和 webpackHot-Middleware 两个中间件就能完成开发服务器和热替换的配置工作。</p><p><strong>webpackDevMiddleware</strong>：将 webpack 的打包功能与 Express 服务器的资源服务功能合二为一。Express 通过它打包并把资源读取到内存中，它还可以监视代码变动，就会停止提供久资源，等编译完成后继续提供新资源</p><p><strong>webpackHot-Middleware</strong>：webpackDevMiddleware 中间件无法完成热替换，也不能在更新后保留程序状态。为了实现热替换，还应该在 webpackDevMiddleware 基础上加上 webpackHot-Middleware</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//server.js</span><br><span class="hljs-comment">/* eslint-disable */</span><br><span class="hljs-keyword">var</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-keyword">var</span> webpackDevMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-dev-middleware&#x27;</span>);<br><span class="hljs-keyword">var</span> webpackHotMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-hot-middleware&#x27;</span>);<br><span class="hljs-keyword">var</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.config&#x27;</span>);<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">new</span> (<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>))();<br><span class="hljs-keyword">var</span> port = <span class="hljs-number">3000</span>;<br><br><span class="hljs-keyword">var</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">webpackDevMiddleware</span>(compiler, &#123; <span class="hljs-attr">noInfo</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">publicPath</span>: config.<span class="hljs-property">output</span>.<span class="hljs-property">publicPath</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">webpackHotMiddleware</span>(compiler));<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">sendFile</span>(__dirname + <span class="hljs-string">&#x27;/index.html&#x27;</span>)<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-keyword">if</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;==&gt; 🌎  Listening on port %s. Open up http://localhost:%s/ in your browser.&quot;</span>, port, port)<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>####<a href="https://npm.taobao.org/package/babel-core">babel-core</a> [必需]</p><blockquote><p>Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。<br>作为下一代 javascript 语言标准，请拥抱 ES6(ES2015) 吧！<code>babel-core</code> 是 Babel 编译器的核心。<br>安装：<code>npm install --save-dev babel-core</code></p></blockquote><hr><p>####<a href="https://npm.taobao.org/package/babel-loader">babel-loader</a> [必需]</p><blockquote><p>loader 用于转换应用程序的资源文件，他们是运行在 nodejs 下的函数，<br>使用参数来获取一个资源的来源并且返回一个新的来源针对 webpack 的 babel 加载器。<br><code>babel-loader</code> 就是告诉 webpack 去加载我们写的使用了 es6 语法的 js 文件。<br>安装：<code>npm install --save-dev babel-loader</code></p></blockquote><hr><h4 id="babel-preset-react-必需-2"><a href="#babel-preset-react-必需-2" class="headerlink" title="babel-preset-react [必需]"></a><a href="https://github.com/babel/babel">babel-preset-react</a> [必需]</h4><blockquote><p>react 转码规则。为所有 react 插件所设置的 babel 预设。有了它，才能识别转译 jsx 语法等。<br>安装：<code>npm install --save-dev babel-preset-react</code></p></blockquote><hr><h4 id="babel-preset-latest-必需-2"><a href="#babel-preset-latest-必需-2" class="headerlink" title="babel-preset-latest [必需]"></a><a href="http://babeljs.io/docs/plugins/preset-latest/">babel-preset-latest</a> [必需]</h4><blockquote><p>es2015,es2016,es2017 转码规则。为所有 es6 插件所设置的 babel 预设，<br>有了它，诸如，es6 的箭头函数，类，等等语法特性才能向 es5 转换。<br>安装：<code>npm install --save-dev babel-preset-latest</code><br>而这里使用的是<code>babel-preset-es2015</code><br>具体的 <code>babel-preset-latest</code>配置看 <a href="https://github.com/minooo/React-Study/blob/master/step-01/.babelrc">minooo 的配置</a></p></blockquote><hr><h4 id="react-js-必需-2"><a href="#react-js-必需-2" class="headerlink" title="react.js [必需]"></a><a href="https://facebook.github.io/react/index.html">react.js</a> [必需]</h4><blockquote><p>React 是用来构建用户界面的 js 库，属于 view 层。<br>它有两大特点：1，单向数据绑定；2，虚拟 DOM<br>安装：<code>npm install --save react</code></p></blockquote><hr><h4 id="react-dom-js-必需-2"><a href="#react-dom-js-必需-2" class="headerlink" title="react-dom.js [必需]"></a><a href="https://npm.taobao.org/package/react-dom">react-dom.js</a> [必需]</h4><blockquote><p>react.js 主要用来创建元素和组件，当你想在 html 中渲染你的组件的时候，<br>你还得需要 react-dom.js。同时，react-dom.js 依赖于 react.js。<br>安装：<code>npm install --save react-dom</code></p></blockquote><hr><h4 id="webpack-必需-1"><a href="#webpack-必需-1" class="headerlink" title="webpack [必需]"></a><a href="https://npm.taobao.org/package/react-dom">webpack</a> [必需]</h4><blockquote><p>于人而言，尤其是当开发大型项目时，每个包每个模块每个静态资源都应尽可能的条理清晰的罗列出来，<br>这样方便我们开发；于机器而言，就不需要这么“条理清晰”了，此时应最大限度的压缩优化这些资源，<br>如何把这些资源模块“杂糅”在一起，这就是 webpack 要做的。<br>安装：<code>npm install --save-dev webpack</code><br>备注：webpack 2.0 即将发布<br>webpack 最基本的启动 webpack 命令<br>webpack -w 提供 watch 方法，实时进行打包更新<br>webpack -p 压缩混淆脚本，这个非常非常重要！<br>webpack -d 生成 map 映射文件，告知哪些模块被最终打包到哪里了，方便调试<br>webpack –progress 显示打包进程，百分比显示<br>webpack –config XXX.js &#x2F;&#x2F;使用另一份配置文件（比如 webpack.config2.js）来打包 webpack –colors 输出结果带彩色，比如：会用红色显示耗时较长的步骤<br>webpack –profile 输出性能数据，可以看到每一步的耗时<br>webpack –display-error-details 方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。<br>webpack –display-modules 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块<br><a href="https://segmentfault.com/a/1190000005089993">webpack 入门配置</a></p></blockquote><hr><h4 id="webpack-dev-middleware-开发需要"><a href="#webpack-dev-middleware-开发需要" class="headerlink" title="webpack-dev-middleware [开发需要]"></a><a href="https://npm.taobao.org/package/webpack-dev-middleware">webpack-dev-middleware</a> [开发需要]</h4><blockquote><p>它是一个用来组织包装 webpack 使其变成中间件的容器。（中间件的用途就是在输入和输出的过程中加工的一种手段）<br>webpack 本身只负责打包编译，webpack-dev-server 是协助我们开发的服务器，这个服务器底层是靠 express 操作的。<br>我们的页面如何在这个服务器上更新呢，首先是取得 webpack 打包好的资源，这就需要在<code>请求</code>到<code>响应</code>的过程中通过<br>express 的中间件取得资料， 而方法就是通过 webpack-dev-middleware 来实现。<br>这个中间件只在开发环境中使用，切忌用在生产环境中。<br>安装：<code>npm install --save-dev webpack-dev-middleware</code></p><p>这个中间件有两点好处：</p><ol><li>直接在内存中操作文件，而非磁盘中。这样处理速度更快。</li><li>在监视（watch）模式下，如果文件改变，中间件立即停止提供之前的 bundle，并且会延迟<br>请求回应，直到新的编译完成，如此一来，文件修改后，你可以直接刷新页面，而不用等待编译。</li></ol></blockquote><hr><h4 id="webpack-hot-middleware-开发需要"><a href="#webpack-hot-middleware-开发需要" class="headerlink" title="webpack-hot-middleware [开发需要]"></a><a href="https://npm.taobao.org/package/webpack-hot-middleware">webpack-hot-middleware</a> [开发需要]</h4><blockquote><p><code>webpack-dev-middleware</code> + <code>webpack-hot-middleware</code> 即可让我们用 <code>express</code><br>定制一个有热替换功能的 <code>webpack</code> 开发服务器。<br>安装：<code>npm install --save-dev webpack-hot-middleware</code></p></blockquote><h4 id="babel-preset-react-hmre"><a href="#babel-preset-react-hmre" class="headerlink" title="babel-preset-react-hmre"></a><a href="http://npm.taobao.org/package/babel-preset-react-hmre">babel-preset-react-hmre</a></h4><blockquote><p>这个预设的第一个功能是热替换 React 模块，还可以捕获错误，并将包含错误对战信息的红色警告页面输出到浏览器。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt;npm install babel-preset-react-hmre --save-dev<br></code></pre></td></tr></table></figure></blockquote><hr><h4 id="express-开发需要"><a href="#express-开发需要" class="headerlink" title="express [开发需要]"></a><a href="https://npm.taobao.org/package/express">express</a> [开发需要]</h4><blockquote><p>基于 Node.js 平台，快速、开放、极简的 web 开发框架。<br>在这里用于配置开发服务器。<br>安装：<code>npm install --save-dev express</code></p></blockquote><hr><h2 id="第五章-React-的创新语法：JSX"><a href="#第五章-React-的创新语法：JSX" class="headerlink" title="第五章 React 的创新语法：JSX"></a>第五章 React 的创新语法：JSX</h2><h3 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h3><p>jsx 是一个看起来像 XML 的 JavaScript 语法扩展，这种语法允许你在 JavaScript 中写可嵌套的闭合标签，JSX 可以让组件的结构和组件之间的关系看上去更加清晰。</p><p><strong>JSX 语法</strong></p><ul><li><strong>类似 HTML</strong>：可以嵌套，可以自定义属性</li><li><strong>JavaScript 表达式</strong></li><li><strong>样式</strong>：内联样式不是字符串，而是对象</li><li><strong>注释</strong>：标签字节点内的注释应该写在 <code>&#123;&#125;</code> 内</li><li><strong>数组</strong>：数组会自动展开。注意，数组中每一项元素需要添加 key 属性</li></ul><h3 id="JSX-常用语法"><a href="#JSX-常用语法" class="headerlink" title="JSX 常用语法"></a>JSX 常用语法</h3><h4 id="类似-HTML"><a href="#类似-HTML" class="headerlink" title="类似 HTML"></a>类似 HTML</h4><p>JSX 与 HTML 非常相似，可以嵌套多个 HTML 标签，也可以使用大部分符合 HTML 规范的属性，比如 style。如果往 HTML 中传入了 HTML 规范里没有的属性， React 不会显示它们，但是可以通过加上 <code>data-</code> 前缀的办法自定义属性。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>类似 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">data-attribute</span>=<span class="hljs-string">&quot;demo1&quot;</span>&gt;</span>可以嵌套，可以自定义属性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：因为 JSX 终究还是 JavaScript ，而 <code>class</code>和 <code>for</code> 又是 JavaScript 的保留字，所有尽管 JSX 中的 HTML 标签大多数和 HTML 规范的一致，但是 <code>class</code>和<code>for</code> 这两个属性在 JSX 中需要写成 <code>className</code>和<code>htmlFor</code>。</p></blockquote><h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>JSX 允许在闭合标签中使用 JavaScript 表达式，但是要被<code>&#123;&#125;</code>包裹。 JavaScript 表达式要求必须有返回值，因此无法直接使用 <code>if else</code> 语句，但是可以使用三元操作表达式以及 <code>||</code> 和 <code>&amp;&amp;</code> 这样的比较运算符来书写。如果确实需要使用 <code>if else</code> 语句，可以将其卸载函数中，然后在 <code>&#123;&#125;</code> 中调用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo2</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;JSX&#x27;</span>;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">func</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">if</span>(name)&#123;<br>      result += <span class="hljs-string">&#x27;world&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result += <span class="hljs-string">&#x27;world&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br>  &#125;;<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>JavaScript 表达式<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello &#123;name || &#x27;world&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;name</span> ? &#x27;<span class="hljs-attr">class-a</span>&#x27; <span class="hljs-attr">:</span> &#x27;<span class="hljs-attr">class-b</span>&#x27;&#125;&gt;</span>hello &#123;name &amp;&amp; &#x27;world&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;func()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>总体来说，样式分为内联式、内嵌式、链接式等，这里要讲解的是内联样式的写法。与 HTML 相似，JSX 中的内联样式也可以通过 <code>style</code> 属性来定义，但属性值不能是字符串而必须是对象，而且要注意对象的属性名需要使用驼峰命名法，例如需要把 <code>font-size</code> 写成 <code>fontSize</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo3</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>样式<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span>&#x27;<span class="hljs-attr">red</span>&#x27;,<span class="hljs-attr">fontSize:</span>&#x27;<span class="hljs-attr">14px</span>&#x27;&#125;&#125;&gt;</span>内联样式不是字符串，而是对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span> <br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>在 JSX 中添加注释非常简单，只需要注意将标签字节点内的注释写在 <code>&#123;&#125;</code> 中就可以了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo4</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>注释<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">      &#123;/* 注释。..*/&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标签字节点内注释应该写在打括号中<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>JSX 中的数组会自动展开所有成员。但是需要注意，如果数组或迭代器中的每一项都是 HTML 标签或组件，那么它们必须要拥有唯一的 <code>key</code> 属性。这样做是为 React 的 DIFF 算法服务的，React 会通过唯一的 <code>key</code> 属性实现最高效的 DOM 更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo5</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> arr= [<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;0&#125;</span>&gt;</span>数组<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span>,<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;1&#125;</span>&gt;</span>数组会自动展开。注意，数组中每一项元素需要添加 key 属性<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span> <br>  ];<br>  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;arr&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HTML-标签-vs-React-组件"><a href="#HTML-标签-vs-React-组件" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签或 React 组件。HTML 使用小写字母的标签名，而 React 组件的标签名首字母需要大写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/App.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JSX 语法<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Demo1</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Demo2</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Demo3</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Demo4</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Demo5</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        ...</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第六章-React-的数据载体：state、props-与-context"><a href="#第六章-React-的数据载体：state、props-与-context" class="headerlink" title="第六章 React 的数据载体：state、props 与 context"></a>第六章 React 的数据载体：state、props 与 context</h2><p><strong>State</strong>：应该成为局部状态或内部状态。</p><p><strong>props</strong>：用于在组件间传递数据，仅支持逐层传递</p><p><strong>context</strong>：用于在组件间传递数据，能够跨级传递</p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>React 组件可以通过在构造函数中初始化内部状态，可以通过<code>this.setState</code>方法更新内部状态，还可以使用<code>this.state</code>获取内部状态。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">super</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>this.setState(&#123;value:this.state.value+1&#125;)&#125;&gt;</span><br><span class="language-xml">          INCREMENT</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        Counter 组件的内部状态</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;JSON.stringify(this.state,null,2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先在构造函数中初始化内部状态，然后给 button 的点击事件注册了一个更新内部状态的方法，最后将内部状态序列化显示在 pre 标签中。</p><p>随着无状态函数（无状态函数没有内部状态）的提出和 Redux 的使用，内部状态的使用正在逐渐减少。但是内部状态在非全局的数据管理更新中仍扮演着重要的角色。</p><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>props 就是属性的意思</p><h4 id="使用-props"><a href="#使用-props" class="headerlink" title="使用 props"></a>使用 props</h4><p>向一个组件传递 props 的方法是将数据卸载组件标签的属性中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Counter</span><br>&lt;<span class="hljs-title class_">Counter</span> value=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">value</span>&#125;/&gt;<br></code></pre></td></tr></table></figure><p>组件怎么获取传递过来的 props 呢？在无状态函数编写的组件中获取 props 非常简单。只需要将 props 作为参数传入组件即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Counter</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Content</span>(<span class="hljs-params">props</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content 组件的 props.value:&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用类编写的组件中，需要通过 this.props 获取 props 。this 是组件实例。</p><h4 id="验证-Props"><a href="#验证-Props" class="headerlink" title="验证 Props"></a>验证 Props</h4><p>验证 props 需要用到 React.PropTypes，它提供很多验证器（validator）来验证传入的数据是否合法。当想 props 传入非法数据时，控制台会抛出警告。</p><p>PropTypes 提供的验证器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//1.JavaScript 基本数据类型</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">array</span><span class="hljs-comment">//数组</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">bool</span><span class="hljs-comment">//布尔值</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">func</span><span class="hljs-comment">//方法</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">number</span><span class="hljs-comment">//数字</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">object</span><span class="hljs-comment">//对象</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">string</span><span class="hljs-comment">//字符串</span><br><span class="hljs-comment">//2. 可以渲染为子节点的对象</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">node</span><span class="hljs-comment">//节点</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">element</span><span class="hljs-comment">//React 组件</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">instanceOf</span>(<span class="hljs-title class_">Message</span>)<span class="hljs-comment">//指定类的实例</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">oneOf</span>([<span class="hljs-string">&#x27;News&#x27;</span>,<span class="hljs-string">&#x27;Photos&#x27;</span>])<span class="hljs-comment">//只接受指定的值</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">oneType</span>([<br>  <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">string</span>,<br>  <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">number</span>,<br>  <span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">instanceOF</span>(<span class="hljs-title class_">Messgae</span>)<br>])<span class="hljs-comment">//多个对象中的一个</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">arrayOf</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">number</span>)<span class="hljs-comment">//指定类型组成的数组 [1,2,3]</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">objectOf</span>(<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">number</span>)<span class="hljs-comment">//指定类型的属性构成的对象</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-title function_">shape</span>(&#123;<br>  <span class="hljs-attr">color</span>:<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">string</span>,<br>  <span class="hljs-attr">fontSize</span>:<span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">number</span><br>&#125;)<span class="hljs-comment">//符合指定格式的对象</span><br><span class="hljs-title class_">React</span>.<span class="hljs-property">PropTyes</span>.<span class="hljs-property">func</span>.<span class="hljs-property">isRequeired</span><span class="hljs-comment">//任意类型加上 isRequeired 使其不可为空</span><br><span class="hljs-comment">//11 自定义验证器，如果验证失败需要返回一个 Error 对象，不用直接 console.warn 或抛出异常，因为这样的话 oneOfType 会失效</span><br><span class="hljs-keyword">function</span>(<span class="hljs-params">props,propName,componentName</span>)&#123;<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/matchme/</span>.<span class="hljs-title function_">test</span>(propName))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Validation failed!&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Counter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>,&#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;React&#x27;</span><br>...<br><span class="hljs-title class_">Content</span>.<span class="hljs-property">propTyoes</span>=&#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="组合使用-state-与-props"><a href="#组合使用-state-与-props" class="headerlink" title="组合使用 state 与 props"></a>组合使用 state 与 props</h4><p>这里用了一个 Counter 组件更新 state.value，然后将更新的 state.value 通过 props 传递给 Content 组件，最后 Content 组件在每次更新时都渲染出新接受到的 props.value</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Counter</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>,&#123;<span class="hljs-title class_">Component</span>,<span class="hljs-title class_">PropTyoes</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;React&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Content</span>(<span class="hljs-params">props</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Content 组件的 props.value:&#123;props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-title class_">Content</span>.<span class="hljs-property">propTyoes</span>=&#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> extend <span class="hljs-title class_">Component</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<br>      <span class="hljs-attr">value</span>:<span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>this.setState(&#123;value:this.state.value+1&#125;)&#125;&gt;</span><br><span class="language-xml">          INCREMENT</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        Counter 组件的内部状态；</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>&#123;JSON.stringify(this.state,null,2)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Content</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;/</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>context 在 React 中并不常用到，后面的 react-redux 会用到 context。现在先拿出之前的 props 和 context 做比较。</p><h4 id="使用-props-传递数据"><a href="#使用-props-传递数据" class="headerlink" title="使用 props 传递数据"></a>使用 props 传递数据</h4><p>编写三个组件，分别是 Button 、Message 和 MessageList，在 MessageList 中定义一个 color 变量，通过 props 将 color 传递给 Button 组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Messagelist1</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">PropTypes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">无状态函数组件 Button</span><br><span class="hljs-comment">接收 props</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">props.color</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">      &#123;props.children&#125;&#123;/*这里的 props.children 其实是父组件插在组件标签中的东西*/&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-comment">//验证 props</span><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">无状态函数组件，接收 props，</span><br><span class="hljs-comment">获取到 props.text，</span><br><span class="hljs-comment">并把 props.color 传递给 Button 组件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;props.text&#125; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;props.color&#125;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-comment">//验证 props</span><br><span class="hljs-title class_">Message</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>,<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br><span class="hljs-comment">//父组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MessageList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> color = <span class="hljs-string">&#x27;gray&#x27;</span>;<br>  <span class="hljs-keyword">const</span> messages = [<br>    &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello React&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello Redux&#x27;</span> &#125;<br>  ];<br>  <span class="hljs-keyword">const</span> children = messages.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">message, key</span>) =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;key&#125;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;message.text&#125;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&#123;color&#125;/</span>&gt;</span></span><br>  );<span class="hljs-comment">//这里的 key 虽然没有用到，不过遍历出来的组件需要 Key 来重新排列</span><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>通过 props 将 color 逐层传递给里面的 Button 组件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MessageList</span>;<br></code></pre></td></tr></table></figure><h4 id="使用-context-传递数据"><a href="#使用-context-传递数据" class="headerlink" title="使用 context 传递数据"></a>使用 context 传递数据</h4><p>要使用 context 传递数据，需要两个步骤</p><ol><li>将要传递的数据放在消息列表组件（数据发起位置）的 context 中</li><li>在按钮组件（接收数据的子组件位置）中声明 contextTypes，就可以通过 context 传递数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//src/Messagelist2</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">PropTypes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Button</span>(<span class="hljs-params">props, context</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">background:</span> <span class="hljs-attr">context.color</span> &#125;&#125;&gt;</span>&#123;/*通过 context.color 拿到数据*/&#125;</span><br><span class="language-xml">      &#123;props.children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">children</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br><br><span class="hljs-title class_">Button</span>.<span class="hljs-property">contextTypes</span> = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<span class="hljs-comment">//如果没有 contextTypes，context 将会是空值</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Message</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      &#123;props.text&#125; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>&#123;/*和之前不一样，这里没把 props 传递给 Button*/&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-title class_">Message</span>.<span class="hljs-property">propTypes</span> = &#123;<br>  <span class="hljs-attr">text</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">getChildContext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;gray&#x27;</span> &#125;;<br>  &#125;<span class="hljs-comment">//和之前不同是多了这个函数，fuan 返回值是要传递给 Button 的 color 变量</span><br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> messages = [<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello React&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Hello Redux&#x27;</span> &#125;<br>    ];<br>    <span class="hljs-keyword">const</span> children = messages.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">message, key</span>) =&gt;</span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;key&#125;</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&#123;message.text&#125;/</span>&gt;</span></span><br>    );<span class="hljs-comment">//这次没有传递 color</span><br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>通过 context 将 color 跨级传递给里面的 Button 组件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          &#123;children&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">MessageList</span>.<span class="hljs-property">childContextTypes</span> = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span><br>&#125;;<span class="hljs-comment">//多了一个这个验证，没有这个是无法在组件中使用 getChildContext()</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MessageList</span>;<br></code></pre></td></tr></table></figure><h2 id="第七章-React-的两个对象：ReactElement-与组件实例"><a href="#第七章-React-的两个对象：ReactElement-与组件实例" class="headerlink" title="第七章 React 的两个对象：ReactElement 与组件实例"></a>第七章 React 的两个对象：ReactElement 与组件实例</h2><p><strong>ReactElement</strong>：就是传说中的“虚拟 DOM”，本质是个不可变的对象</p><p><strong>组件实例</strong>：React 组件类的实例化对象，它通常用来管理内部状态和处理生命周期函数</p><h3 id="ReactElement"><a href="#ReactElement" class="headerlink" title="ReactElement"></a>ReactElement</h3><h4 id="JSX-中的闭合标签是-ReactElement"><a href="#JSX-中的闭合标签是-ReactElement" class="headerlink" title="JSX 中的闭合标签是 ReactElement"></a>JSX 中的闭合标签是 ReactElement</h4><blockquote><p>注意：只有在 React 中使用 JSX，闭合标签才是 ReactElement，在其他框架（比如 Vue）中使用 JSX 就不是 ReactElement</p></blockquote><h4 id="ReactElement-是什么"><a href="#ReactElement-是什么" class="headerlink" title="ReactElement 是什么"></a>ReactElement 是什么</h4><p>ReactElement 是一个不可变的普通对象，它描述了一个组件的实例或一个 DOM 节点。它只包含组件的类型（比如 h1，或者 APP）、属性以及子元素等信息。</p><p>ReactElement 不是组件是实例，不能在 ReactElement 中调用 React 组件的任何方法。它只是告诉 React 你想显示什么。</p><h4 id="ReactElement-的两种类型"><a href="#ReactElement-的两种类型" class="headerlink" title="ReactElement 的两种类型"></a>ReactElement 的两种类型</h4><ol><li>type 属性是一个字符串时，它表示一个 DOM 节点，它的 props 属性对应 DOM 节点的属性</li><li>type 属性是一个表示组件的函数或者类，它表示一个组件</li></ol><h4 id="React-组件的渲染流程"><a href="#React-组件的渲染流程" class="headerlink" title="React 组件的渲染流程"></a>React 组件的渲染流程</h4><p>当 React 遇到表示组件的 ReactElement 时，它会给这个 ReactElement 表示的组件一些 props（有时也包括 context），然后问该组件渲染的 ReactElement 是什么。如果渲染的仍然是表示组件的 ReactElement，那么将会一直吻下去，直到了解所以组件要渲染的 DOM 元素为止，此时，React 就可以使用 react-dom 或者 react-native 这样的渲染模快来执行渲染。</p><h3 id="组件实例"><a href="#组件实例" class="headerlink" title="组件实例"></a>组件实例</h3><p>大多数情况下，我们无需直接创建组件实例，React 会负责创建它。ReactDOM.reder 返回的就是组件实例。除此之外，组件的 this 也指向组件实例。利用 Refs 可以获取组件实例。</p><blockquote><p>注意：无状态函数是没有实例化对象的，因此无法使用生命周期函数，也没有内部状态。所以当你的组件需要使用生命周期函数或者内部状态，请使用类编写该组件。</p></blockquote><h4 id="组件、ReactElement-与组件实例的区别"><a href="#组件、ReactElement-与组件实例的区别" class="headerlink" title="组件、ReactElement 与组件实例的区别"></a>组件、ReactElement 与组件实例的区别</h4><p>组件是一个函数或类，它决定了如何把数据变成视图；ReactElement 只是一个普通的对象，它描述了组件实例或 DOM 节点；组件实例则是组件类的实例化对象。</p><h4 id="组件实例的生灭：声明周期函数"><a href="#组件实例的生灭：声明周期函数" class="headerlink" title="组件实例的生灭：声明周期函数"></a>组件实例的生灭：声明周期函数</h4><ul><li>componentWillMount：在渲染前调用</li><li>componentDidMount：在渲染后调用</li><li>componentWillReceiveProps：在组件接收到一个新的 props 时被调用，这个方法第一次渲染时不会被调用</li><li>shouldComponentUpdate：返回一个布尔值，在组件接收到新的 props 或者 state 时被调用。在初始化时或者使用<code>forceUpdate</code>时不被调用。可以在你确定不需要更新组件时使用。</li><li>componentWillUpadte：在组件接收到新的 props 或者 state 但还没有 render 时被调用。在初始化时不被调用。</li><li>componentDidupdate：在组件完成更新后立即调用。在初始化时不被调用</li><li>componentWillUnmount：在组件从 DOM 中移除的时候立即被调用</li></ul><h4 id="React-组件中的-this"><a href="#React-组件中的-this" class="headerlink" title="React 组件中的 this"></a>React 组件中的 this</h4><p>那些方法的 this 指向组件实例呢？怎么样才能在自定义的组件方法中获得组件实例？</p><p><strong>React 组件的 this 到底是什么？</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> stuffix = <span class="hljs-string">&#x27;被调用，this 指向&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`handler<span class="hljs-subst">$&#123;suffix&#125;</span>`</span>,<span class="hljs-variable language_">this</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`handler<span class="hljs-subst">$&#123;suffix&#125;</span>`</span>,<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handler&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结果是，render() 函数中的 this 指向组件实例，而 handler() 函数中的 this 则是一个 null。</p></blockquote><h4 id="JavaScript-函数中的-this"><a href="#JavaScript-函数中的-this" class="headerlink" title="JavaScript 函数中的 this"></a>JavaScript 函数中的 this</h4><p>JavaScript 函数中的 this 不是在函数声明的时候而是在函数运行的时候定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> student=&#123;<br>  <span class="hljs-attr">speak</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br>&#125;<br>student.<span class="hljs-title function_">speak</span>()<br><span class="hljs-keyword">var</span> studentSpeak = student.<span class="hljs-property">speak</span><br><span class="hljs-title function_">studentSpeak</span>()<br></code></pre></td></tr></table></figure><p>student.speak() 打印了 student 对象，因为 this 指向 student 对象。而 studentSpeak() 打印了 window，因为 this 指向了 window</p><h4 id="关于-this-绑定"><a href="#关于-this-绑定" class="headerlink" title="关于 this 绑定"></a>关于 this 绑定</h4><p>React.createClass 可以自动绑定所有的方法，使 this 指向组件的实例化对象。在类组件中，上下文转换的自动权交给了开发者，通常我们在构造函数中绑定方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>    <span class="hljs-variable language_">super</span>(props)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">handler</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br>  <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;handler&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>,<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span>(<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handler&#125;</span>&gt;</span>Hello world<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 this.handler() 绑定上下文为组件实例后， this.handler() 中的 this 将指向组件实例。此处也可以用箭头函数或者在属性中临时绑定，不过 Aribnb 编码规范并不推荐在 JSX 的属性中使用 bind 临时绑定，所以尽量在构造函数中进行绑定或者使用箭头函数。</p><h2 id="第八章-初识-Redux"><a href="#第八章-初识-Redux" class="headerlink" title="第八章 初识 Redux"></a>第八章 初识 Redux</h2><p>Action、reducer、state、store 是 Redux 中的一些基本概念。</p><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>Action 本质是 JavaScript 普通对象，action 内使用一个字符串类型的 type 字段来表示将要执行的动作。除了 type 字段外，action 对象的结构完全由你决定。</p><p>发起 ation：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">store.<span class="hljs-title function_">dispatch</span>(&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;INCREMENT&#x27;</span>&#125;)<br>store.<span class="hljs-title function_">dispatch</span>(&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;DECREMENT&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>其中{type:’DECREMENT’}和{type:’INCREMENT’}就是 action</p><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>Reducer 是个形式为 (state,action)&#x3D;&gt;state 的纯函数，描述了 action 如何把 state 转变成下一个 state。reducer 是一个累加器函数，它的参数是上一个累加值和数组当前元素，然后通过计算得到当前的累加值。在 Redux 中，state 就是那个累加值，action 就是数组当前的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">state = <span class="hljs-number">0</span>,action</span>)&#123;<br>  <span class="hljs-keyword">switch</span>(action.<span class="hljs-property">type</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;INCREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;DECREMENT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> state - <span class="hljs-number">1</span>;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>State 可以是任何类型、数组、对象等等，唯一要点是当 state 变化时需要返回全新的对象，而不是修改传入的参数。</p><h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>纯函数不能访问外部变量，只能接收传入参数。纯函数不能修改参数，因为这样做可能会把一些信息通过传入参数夹带到外界。</p><blockquote><p>还不完整</p></blockquote><h4 id="不能修改参数-state"><a href="#不能修改参数-state" class="headerlink" title="不能修改参数 state"></a>不能修改参数 state</h4><p>在 JavaScript 中对象是引用类型，修改了参数 state，变化前后的两个 state 将会指向同一个地址，react-redux 就会认为这是两个相同的 state，因而不会执行渲染。</p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><h4 id="职能"><a href="#职能" class="headerlink" title="职能"></a>职能</h4><p>store 是一个全局对象，作用是将 action 和 reducer 以及 state 联系在一起。</p><ul><li>维持应用的 state</li><li>提供 getState() 方法获取 state</li><li>提供 dispatch(action) 方法更新 state</li><li>通过 subscribe(listener) 注册监听器</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">let</span> store = <span class="hljs-title function_">createStore</span>(counter)<br><span class="hljs-comment">//第一个参数是 reducer</span><br><span class="hljs-comment">//createStore 可以将初始 state 作为第二个参数传入</span><br></code></pre></td></tr></table></figure><h4 id="获取与监听"><a href="#获取与监听" class="headerlink" title="获取与监听"></a>获取与监听</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(counter)<br><span class="hljs-keyword">let</span> currentValue = store.<span class="hljs-title function_">getState</span>()<span class="hljs-comment">//获取 state</span><br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-keyword">const</span> previousValue = currentValue<br>  currentValue = store.<span class="hljs-title function_">getState</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;pre state:&#x27;</span>,previousValue,<span class="hljs-string">&#x27;next state&#x27;</span>,currentValue)<br>  <br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="发起-action"><a href="#发起-action" class="headerlink" title="发起 action"></a>发起 action</h4><p>Store 通过 dispatch(action) 方法发起 action，更新 state</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx">store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;INCREMENT&#x27;</span>)<br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;DECREMENT&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>当发起 action 后，就将 action 传进了 store，使用 reducer 纯函数执行更新。修改 state 唯一方法就是 dispatch(action)，所有的变化都将进过这条路，我们把中间件放在 dispatch 这条路上。</p></blockquote><h2 id="第九章-Action-创建函数与-Redux-Thunk-中间件"><a href="#第九章-Action-创建函数与-Redux-Thunk-中间件" class="headerlink" title="第九章 Action 创建函数与 Redux Thunk 中间件"></a>第九章 Action 创建函数与 Redux Thunk 中间件</h2><h3 id="Action-创建函数"><a href="#Action-创建函数" class="headerlink" title="Action 创建函数"></a>Action 创建函数</h3><h4 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;INCREMENT&#x27;</span>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">decrement</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;DECREMENT&#x27;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="发起"><a href="#发起" class="headerlink" title="发起"></a>发起</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>())<br>store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">decrement</span>())<br><span class="hljs-comment">//or</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">boundIncrement</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>());<br><span class="hljs-title function_">boundIncrement</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">boundDecrement</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">decrement</span>());<br><span class="hljs-title function_">boundDecrement</span>();<br></code></pre></td></tr></table></figure><h3 id="Redux-Thunk-中间件"><a href="#Redux-Thunk-中间件" class="headerlink" title="Redux Thunk 中间件"></a>Redux Thunk 中间件</h3><p>这个中间件能让 action 创建函数先不返回 action，而是返回一个函数。通过函数处理后再 dispatch。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//全部的 action 函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;INCREMENT&#x27;</span><br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">decrement</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;DECREMENT&#x27;</span><br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">incrementIfOdd</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch, getState</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> value = <span class="hljs-title function_">getState</span>();<br><span class="hljs-keyword">if</span> (value % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>());<br>&#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">incrementAsync</span>(<span class="hljs-params">delay = <span class="hljs-number">1000</span></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">dispatch</span> =&gt;</span> &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">increment</span>());<br>&#125;, delay);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="安装激活"><a href="#安装激活" class="headerlink" title="安装激活"></a>安装激活</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-thunk&#x27;</span>;<br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(counter, <span class="hljs-title function_">applyMiddleware</span>(thunk));<br></code></pre></td></tr></table></figure><hr><blockquote><p>本笔记是我读 《React 与 Redux 开发实例精解》基础篇的学习笔记，所以笔记中大量摘抄了原书的内容，笔记中的代码来源于书作者的开源项目 <a href="https://github.com/lewis617/react-redux-book">react-redux-book</a>。往后我还会在博客里更新更多的读书笔记，当然读书笔记的内容并不完善，如果需要详细内容请购买《React 与 Redux 开发实例精解》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
      <tag>Redux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs 爬虫——知乎专栏</title>
    <link href="/posts/89eb6f87.html"/>
    <url>/posts/89eb6f87.html</url>
    
    <content type="html"><![CDATA[<p>知乎是一个好地方，最近翻阅<strong>知乎</strong>官网，发现<strong>知乎专栏</strong>藏的很隐蔽，如果不知道专栏名，只能在搜索中找关键词。而对于我们不知道的领域，我们几乎是认为知乎是没有这方面的专栏的。关于这个会用 Google 的朋友应该会知道怎么样在网上找到所有的<strong>知乎专栏</strong></p><span id="more"></span><h2 id="爬虫诞生"><a href="#爬虫诞生" class="headerlink" title="爬虫诞生"></a>爬虫诞生</h2><p>作为一个收藏癖，看到好东西不藏在本地就不爽，虽然存起来大多时候是忘记它的存在的。再者，最近发现有些知乎专栏的文章确实不错，就萌生了爬专栏文章的念头。在 github 上找了很久，发现没有爬专栏的爬虫，只找到爬某用户回答的爬虫。模仿别人的爬虫，于是这个 <a href="https://github.com/bubao/GetZhiHuZhuanLan">爬虫</a> 就诞生了。</p><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><p>其实我也不太明白这个爬虫的原理，四个<code>*.js</code>文件，只有一个是我自己写的，其他的都是网上找的，反正就是能用就对了 (⊙v⊙)。</p><p>废话不多说了，源码送上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> request = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;request&quot;</span>);<br><span class="hljs-keyword">const</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cheerio&quot;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./config.js&quot;</span>);<br><span class="hljs-keyword">const</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./download.js&quot;</span>);<br><span class="hljs-keyword">const</span> zhihuId = config.<span class="hljs-property">zhihuId</span>;<br><span class="hljs-keyword">const</span> dir = <span class="hljs-string">`<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>;<br><span class="hljs-keyword">const</span> url = <span class="hljs-string">`https://zhuanlan.zhihu.com/<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;---------start----------------&quot;</span>);<br>fs.<span class="hljs-title function_">exists</span>(dir, <span class="hljs-keyword">function</span>(<span class="hljs-params">exists</span>) &#123;<br>    <span class="hljs-keyword">if</span> (exists) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dir + <span class="hljs-string">&quot;文件夹存在&quot;</span>);<br>    <span class="hljs-keyword">else</span> &#123;<br>        fs.<span class="hljs-title function_">mkdir</span>(dir, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">if</span> (err) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;创建&quot;</span> + dir + <span class="hljs-string">&quot;文件夹成功&quot;</span>);<br>        &#125;);<br>    &#125;<br>&#125;);<br>server.<span class="hljs-title function_">download</span>(url, <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>        <span class="hljs-comment">//console.log(data);</span><br><br>        <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data);<br><br>        <span class="hljs-keyword">var</span> postsCount = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>($(<span class="hljs-string">&quot;textarea#preloadedState&quot;</span>).<span class="hljs-title function_">text</span>())<br>            .<span class="hljs-property">columns</span>[<span class="hljs-string">`<span class="hljs-subst">$&#123;zhihuId&#125;</span>`</span>].<span class="hljs-property">postsCount</span>;<br>        <span class="hljs-comment">//console.log(postsCount)</span><br>        <span class="hljs-comment">//console.log(&quot;done&quot;);</span><br><br>        <span class="hljs-title function_">loopdown</span>(postsCount);<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loopdown</span>(<span class="hljs-params">postsCount</span>) &#123;<br>    <span class="hljs-comment">// body...</span><br>    <span class="hljs-keyword">var</span> posts = postsCount % <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">var</span> times = (postsCount - posts) / <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= times; i++) &#123;<br>        <span class="hljs-keyword">var</span> urlp = <span class="hljs-string">`https://zhuanlan.zhihu.com/api/columns/<span class="hljs-subst">$&#123;zhihuId&#125;</span>/posts?limit=20&amp;offset=<span class="hljs-subst">$&#123;i *</span></span><br><span class="hljs-subst"><span class="hljs-string">            <span class="hljs-number">20</span>&#125;</span>`</span>;<br><br>        request<br>            .<span class="hljs-title function_">get</span>(urlp, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, res, body</span>) &#123;<br>                <span class="hljs-comment">// console.log(err);</span><br>                <span class="hljs-comment">// console.log(res);</span><br>                <span class="hljs-comment">//console.log(body);</span><br>            &#125;)<br>            .<span class="hljs-title function_">pipe</span>(fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dir&#125;</span>/<span class="hljs-subst">$&#123;i&#125;</span>.json`</span>));<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dir&#125;</span>/<span class="hljs-subst">$&#123;i&#125;</span>.json`</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>fs</code>模块用来创建文件夹和读写<code>*.json</code>数据</li><li><code>request</code>模块用来获取 api 的内容，并用<code>pipe</code>来写入文件。</li><li><code>cheerio</code>模块用来获取网页中的 DOM，因为 DOM 里面有部分我需要的数据</li></ul><p>其他的就没什么了。值得一提，的是知乎的 api 一直最多只支持读取 20 条数据，所以我用<code>console.log()</code>打印我有多少<code>*.json</code>文件，(<code>*.json</code>文件个数-1)_20&lt;得到的文章数&lt;&#x3D;<code>_.json</code>文件个数、* 20。虽然我也打印了总的文章数在控制台。</p>]]></content>
    
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脏乱房间大作战</title>
    <link href="/posts/38eb2dd9.html"/>
    <url>/posts/38eb2dd9.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210106215250.jpg" alt="脏乱房间大作战"></p><span id="more"></span><blockquote><p>作者：池田曉子<br>出版社：八方出版股份有限公司<br>副标题：超爆笑懶女居家收納術<br>原作名：片づけられない女のためのこんどこそ！片づける技術<br>译者：郭玉梅<br>出版年：2008-7-20<br>页数：152<br>定价：NT$250<br>装帧：平装<br>ISBN: 9789867024886</p></blockquote><p>今天整理电脑资料，翻到了一本名为 <a href="https://book.douban.com/subject/3195465/">《脏乱房间大作战》</a> 的整理图书，不记得在哪下载的这本书，点开看发现是绘本，于是很快我就把这本书看完了。其中这本书有张测试表，我发现自己房间还是很整洁的了，问题是房间大多数时候不是我整理的。如果你完成那张表格后很惶恐，那就赶紧跟着这位幽默，还会画画的日本干物女一起整理自己的房间。</p><ol><li>从【基地】开始动手</li><li>进攻厨房</li><li>把每天必用之物收放在基地</li><li>丢掉至今都未曾使用的东西</li></ol><p>那么我们开始整理吧</p><h2 id="从基地开始动手"><a href="#从基地开始动手" class="headerlink" title="从基地开始动手"></a>从基地开始动手</h2><p>动手打扫之前，先整理出一个空间做基地，这里就是你开始革房间“命”的根据地了。整理房间最重要的一个步骤，就是减少屋内的杂物，说白了就是<strong>扔扔扔</strong>。总之，现在我们有一块地方是干净整洁的了，就是这个 feel 倍爽，清空的基地以后会有大用处哦。</p><h2 id="进攻厨房"><a href="#进攻厨房" class="headerlink" title="进攻厨房"></a>进攻厨房</h2><p><strong>整理的要领，就是从不需要费脑子的地方开始整理。</strong></p><p>厨房是最不需要脑子慎重考虑扔什么的地方，第二步我们就从这开始。</p><p>处理完厨房的橱柜台面，我们要在这台面上整理厨房的杂物了。准备好超大袋子在身旁，开始<strong>扔扔扔</strong>大作战。我们开始对厨房的物品分类：</p><h3 id="不容易忘掉的东西"><a href="#不容易忘掉的东西" class="headerlink" title="不容易忘掉的东西"></a>不容易忘掉的东西</h3><blockquote><p>这些东西可以收放在隐秘的地方</p></blockquote><p><strong>经常用到的食材</strong><br>米油盐酱醋茶<br><strong>每天都会用到的东西</strong><br>清洁工具<br><strong>需要时才拿出来的东西</strong><br>特殊食材加工工具</p><h3 id="容易忘掉的东西"><a href="#容易忘掉的东西" class="headerlink" title="容易忘掉的东西"></a>容易忘掉的东西</h3><blockquote><p>用不到的或是不太重要的东西，收在隐蔽的地方，以后绝对不会拿出来</p></blockquote><p><strong>一时心动就买的食材</strong><br>糯米、豆类、香料、罐头、盒装豆腐<br><strong>一时心动就买物品</strong><br>所谓“平时用不到”，就是不需要，如果不放在显眼的地方。久而久之就会遗忘。这类东西该清理出厨房了。</p><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>厨房如果在当时盖房子设计时预留了储物柜，那就再好不过了，我家的厨房，卫生间，餐厅都设计了嵌入墙体的储物柜。如果没有预先设计好的橱柜，那就买一个储物柜，用来放厨房的用品。</p><p>每天需要用的东西自然就放在容易拿到的地方，厨具什么的，就挂在墙上好了，大米就用桶装好放在橱柜下面。</p><p>每天要用到的调料，就放在嵌入墙体的储物柜里，蒜头，生姜这类东西用一个小篮子盛放，毕竟堆起来很乱。</p><p>需要时才拿出来用的厨具，就放在橱柜里好了，橱柜必须有特定的位置专门放这些厨具，以免到时候需要的时候，要翻橱柜里所有的东西才找得到想要的。</p><p>食材买当天的量，当天的蔬菜肉类都放在冷冻室里，这样能保证每天都吃到新鲜的食物。备用干货食品，用保鲜袋密封好，放在储物柜里。</p><h2 id="把每天必用之物收放在基地"><a href="#把每天必用之物收放在基地" class="headerlink" title="把每天必用之物收放在基地"></a>把每天必用之物收放在基地</h2><p>从生活必需品开始整理，这样就不需要考虑扔什么，只需要在房间里找需要什么。基地首先需要一把椅子和一张桌子，这样我们就能保证整理的时候，能不耽误工作和学习了。</p><p>又来开始分类了：</p><p>对于不能确定以后是否能用到的东西，先全部丢进大袋子中，以后有空再分类，现在重点是放在整理必需品上。常用的东西，单独放在固定位置，偶尔用到的东西收在袋子里，这个等整理好必需品再做分类。</p><p>我们整理的思路是这样子的：整理好必需品放在固定的位置；再分类偶尔用到的东西，也得放在固定的位置；最后打开大袋子，分类那些我们决定去留的东西了。</p><h2 id="丢掉至今都未曾使用的东西"><a href="#丢掉至今都未曾使用的东西" class="headerlink" title="丢掉至今都未曾使用的东西"></a>丢掉至今都未曾使用的东西</h2><p>留下常用和比用的东西，未曾使用的东西，舍不得扔掉，堆在屋子里，有也等于垃圾。如果觉得还能用，自己又用不上，那可以放在网上转手给需要的人。</p><h2 id="列典籍-有定处-读看毕-还原处"><a href="#列典籍-有定处-读看毕-还原处" class="headerlink" title="列典籍　有定处　读看毕　还原处"></a>列典籍　有定处　读看毕　还原处</h2><blockquote><p>为了防止世界被破坏，为了守护世界和平，贯彻爱与真实的邪恶，可爱又迷人的反派角色，我，五藏，我，小次郎，我们是穿梭在宇宙中的火箭队，白洞，白色的明天等着我们，喵~————《宠物小精灵》大反派火箭队出场词。</p></blockquote><p>忙碌一天，房间终于窗明几净了，为了防止房间被破坏，为了维护房间秩序，我们需要把《弟子规》中 4 句 12 字的“ 列典籍　有定处　读看毕　还原处”贯彻到底。每件物品用完后，要放回原处；带会家的东西，要立即分类放好；看到“脏乱差”要马上打扫，保持房间的整洁。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>煮酒探西游</title>
    <link href="/posts/243c6b1f.html"/>
    <url>/posts/243c6b1f.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/bubao/picgo_db_tiny@master/img/20210106213554.jpeg" alt="煮酒探西游封面"></p><span id="more"></span><blockquote><p>作者：吴闲云<br>出版社：河北人民出版社<br>副标题：吴闲云详解西游记<br>出版年：2013-7-1<br>页数：302<br>定价：35.00 元<br>装帧：平装<br>丛书：吴闲云解读名著系列<br>ISBN: 9787202078396</p></blockquote><p>这本书其实我在喜马拉雅就已经听完了，最近 ireader 正好日推 <a href="https://book.douban.com/subject/24872789/">《煮酒探西游》</a>，我听的是 <a href="http://www.ximalaya.com/zhubo/3205937/">嘉庆说故事</a> 播讲的 <a href="http://www.ximalaya.com/3205937/album/218925">《闲话西游》</a>。</p><p>我开始知道《西游记》是 86 版的“经典”电视剧，那时候几乎是“每逢佳节西游记”。电视剧看不过瘾，就从同学哪里借来原著，那时候才小学五、六年级，自然没把原著啃下去。知道现在我都没再拿起原著西游记。</p><p>在我脑海里，西游记错漏百出，为什么孙悟空神通广大，敢大闹天宫，为何取经路上却打不过那些神仙的坐骑、宠物和童子？为什么孙悟空在八卦炉里被老君用三味真火炼就火眼金睛，却怕红孩儿的三味真火？红孩儿没有犄角，生得如此俊俏，真的是牛魔王的孩子？铁扇公主怎么会有老君的芭蕉扇？…… 诸如此类的纰漏，让我长大后一直没再看 86 版《西游记》。</p><p>本来我是不会在喜马拉雅听《闲话西游》的，我每天晚上都会用喜马拉雅听《诗展侃历史》，有一期就说到了西游记，这才引起了我再探西游记的兴趣，于是在喜马拉雅上听《闲话西游》。</p><p>这本书大概是因为 86 版西游记才有的书，86 版西游记是改良原著的，所以很多东西看似不合逻辑，我还曾认为西游记这种败笔的作品怎么能成为四大名著之一呢？然而真相是，“我看的是假的西游记”，没有“可能”。如果没时间品原著解惑，大可读这本书来弥补。没有书？那可以去喜马拉雅听 <a href="http://www.ximalaya.com/3205937/album/218925">《闲话西游》</a>。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感想</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易云音乐插件</title>
    <link href="/posts/fe7ef34e.html"/>
    <url>/posts/fe7ef34e.html</url>
    
    <content type="html"><![CDATA[<p>hexo 上使用网易云音乐插件，hexo-tag-netease-music 项目 README.md 翻译。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>To install, run the following command in the root directory of hexo:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-tag-netease-music --save<br></code></pre></td></tr></table></figure><p>在共有配置文件_config.yml 里添加插件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-tag-netease-music</span><br></code></pre></td></tr></table></figure><h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><h3 id="iframe-插件大小"><a href="#iframe-插件大小" class="headerlink" title="iframe 插件大小"></a>iframe 插件大小</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">width range<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">260</span><span class="hljs-punctuation">,</span> <span class="hljs-number">510</span><span class="hljs-punctuation">]</span><br><br>height range：<span class="hljs-punctuation">[</span><span class="hljs-number">190</span><span class="hljs-punctuation">,</span> <span class="hljs-number">500</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="flash-插件大小"><a href="#flash-插件大小" class="headerlink" title="flash 插件大小"></a>flash 插件大小</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">small<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>width<span class="hljs-punctuation">:</span><span class="hljs-number">278</span><span class="hljs-punctuation">,</span> height<span class="hljs-punctuation">:</span> <span class="hljs-number">32</span><span class="hljs-punctuation">&#125;</span><br><br>medium<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>width<span class="hljs-punctuation">:</span><span class="hljs-number">320</span><span class="hljs-punctuation">,</span> height<span class="hljs-punctuation">:</span> <span class="hljs-number">66</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在博客文档中插入以下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>% nemusic $musicID $widget(flash|iframe) $auto(<span class="hljs-number">0</span>|<span class="hljs-number">1</span>) (<span class="hljs-punctuation">[</span>JSONsize<span class="hljs-punctuation">]</span>|(small|medium)) %<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Example-of-flash-widget"><a href="#Example-of-flash-widget" class="headerlink" title="Example of flash widget"></a>Example of flash widget</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>% nemusic <span class="hljs-number">251613</span> flash <span class="hljs-number">0</span> &#x27;medium&#x27; %<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://music.163.com/style/swf/widget.swf?sid=251613&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;340&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;86&quot;</span>  <span class="hljs-attr">allowNetworking</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">embed</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Example-of-iframe-widget"><a href="#Example-of-iframe-widget" class="headerlink" title="Example of iframe widget:"></a>Example of iframe widget:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&#123;% nemusic 251613 iframe 0 &#x27;&#123;&quot;width&quot;:320, &quot;height&quot;:66&#125;&#x27; %&#125;<br></code></pre></td></tr></table></figure><div class="netease-music-container"><div class="netease-music-inner"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=320 height=86 src="http://music.163.com/outchain/player?type=2&id=251613&auto=0&height=66"></iframe></div></div><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output:"></a>Output:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">320</span> <span class="hljs-attr">height</span>=<span class="hljs-string">86</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://music.163.com/outchain/player?type=2&amp;id=251613&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux 安装 Remarkable</title>
    <link href="/posts/5c713514.html"/>
    <url>/posts/5c713514.html</url>
    
    <content type="html"><![CDATA[<p>本来单纯写 <code>*.md</code> 文件是不需要 markdown editor 的，然而需要把 <code>*.md</code> 转成 <code>*.html</code> 和 <code>*.PDF</code> 就麻烦了，上网找了一下，发现 Remarkable 能转，所以找了下 AUR，开始弄</p><span id="more"></span><h3 id="1-查找-package-并下载"><a href="#1-查找-package-并下载" class="headerlink" title="1. 查找 package 并下载"></a>1. 查找 package 并下载</h3><p>这个就不多说了，去 ArchLinux 官网 Remarkable 找就行了</p><h3 id="2-解压包"><a href="#2-解压包" class="headerlink" title="2. 解压包"></a>2. 解压包</h3><p>在终端执行命令解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -zxvf remarkable.tar.gz<br></code></pre></td></tr></table></figure><h3 id="3-修改-package"><a href="#3-修改-package" class="headerlink" title="3. 修改 package"></a>3. 修改 package</h3><p>因为 package 中的地址有错误，把 package 中的 github 地址是 http 头的，明显访问不了 github ，所以要把 http 改成 https</p><h3 id="4-执行打包安装"><a href="#4-执行打包安装" class="headerlink" title="4. 执行打包安装"></a>4. 执行打包安装</h3><p>进入解压好的文件夹中，执行命令就能安装了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">makepkg -sri<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome 默认以 https 访问</title>
    <link href="/posts/7799e91c.html"/>
    <url>/posts/7799e91c.html</url>
    
    <content type="html"><![CDATA[<h2 id="强制-Chrome-浏览器-Https-加密访问网站"><a href="#强制-Chrome-浏览器-Https-加密访问网站" class="headerlink" title="强制 Chrome 浏览器 Https 加密访问网站"></a>强制 Chrome 浏览器 Https 加密访问网站</h2><p>强制 Chrome 浏览器加密访问网站其实也就是强制 Chrome 浏览器 http 重定向到 https，这种技巧对于经常修改 Hosts 的网友可能用处较大些。比如修改 Hosts 后访问 Twitter，多数情况下访问 <a href="http://www.twitter.com/">http://www.twitter.com</a> 是不能访问的，要输入 <a href="https://twitter.com/">https://twitter.com</a> 才行。</p><span id="more"></span><p>本站以前介绍过可以手动输入网址后在账号中设置默认 https 访问，这样点网站内的链接才不会出现“链接被重置”等一些情况，不过现在有更简单实用的方法实现。</p><p>chrome:&#x2F;&#x2F;net-internals 是一个 Chrome 内置的开发者工具，直接在浏览器地址栏输入地址栏输入 chrome:&#x2F;&#x2F;net-internals&#x2F;可打开选项页面。强制 Chrome 浏览器 http 重定向到 https 的方法：</p><ol><li>在地址栏输入地址栏输入 chrome:&#x2F;&#x2F;net-internals</li><li>点倒数第二个 HSTS 标签，在 Add domain 下方的”Domain:”后面输入想强制 Https 访问的网址，如图：</li></ol><p>输入网址后再点 Add 按钮即可。</p><p>设置完成后所有该域名下的子目录都会强制加密访问，如果想删除相关设置，在 Delete domain 下的方”Domain:”后面输入想删除的网址，然后点 delete 按钮即可。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 系统彻底删除 wine 的办法</title>
    <link href="/posts/bc63cdef.html"/>
    <url>/posts/bc63cdef.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>wine 是一个在 linux 下模拟 windows 的东西，不过这个 wine 很难卸载，之前删除不完整，导致应用管理器里面还遗留了 wine 安装留下的东西，今天上网找了一下，找到了一个在 deepbian 和 ubuntu 上删除的方法，因为我用的 Archlinux 的命令不一样，所以写下这个记录。</p></blockquote><span id="more"></span><h2 id="1-查找安装的-wine-软件包名"><a href="#1-查找安装的-wine-软件包名" class="headerlink" title="1. 查找安装的 wine 软件包名"></a>1. 查找安装的 <strong>wine</strong> 软件包名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yaourt -Qt<br></code></pre></td></tr></table></figure><p>显示我的 <strong>wine</strong> 软件包名就是 <strong>wine</strong></p><h2 id="2-执行移除命令，移除-wine"><a href="#2-执行移除命令，移除-wine" class="headerlink" title="2. 执行移除命令，移除 wine"></a>2. 执行移除命令，移除 <strong>wine</strong></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yaourt -R wine<br></code></pre></td></tr></table></figure><p>其中<code>-R</code>是移除命令， <code>wine</code> 是我在第一步中查找到的包名</p><h2 id="3-删除-wine-的目录文件"><a href="#3-删除-wine-的目录文件" class="headerlink" title="3. 删除 wine 的目录文件"></a>3. 删除 wine 的目录文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -r /home/username/.wine<br></code></pre></td></tr></table></figure><p>其中 <code>username</code> 是你的用户名</p><h2 id="4-清理-wine-模拟运行的-windows-程序"><a href="#4-清理-wine-模拟运行的-windows-程序" class="headerlink" title="4. 清理 wine 模拟运行的 windows 程序"></a>4. 清理 wine 模拟运行的 windows 程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -r /home/username/.local/share/applications<br></code></pre></td></tr></table></figure><h2 id="5、清理残余的-windows-程序"><a href="#5、清理残余的-windows-程序" class="headerlink" title="5、清理残余的 windows 程序"></a>5、清理残余的 windows 程序</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -r /home/username/.config/menus/applications-merged/wine*<br></code></pre></td></tr></table></figure><p>注意，这里以 root 权限使用了 <code>rm -r</code>命令，这个命令很危险，如果路径输入错误可能会直接悲剧，慎重点哈</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>wine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 上管理 ipod</title>
    <link href="/posts/e8aa02e7.html"/>
    <url>/posts/e8aa02e7.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>2016-08-11 17:28:30</p></blockquote><p>最近放弃了 win10 装了 ArchLinux ，一边看 ArchLinux <a href="https://wiki.archlinux.org/">wiki</a> 一边学怎么用 ArchLinux 。今天折腾 ipod。本来想在 wine 上装 iTunes，然而安装了并没有成功，所以百度下看看 Linux 有什么软件能管理 ipod，找到了 <strong>gtkpod</strong> 。下面就开始折腾 ipod 了。<span id="more"></span></p><!--more--><p><strong>1. 在 Terminal 安装 gtkpod</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ yaourt gtkpod<br></code></pre></td></tr></table></figure><p><strong>2. 安装玩 gtkpod 后，直接在 Terminal 中输入 gtkpod 运行。然而 gtkpod 需要苹果设配的型号，接下来就是查看 ipod 设备的型号了</strong>。</p><p><strong>3. 查看 ipod 设备的型号，在 Terminal 中输入</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsusb<br></code></pre></td></tr></table></figure><p>就能找到 ipod 的型号了</p><blockquote><p>从 2007 年的 ipod 开始，libgpod 需要知道 ipod 的“firewire id”，否则 ipod 就无法识别 libgpod 写到 ipod 上的信息，从而导致该错误。</p></blockquote><p>解决办法就是把 ipod 的<code>&quot;firewire id&quot;</code>写到 ipod 的 SysInfo 里面去。</p><p>首先找到 ipod 的 firewire ID：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># lsusb -v | grep -i iSerial</span><br></code></pre></td></tr></table></figure><ol start="4"><li>最后想怎么折腾 ipod 都行了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 添加右键菜单</title>
    <link href="/posts/70f06b63.html"/>
    <url>/posts/70f06b63.html</url>
    
    <content type="html"><![CDATA[<p>在开发的过程中，经常需要安装 APK 程序到手机，这需要打开命令行然后敲击安装命令，很是不方便。</p><p>现在有一个方法，在文件浏览器的右键菜单中，增加一个菜单项，专门用于安装 APK 程序。<span id="more"></span></p><p>方法如下：</p><ol><li><p>新建一个文本文件，命名为“安装 APK 到手机”</p></li><li><p>这个文件的内容是：</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># This script install the selected apk file onto your phone if connected. </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Distributed under the terms of GNU GPL version 2 or later </span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Install in ~/.gnome2/nautilus-scripts or ~/Nautilus/scripts </span><br><span class="hljs-comment"># You need to be running Nautilus 1.0.3+ to use scripts. </span><br><br>gnome-terminal -e <span class="hljs-string">&quot;adb -d install <span class="hljs-variable">$NAUTILUS_SCRIPT_SELECTED_FILE_PATHS</span>&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>将这个文件拷贝到目录<code>~/.gnome2/nautilus-scripts</code>之下</p></li><li><p>任意选择一个文件，右键弹出菜单，这时可以发现新增了一个脚本菜单项，它下面有一个“安装 APK 到手机”子菜单项；点击它就可以了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>gnome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式笔记</title>
    <link href="/posts/7d3925ab.html"/>
    <url>/posts/7d3925ab.html</url>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p><a href="http://deerchao.net/tutorials/regex/regex.htm">来源</a></p><ul><li>了解正则表达式语法</li><li>在 IDE 中使用正则表达式处理复杂的字符串查找、替换需求</li><li>在 JavaScript 程序设计中使用正则表达式处理字符串<span id="more"></span></li></ul><h3 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h3><ul><li>Regular-Expression 使用单个字符串来描述、匹配一系列符合某个句法规则的字符串</li><li>说简单了就是按照某种规则去匹配符合条件的字符串<!--more--></li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find ./ -name *.txt<br></code></pre></td></tr></table></figure><h3 id="REGEXPER"><a href="#REGEXPER" class="headerlink" title="REGEXPER"></a>REGEXPER</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-<span class="hljs-number">9</span>_-]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;)&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;)$<br></code></pre></td></tr></table></figure><p><a href="https://regexper.com/">REGEXPER</a></p><table><thead><tr><th align="center">reg</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">元字符</td><td align="center"></td></tr><tr><td align="center"><code>.</code></td><td align="center">任意字符</td></tr><tr><td align="center"><code>\w</code></td><td align="center">匹配除换行符以外的任意字符</td></tr><tr><td align="center"><code>\s</code></td><td align="center">匹配字母或数字或下划线或汉字</td></tr><tr><td align="center"><code>\d</code></td><td align="center">匹配数字</td></tr><tr><td align="center"><code>\b</code></td><td align="center">单词边界</td></tr><tr><td align="center"><code>^</code></td><td align="center">开头</td></tr><tr><td align="center"><code>$</code></td><td align="center">结尾</td></tr><tr><td align="center"><strong>字符转义</strong></td><td align="center"></td></tr><tr><td align="center"><code>\</code></td><td align="center">转义</td></tr><tr><td align="center"><strong>重复</strong></td><td align="center"></td></tr><tr><td align="center"><code>*</code></td><td align="center">重复零次或更多次</td></tr><tr><td align="center"><code>+</code></td><td align="center">重复一次或更多次</td></tr><tr><td align="center"><code>?</code></td><td align="center">重复零次或一次</td></tr><tr><td align="center"><code>&#123;n&#125;</code></td><td align="center">重复 n 次</td></tr><tr><td align="center"><code>&#123;n,&#125;</code></td><td align="center">重复 n 次或更多次</td></tr><tr><td align="center"><code>&#123;n,m&#125;</code></td><td align="center">重复 n 次到 m 次</td></tr><tr><td align="center"><strong>字符类</strong></td><td align="center"></td></tr><tr><td align="center"><code>[]</code></td><td align="center">或</td></tr><tr><td align="center"><code>\d</code></td><td align="center">[0-9]</td></tr><tr><td align="center"><code>\w</code></td><td align="center">[a-zA-Z0-9_]</td></tr><tr><td align="center"><strong>分支条件</strong></td><td align="center"></td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td></tr><tr><td align="center">*<em>分组</em></td><td align="center"></td></tr><tr><td align="center"><code>()</code></td><td align="center">分组</td></tr><tr><td align="center"><code>$1</code></td><td align="center">获取分组</td></tr><tr><td align="center"><strong>反义</strong></td><td align="center"></td></tr><tr><td align="center"><code>\W</code></td><td align="center">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="center"><code>\S</code></td><td align="center">匹配任意不是空白符的字符</td></tr><tr><td align="center"><code>\D</code></td><td align="center">匹配任意非数字的字符</td></tr><tr><td align="center"><code>\B</code></td><td align="center">匹配不是单词开头或结束的位置</td></tr><tr><td align="center"><code>[^x]</code></td><td align="center">匹配除了 x 以外的任意字符</td></tr><tr><td align="center"><code>[^aeiou]</code></td><td align="center">匹配除了 aeiou 这几个字母以外的任意字符</td></tr><tr><td align="center"><strong>贪婪与懒惰</strong></td><td align="center"></td></tr><tr><td align="center"><code>*?</code></td><td align="center">重复任意次，但尽可能少重复</td></tr><tr><td align="center"><code>+?</code></td><td align="center">重复 1 次或更多次，但尽可能少重复</td></tr><tr><td align="center"><code>??</code></td><td align="center">重复 0 次或 1 次，但尽可能少重</td></tr><tr><td align="center"><code>&#123;n,m&#125;?</code></td><td align="center">重复 n 到 m 次，但尽可能少重复</td></tr><tr><td align="center"><code>&#123;n,&#125;?</code></td><td align="center">重复 n 次以上，但尽可能少重复</td></tr><tr><td align="center"><strong>其他</strong></td><td align="center"></td></tr><tr><td align="center"><code>\a</code></td><td align="center">报警字符（打印它的效果是电脑嘀一声）</td></tr><tr><td align="center"><code>\b</code></td><td align="center">通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符，Tab</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车</td></tr><tr><td align="center"><code>\v</code></td><td align="center">竖向制表符</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页符</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行符</td></tr><tr><td align="center"><code>\e</code></td><td align="center">Escape</td></tr><tr><td align="center"><code>\0nn</code></td><td align="center">ASCII 代码中八进制代码为 nn 的字符</td></tr><tr><td align="center"><code>\xnn</code></td><td align="center">ASCII 代码中十六进制代码为 nn 的字符</td></tr><tr><td align="center"><code>\unnnn</code></td><td align="center">Unicode 代码中十六进制代码为 nnnn 的字符</td></tr><tr><td align="center"><code>\cN</code></td><td align="center">ASCII 控制字符。比如、cC 代表 Ctrl+C</td></tr><tr><td align="center"><code>\A</code></td><td align="center">字符串开头（类似^，但不受处理多行选项的影响）</td></tr><tr><td align="center"><code>\Z</code></td><td align="center">字符串结尾或行尾（不受处理多行选项的影响）</td></tr><tr><td align="center"><code>\z</code></td><td align="center">字符串结尾（类似$，但不受处理多行选项的影响）</td></tr><tr><td align="center"><code>\G</code></td><td align="center">当前搜索的开头</td></tr><tr><td align="center"><code>\p&#123;name&#125;</code></td><td align="center">Unicode 中命名为 name 的字符类，例如、p{IsGreek}</td></tr><tr><td align="center"><code> (?&gt;exp)</code></td><td align="center">贪婪子表达式</td></tr><tr><td align="center"><code>(?&lt;x&gt;-&lt;y&gt;exp)</code></td><td align="center">平衡组</td></tr><tr><td align="center"><code>(?im-nsx:exp)</code></td><td align="center">在子表达式 exp 中改变处理选项</td></tr><tr><td align="center"><code> (?im-nsx)</code></td><td align="center">为表达式后面的部分改变处理选项</td></tr><tr><td align="center"><code>(?(exp)yes|no)</code></td><td align="center">把 exp 当作零宽正向先行断言，如果在这个位置能匹配，使用 yes 作为此组的表达式；否则使用 no</td></tr><tr><td align="center"><code>(?(exp)yes)</code></td><td align="center">同上，只是使用空表达式作为 no</td></tr><tr><td align="center"><code>(?(name)yes|no)</code></td><td align="center">如果命名为 name 的组捕获到了内容，使用 yes 作为表达式；否则使用 no</td></tr><tr><td align="center"><code>(?(name)yes)</code></td><td align="center">同上，只是使用空表达式作为 no</td></tr></tbody></table><h2 id="REGEXP-对象"><a href="#REGEXP-对象" class="headerlink" title="REGEXP 对象"></a>REGEXP 对象</h2><p>JavaScript 通过内置对象 RegExp 支持正则表达式</p><p>有两种方式实例化 RegExp 对象</p><ul><li>字面量</li><li>构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*字面量*/</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\bis\b /g</span>;<span class="hljs-comment">//g 是全局搜索</span><br><span class="hljs-string">&#x27;He is a Boy. This is a boy. Where is she&#x27;</span>.<span class="hljs-title function_">replace</span>(reg,<span class="hljs-string">&#x27;IS&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\bis\\b&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>g:global 全文搜索，不添加，搜索到地一个匹配停止</li><li>i:ignore case 忽略大小写，默认大小写敏感</li><li>m:multiple lines 多行搜索</li></ul>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 关键字总结</title>
    <link href="/posts/cefe6d2e.html"/>
    <url>/posts/cefe6d2e.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-abstract"><a href="#1-abstract" class="headerlink" title="1.abstract"></a>1.abstract</h2><blockquote><p>解释：抽象，抽象的<br>用法：类修饰符的一种，可以用来修饰类，方法，被修饰的类不能够实例化（即不能用** new **关键字得到对象），被修饰的方法不能够实现。一个抽象类中不一定要有抽象方法，但是一个类里面有抽象方法就一定是抽象类。如果由类要继承抽象类的话，必须要实现里面的抽象方法。构造方法和静态方法不可以修饰为抽象。<span id="more"></span></p></blockquote><p><strong>abstract</strong> 关键字可以修改类或方法。</p><p><strong>abstract</strong> 类可以扩展（增加子类），但不能直接实例化。</p><p>abstract 方法不在声明它的类中实现，但必须在某个子类中重写。</p><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>采用 <strong>abstract</strong> 方法的类本来就是抽象类，并且必须声明为 <strong>abstract</strong>。<br><strong>abstract</strong> 类不能实例化。<br>仅当 <strong>abstract</strong> 类的子类实现其超类的所有 <strong>abstract</strong> 方法时，才能实例化 <strong>abstract</strong> 类的子类。这种类称为具体类，以区别于 <strong>abstract</strong> 类 。<br>如果 <strong>abstract</strong> 类的子类没有实现其超类的所有 <strong>abstract</strong> 方法，该子类也是 <strong>abstract</strong> 类。<br>abstract 关键字不能应用于 <strong>static</strong>、<strong>private</strong> 或 <strong>final</strong> 方法，因为这些方法不能被重写，因此，不能在子类中实现。<br><strong>final</strong> 类的方法都不能是 <strong>abstract</strong>，因为 <strong>final</strong> 类不能有子类。</p></blockquote><ol><li><strong>abstract <strong>抽象用在类的声明中来指明一个类是不能被实例化的，但是可以被其他类继承。一个抽象类可以使用抽象方法，抽象方法不需要实现，但是需要在子类中被实现。它的用途是向子类提供通用的信息。抽象类可以包含正常的类包含的任何东西，也就是说，类和实例变量，以及带有任何修饰词的方法。只有抽象类可能有抽象方法。如果一个不是抽象的类包含一个抽象方法，那么将会出现编译错误。<br>例子：如果下列的一个成立，那么一个有抽象方法：<br>a. 它显式的声明了一个</strong> abstract <strong>方法。<br>b. 它从它的直接父类继承了一个抽象方法。<br>c. 一个直接的类的父借口声明或继承了它的一个方法（这因此必须是</strong> abstract</strong>）</li><li>如果用户声明** private**,<strong>static</strong>, 和** final <strong>方法为 abstarct，编译错误将出现。不可能重设一个</strong> private <strong>方法，因为一个</strong> abstarct private <strong>永远不能被实现。</strong>static <strong>方法总是可用的，因此必须有一个实现；</strong>static abstract <strong>将永远没有实现。</strong>final <strong>方法不能被重设，因此不回有</strong> final abstract **方法的实现。</li></ol><h2 id="2-boolean"><a href="#2-boolean" class="headerlink" title="2.boolean"></a>2.boolean</h2><blockquote><p>解释：数据类型，布尔型，它的取值只能为** true <strong>或者</strong> false<strong>。<br>用法：用来定义临时变量、形参、属性的数据类型。格式如下：</strong>boolean 【变量名、形参名、属性名】**<br>变量的值可以是 <strong>true</strong> 或 <strong>false</strong>。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">valid</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (valid) &#123;<br>&lt;statement&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>boolean</strong> 变量只能以 <strong>true</strong> 或 <strong>false</strong> 作为值。<br><strong>boolean</strong> 不能与数字类型相互转换。<br>包含 <strong>boolean</strong> 操作数的表达式只能包含 <strong>boolean</strong> 操作数。<br><strong>boolean</strong> 类是 <strong>boolean</strong> 原始类型的包装对象类。</p></blockquote><h2 id="3-break"><a href="#3-break" class="headerlink" title="3.break"></a>3.break</h2><blockquote><p>用法：用于提前退出 <strong>for</strong>、<strong>while</strong> 或 <strong>do</strong> 循环，或者在 <strong>switch</strong> 语句中用来结束 <strong>case</strong> 块。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;max; i++) &#123;<br><span class="hljs-keyword">if</span> (&lt;loop finished early&gt;) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> &lt;some value&gt;;<br><span class="hljs-keyword">switch</span> (type) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&lt;statement&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&lt;statement&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&lt;statement&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>break</strong> 总是退出最深层的 <strong>while</strong>、<strong>for</strong>、<strong>do</strong> 或 <strong>switch</strong> 语句。</p></blockquote><h2 id="4-byte"><a href="#4-byte" class="headerlink" title="4.byte"></a>4.byte</h2><blockquote><p>解释：数据类型，字节型<br>用法：用来定义临时变量、形参、属性的数据类型。格式如下：<strong>byte 【变量名、形参名、属性名】</strong></p></blockquote><p><strong>byte</strong> 是 Java 原始类型。<br><strong>byte</strong> 可存储在 <strong>[-128, 127]</strong> 范围以内的整数值。</p><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">124</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>byte</strong> 类是 <strong>byte</strong> 原始类型的包装对象类。它定义代表此类型的值的范围的 **MIN_VALUE **和 **MAX_VALUE **常量。<br>Java 中的所有整数值都是 32 位的 <strong>int</strong> 值，除非值后面有 <strong>l</strong> 或 <strong>L</strong>（如 235L），这表示该值应解释为 <strong>long</strong>。</p></blockquote><h2 id="5-case"><a href="#5-case" class="headerlink" title="5.case"></a>5.case</h2><blockquote><p>用法：用来标记 <strong>switch</strong> 语句中的每个分支。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> &lt;some value&gt;;<br><span class="hljs-keyword">switch</span> (arg) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>case</strong> 块没有隐式结束点。<strong>break</strong> 语句通常在每个 <strong>case</strong> 块末尾使用，用于退出 <strong>switch</strong> 语句。<br>如果没有 <strong>break</strong> 语句，执行流将进入所有后面的 <strong>case</strong> 和&#x2F;或 <strong>default</strong> 块。</p></blockquote><h2 id="6-catch"><a href="#6-catch" class="headerlink" title="6.catch"></a>6.catch</h2><blockquote><p>解释：捕捉，捕获<br>用法：当发现被监视的代码中有异常出现的时候，**catch <strong>就用相对应的异常类进行捕捉。并且打印出相应的异常信息。</strong>catch <strong>块，必须要配合</strong> try <strong>块一起使用，不能单独使用，也不能直接和</strong> finally **块一起使用。<br><strong>catch</strong> 关键字用来在 <strong>try-catch</strong> 或 <strong>try-catch-finally</strong> 语句中定义异常处理块。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>&lt;可能引发异常的块&gt;<br>&#125; <span class="hljs-keyword">catch</span> (&lt;java.lang.Exception 或子类&gt; e) &#123;<br>&lt;处理异常 e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>&lt;可能引发其他异常的块&gt;<br>&#125; <span class="hljs-keyword">catch</span> (FooException e) &#123;<br>&lt;处理 FooException e 的代码&gt;<br>&#125; <span class="hljs-keyword">catch</span> (BarException e) &#123;<br>&lt;处理 BarException e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>&lt;可能引发异常的块&gt;<br>&#125; <span class="hljs-keyword">catch</span> (&lt;java.lang.Exception 或子类&gt; e) &#123;<br>&lt;处理异常 e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>&lt;有异常或无异常情况下都执行的语句&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>开始和结束标记 ** {** 和 <strong>}</strong> 是 <strong>catch</strong> 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。<br>每个 <strong>try</strong> 块都必须至少有一个 <strong>catch</strong> 或 <strong>finally</strong> 子句。<br>如果某个特定异常类未被任何 <strong>catch</strong> 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 <strong>try</strong> 块。如果任何封闭 <strong>try</strong> 块都未捕获到异常，Java &gt;解释器将退出，并显示错误消息和堆栈跟踪信息。</p></blockquote><h2 id="7-char"><a href="#7-char" class="headerlink" title="7.char"></a>7.char</h2><blockquote><p>用法：char 是 Java 原始类型。<br><strong>char</strong> 变量可以存储一个** Unicode** 字符。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">delimiter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;;&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>可以使用下列 <strong>char</strong> 常量：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">\b - 空格<br>\f - 换页<br>\n - 换行<br>\r - 回车<br>\t - 水平制表符<br>\<span class="hljs-string">&#x27; - 单引号</span><br><span class="hljs-string">\&quot; - 双引号</span><br><span class="hljs-string">\&quot; - 反斜杠</span><br><span class="hljs-string">\xxx - 采用 xxx 编码的 Latin-1 字符。\x 和 \xx 均为合法形式，但可能引起混淆。</span><br><span class="hljs-string">\uxxxx - 采用十六进制编码 xxxx 的 Unicode 字符。</span><br></code></pre></td></tr></table></figure><p><strong>Character</strong> 类包含一些可用来处理** char <strong>变量的</strong> static **方法，这些方法包括 <strong>isDigit()<strong>、</strong>isLetter()<strong>、</strong>isWhitespace()</strong> 和 **toUpperCase()**。<br>**char **值没有符号。</p><h2 id="8-class"><a href="#8-class" class="headerlink" title="8.class"></a>8.class</h2><blockquote><p>解释：类，种类<br>用法：定义一个类，这时候定义的类，在内存空间里面没有分配空间。换句话说，它还没有存在于现实生活中，它不是一个实体。类里面有方法有属性，要想访问它里面的方法和属性就要通过对象去使用。<br>格式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">访问权限修饰符 class 类名&#123;&#125;<br></code></pre></td></tr></table></figure><p>class 关键字用来声明新的 Java 类，该类是相关变量和&#x2F;或方法的集合。<br>类是面向对象的程序设计方法的基本构造单位。类通常代表某种实际实体，如几何形状或人。类是对象的模板。每个对象都是类的一个实例。<br>要使用类，通常使用 <strong>new</strong> 操作符将类的对象实例化，然后调用类的方法来访问类的功能。</p><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>&#123;<br><span class="hljs-type">float</span> width;<br><span class="hljs-type">float</span> height;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">float</span> w, <span class="hljs-type">float</span> h)</span>&#123;<br>width = w;<br>height = h;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> width;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> height;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-continue"><a href="#9-continue" class="headerlink" title="9.continue"></a>9.continue</h2><blockquote><p>用法：<strong>continue</strong> 关键字用来跳转到 <strong>for</strong>、<strong>while</strong> 或 <strong>do</strong> 循环的下一个迭代。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;max; i++)&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">if</span> (&lt;done with <span class="hljs-built_in">this</span> iteration&gt;)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>continue</strong> 总是跳到最深层 <strong>while</strong>、<strong>for</strong> 或 <strong>do</strong> 语句的下一个迭代。</p></blockquote><h2 id="10-default"><a href="#10-default" class="headerlink" title="10.default"></a>10.default</h2><blockquote><p>用法：<strong>default</strong> 关键字用来标记 **switch **语句中的默认分支。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> &lt;some value&gt;;<br><span class="hljs-keyword">switch</span> (arg)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>default</strong> 块没有隐式结束点。<strong>break</strong> 语句通常在每个 <strong>case</strong> 或 <strong>default</strong> 块的末尾使用，以便在完成块时退出 **switch <strong>语句。<br>如果没有 <strong>default</strong> 语句，其参数与任何 <strong>case</strong> 块都不匹配的 switch</strong> 语句将不执行任何操作。</p></blockquote><h2 id="11-do"><a href="#11-do" class="headerlink" title="11.do"></a>11.do</h2><blockquote><p>用法：<strong>do</strong> 关键字用于指定一个在每次迭代结束时检查其条件的循环。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>&lt;statements&gt;<br>&#125;<br><span class="hljs-keyword">while</span> (!found);<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>do</strong> 循环体至少执行一次。<br>条件表达式后面必须有分号。</p></blockquote><h2 id="12-double"><a href="#12-double" class="headerlink" title="12.double"></a>12.double</h2><blockquote><p>用法：<strong>double</strong> 是 Java 原始类型。<strong>double</strong> 变量可以存储双精度浮点值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">ratio</span> <span class="hljs-operator">=</span> <span class="hljs-number">.01</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">diameter</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.15</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.35E03</span>;   <span class="hljs-comment">// 1.35 * 103 或 1350.0</span><br><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">1e-2</span>;   <span class="hljs-comment">// 1.0 * 10-2 或 0.01</span><br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。<br>Java 浮点数值可代表无穷大和 NaN（非数值）。<strong>Double</strong> 包装对象类用来定义常量 <strong>MIN_VALUE</strong>、<strong>MAX_VALUE</strong>、<strong>NEGATIVE_INFINITY</strong>、<strong>POSITIVE_INFINITY</strong> 和 <strong>NaN</strong>。</p></blockquote><h2 id="13-else"><a href="#13-else" class="headerlink" title="13.else"></a>13.else</h2><blockquote><p>用法：<strong>else</strong> 关键字总是在 <strong>if-else</strong> 语句中与 <strong>if</strong> 关键字结合使用。<strong>else</strong> 子句是可选的，如果 <strong>if</strong> 条件为 <strong>false</strong>，则执行该子句。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (condition)&#123;<br>&lt;statements&gt;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-extends"><a href="#14-extends" class="headerlink" title="14.extends"></a>14.extends</h2><blockquote><p>解释：扩充，扩展<br>用法：一个类继承另一个类的关键字，当出现了这个关键字，两个类就有了继承关系，**extends <strong>前面的类，我们称之为父类。</strong>extends **后面的类，我们称之为子类。有了继承关系之后，我们就说子类拥有父类继承下来的所有非私有的成员（包括了属性，方法），但是不包括构造方法<br><strong>extends</strong> 关键字用在 <strong>class</strong> 或 <strong>interface</strong> 声明中，用于指示所声明的类或接口是其名称后跟有 <strong>extends</strong> 关键字的类或接口的子类。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Polygon</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>在上例中，Rectangle 类继承 <strong>Polygon</strong> 类的所有 <strong>public</strong> 和 <strong>protected</strong> 变量和方法。<br><strong>Rectangle</strong> 类可以重写 <strong>Polygon</strong> 类的任何非 <strong>final</strong> 方法。<br>一个类只能扩展一个其他类。</p></blockquote><h2 id="15-false"><a href="#15-false" class="headerlink" title="15.false"></a>15.false</h2><blockquote><p>解释：假，布尔型的字面值<br>用法：**boolean **类型的取值范围之一。<br>false 关键字代表 <strong>boolean</strong> 变量的两个合法值之一。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isComplete</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h2 id="16-final"><a href="#16-final" class="headerlink" title="16.final"></a>16.final</h2><blockquote><p>解释：最终的，决定性的<br>用法：修饰符的一种，它可以用来修饰类，方法，属性。当一个属性被修饰成** final <strong>的之后，这个属性变成了常量，它的值必须在定义的时候初始化，并且后面的代码不能对其进行修改，它的命名应该全部都是大写。当一个方法被修饰成</strong> final **的之后，这个方法在继承中是不能够被进行覆盖的。当一个类被修饰成 final 的之后，这个类不能再有子类。<br><strong>final</strong> 关键字可以应用于类，以指示不能扩展该类（不能有子类）。<br><strong>final</strong> 关键字可以应用于方法，以指示不能重写任何子类中的方法。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFinalClass</span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">myFinalMethod</span><span class="hljs-params">()</span><br>&#123;<br>&lt;statements&gt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br><span class="hljs-keyword">return</span> i&gt;=<span class="hljs-number">0</span>?i:-I;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>一个类不能同时是 abstract 又是 <strong>final</strong>。<strong>abstract</strong> 意味着必须扩展类，<strong>final</strong> 意味着不能扩展类。<br>一个方法不能同时是 abstract 又是** final<strong>。</strong>abstract** 意味着必须重写方法，<strong>final</strong> 意味着不能重写方法。</p></blockquote><ol><li>对于基本类型前加以** final <strong>修饰，表示被修饰的变量为常数，不可以修改。一个既是</strong> static <strong>又是</strong> final **的字段表示只占据一段不能改变的存储空间。</li><li>**final <strong>用于对象应用时，</strong>final **使应用恒定不变。一旦引用被初始化指向一个对象，就无法再把它指向另一个对象。</li><li><strong>final <strong>方法：一是把方法锁定，以防止继承类修改它的含义，二是确保继承中使方法行为保持不变，并且不会被覆盖。类中所有的</strong> private <strong>方法都隐式地指定为是</strong> final</strong>。</li><li>**final **参数：对于基本类型的变量，这样做并没有什么实际意义，因为基本类型的变量在调用方法时是传值，也就是说你可以在方法中更改这个参数变量而不会影响到调用语句，然而对于对象变量，却显得很实用，以为对象变量在传递时是传递其引用，这样你在方法中对对象变量的修改也会影响到调用语句的对象变量，当你在方法中不需要改变作为参数的变量时，明确使用 final 进行声明，会防止你无意的修改而影响到调用方法。</li><li>final 类：当将某个类的整体定义为 final 时，就表明了该类不允许被继承。</li></ol><h2 id="17-finally"><a href="#17-finally" class="headerlink" title="17.finally"></a>17.finally</h2><blockquote><p>解释：最后，终于，不可更改地<br>用法：在异常处理机制当中，它的作用就像是人吃饭一样，必须得做的，不论有异常还是没有异常都要执行的代码就可以放到** finally <strong>块当中去。</strong>finally <strong>块，必须要配合</strong> try <strong>块一起使用，不能单独使用，也不能直接和</strong> catch **块一起使用。<br><strong>finally</strong> 关键字用来定义始终在 <strong>try-catch-finally</strong> 语句中执行的块。<br><strong>finally</strong> 块通常包含清理代码，用在部分执行 <strong>try</strong> 块后恢复正常运行。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>&lt;可能引发异常的块&gt;<br>&#125;<br><span class="hljs-keyword">catch</span> (&lt;java.lang.Exception 或子类&gt; e)&#123;<br>&lt;处理异常 e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>&lt;有异常或无异常情况下都执行的语句&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>开始和结束标记 <strong>{</strong> 和 <strong>}</strong> 是 <strong>finally</strong> 子句语法的一部分，即使该子句只包含一个语句，也不能省略这两个标记。<br>每个 <strong>try</strong> 块都必须至少有一个 <strong>catch</strong> 或 <strong>finally</strong> 子句。<br>如果执行 <strong>try</strong> 块的任何部分，不论是否出现异常，也不论 <strong>try</strong> 或 <strong>catch</strong> 块是否包含 <strong>return</strong>、<strong>continue</strong> 或 <strong>break</strong> 语句，都一定会执行 <strong>finally</strong> 块中的代码。<br>如果不出现异常，控件将跳过 <strong>try</strong> 块，进入 <strong>finally</strong> 块。<br>如果在执行 <strong>try</strong> 块期间出现异常，并且相应的 catch 块包含 <strong>break</strong>、<strong>continue</strong> 或 <strong>return</strong> 语句，控件将首先穿过 <strong>finally</strong> 块，之后再执行 <strong>break</strong>、<strong>continue</strong> 或 <strong>return</strong>。</p></blockquote><h2 id="18-float"><a href="#18-float" class="headerlink" title="18.float"></a>18.float</h2><blockquote><p>用法：<strong>float</strong> 是 Java 原始类型。<strong>float</strong> 变量可以存储单精度浮点值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-variable">ratio</span> <span class="hljs-operator">=</span> <span class="hljs-number">.01</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">diameter</span> <span class="hljs-operator">=</span> <span class="hljs-number">6.15</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.35E03</span>;   <span class="hljs-comment">// 1.35 * 103 或 1350.0</span><br><span class="hljs-type">float</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">1e-2</span>;   <span class="hljs-comment">// 1.0 * 10-2 或 0.01</span><br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>使用此关键字时应遵循下列规则：<br>Java 中的浮点文字始终默认为双精度。要指定单精度文字值，应在数值后加上 <strong>f</strong> 或 <strong>F</strong>，如 <strong>0.01f</strong>。<br>由于浮点数据类型是实际数值的近似值，因此，一般不要对浮点数值进行是否相等的比较。<br>Java 浮点数值可代表无穷大和 NaN（非数值）。<strong>Float</strong> 包装对象类用来定义常量** MIN_VALUE<strong>、</strong>MAX_VALUE<strong>、</strong>NEGATIVE_INFINITY<strong>、</strong>POSITIVE_INFINITY** 和 <strong>NaN</strong>。</p></blockquote><h2 id="19-for"><a href="#19-for" class="headerlink" title="19.for"></a>19.for</h2><blockquote><p>用法：<strong>for</strong> 关键字用于指定一个在每次迭代结束前检查其条件的循环。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;max; i++)&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>for</strong> 语句的形式为 <strong>for(initialize; condition; increment)</strong><br>控件流进入 <strong>for</strong> 语句时，将执行一次 <strong>initialize</strong> 语句。<br>每次执行循环体之前将计算 <strong>condition</strong> 的结果。如果 <strong>condition</strong> 为 <strong>true</strong>，则执行循环体。<br>每次执行循环体之后，在计算下一个迭代的 <strong>condition</strong> 之前，将执行 <strong>increment</strong> 语句。</p></blockquote><h2 id="20-if"><a href="#20-if" class="headerlink" title="20.if"></a>20.if</h2><blockquote><p>用法：if 关键字指示有条件地执行代码块。条件的计算结果必须是布尔值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (condition)&#123;<br>&lt;statements&gt;<br>&#125;<br><span class="hljs-keyword">if</span> (condition)&#123;<br>&lt;statements&gt;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>if</strong> 语句可以有可选的 <strong>else</strong> 子句，该子句包含条件为 <strong>false</strong> 时将执行的代码。<br>包含 <strong>boolean</strong> 操作数的表达式只能包含 <strong>boolean</strong> 操作数。</p></blockquote><h2 id="21-implements"><a href="#21-implements" class="headerlink" title="21.implements"></a>21.implements</h2><blockquote><p>解释：实现<br>用法：用来让一个类实现一个接口的关键字，实现接口的这个类必须实现接口里面所有的方法。<br><strong>implements</strong> 关键字在 <strong>class</strong> 声明中使用，以指示所声明的类提供了在 **implements *关键字后面的名称所指定的接口中所声明的所有方法的实现。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Truck</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVehicle</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>在上例中，<strong>Truck</strong> 类必须提供在 <strong>IVehicle</strong> 接口中所声明的所有方法的实现。<br>否则，<strong>Truck</strong> 类将是独立的；它可以声明其他方法和变量，并扩展另一个类。<br>一个类可以实现多个接口。</p></blockquote><h2 id="22-import"><a href="#22-import" class="headerlink" title="22.import"></a>22.import</h2><blockquote><p>解释：引入，导入<br>用法：相对应打包而言，当一个类被放在包下面了，如果要使用这个类就必须到这个包下面去寻找这个类，因此出现了导包语句。导包可以有多条语句。<br><strong>import</strong> 关键字使一个包中的一个或所有类在当前 Java 源文件中可见。可以不使用完全限定的类名来引用导入的类。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.net.*;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>当多个包包含同名的类时，许多 Java 程序员只使用特定的 <strong>import</strong> 语句（没有“*”）来避免不确定性。</p></blockquote><h2 id="23-instanceof"><a href="#23-instanceof" class="headerlink" title="23.instanceof"></a>23.instanceof</h2><blockquote><p>用法：instanceof 关键字用来确定对象所属的类。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>在上例中，如果 <strong>node</strong> 是 <strong>TreeNode</strong> 类的实例，或者是 <strong>TreeNode</strong> 的子类的实例，则 <strong>instanceof</strong> 表达式的值将为 <strong>true</strong>。<br>**instanceof **通常是用于判断父类或者接口的引用是否是某个子类的实例，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;&#125;<br>Animal a= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>();<br>System.out.println( a <span class="hljs-keyword">instanceof</span> Bird);<br>System.out.println( a <span class="hljs-keyword">instanceof</span> Dog);<br></code></pre></td></tr></table></figure><h2 id="24-int"><a href="#24-int" class="headerlink" title="24.int"></a>24.int</h2><blockquote><p>用法：<strong>int</strong> 是 Java 原始类型。<br><strong>int</strong> 变量可以存储 32 位的整数值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">octalNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0377</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">hexNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xff</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>Integer</strong> 类是 <strong>int</strong> 原始类型的包装对象类。它定义代表此类型的值的范围的 <strong>MIN_VALUE</strong> 和 <strong>MAX_VALUE</strong> 常量。<br>Java 中的所有整数值都是 32 位的 <strong>int</strong> 值，除非值后面有 <strong>l</strong> 或 <strong>L</strong>（如 235L），这表示该值应解释为 <strong>long</strong>。</p></blockquote><h2 id="25-interface"><a href="#25-interface" class="headerlink" title="25.interface"></a>25.interface</h2><blockquote><p>解释：接口，界面<br>用法：它本质上是一个类，一个完全抽象的类，里面没有任何实现的方法。它不是用来继承的，是用来实现的。某个类如果实现了接口就必须要实现接口里面的所有方法。并且接口是不能用来实例化的，它也是不能通过** new **关键字获得对象。<br><strong>interface</strong> 关键字用来声明新的 Java 接口，接口是方法的集合。<br>接口是 Java 语言的一项强大功能。任何类都可声明它实现一个或多个接口，这意味着它实现了在这些接口中所定义的所有方法。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPolygon</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumberOfSides</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCircumference</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>实现了接口的任何类都必须提供在该接口中的所有方法的实现。<br>一个类可以实现多个接口。</p></blockquote><h2 id="26-long"><a href="#26-long" class="headerlink" title="26.long"></a>26.long</h2><p>用法：<strong>long</strong> 是 Java 原始类型。**long **变量可以存储 64 位的带符号整数。</p><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">anotherNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">34590L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">octalNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0377</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">hexNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xffl</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>Long</strong> 类是 <strong>long</strong> 原始类型的包装对象类。它定义代表此类型的值的范围的 <strong>MIN_VALUE</strong> 和 <strong>MAX_VALUE</strong> 常量。<br>Java 中的所有整数值都是 32 位的 <strong>int</strong> 值，除非值后面有 <strong>l</strong> 或 <strong>L</strong>（如 235L），这表示该值应解释为** long**。</p></blockquote><h2 id="27-native"><a href="#27-native" class="headerlink" title="27.native"></a>27.native</h2><blockquote><p>说明：<strong>native</strong> 关键字可以应用于方法，以指示该方法是用 Java 以外的语言实现的。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">native</span> String <span class="hljs-title function_">getProcessorType</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>Java 不是完美的，Java 的不足除了体现在运行速度上要比传统的 C++慢许多之外，Java 无法直接访问到操作系统底层（如系统硬件等），为此 Java 使用** native <strong>方法来扩展 Java 程序的功能。<br>可以将 native 方法比作 Java 程序同Ｃ程序的接口，其实现步骤：<br>１. 在 Java 中声明</strong> native() <strong>方法，然后编译；<br>２. 用 javah 产生一个</strong>.h <strong>文件；<br>３. 写一个。cpp 文件实现 native 导出方法，其中需要包含第二步产生的</strong>.h <strong>文件（注意其中又包含了 JDK 带的</strong> jni.h <strong>文件）；<br>４. 将第三步的。cpp 文件编译成动态链接库文件；<br>５. 在 Java 中用</strong> System.loadLibrary() <strong>方法加载第四步产生的动态链接库文件，这个</strong> native() **方法就可以在 Java 中被访问了。</p></blockquote><blockquote><p>JAVA 本地方法适用的情况</p></blockquote><ol><li>为了使用底层的主机平台的某个特性，而这个特性不能通过 JAVA API 访问</li><li>为了访问一个老的系统或者使用一个已有的库，而这个系统或这个库不是用 JAVA 编写的</li><li>为了加快程序的性能，而将一段时间敏感的代码作为本地方法实现。<br>首先写好 JAVA 文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Created on 2005-12-19 Author shaoqi</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">package</span> com.hode.hodeframework.modelupdate;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckFile</span><br>&#123;<br>　　<span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayHelloWorld</span><span class="hljs-params">()</span>;<br>　　<span class="hljs-keyword">static</span><br>　　&#123;<br>　　System.loadLibrary(<span class="hljs-string">&quot;test&quot;</span>);<br>　　&#125;<br>　　<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>　　<span class="hljs-keyword">new</span> <span class="hljs-title class_">CheckFile</span>().displayHelloWorld();<br>　　&#125;<br>&#125;<br></code></pre></td></tr></table></figure>然后根据写好的文件编译成** CLASS <strong>文件<br>然后在 classes 或 bin 之类的</strong> class <strong>根目录下执行</strong> javah -jni com.hode.hodeframework.modelupdate.CheckFile<strong>， 就会在根目录下得到一个</strong> com_hode_hodeframework_modelupdate_CheckFile.h <strong>的文件，然后根据头文件的内容编写</strong> com_hode_hodeframework_modelupdate_CheckFile.c **文件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;CheckFile.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span></span><br>JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title function_">Java_com_hode_hodeframework_modelupdate_CheckFile_displayHelloWorld</span><span class="hljs-params">(JNIEnv *env, jobject obj)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!\n&quot;</span>);<br>　　<span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>之后编译生成 DLL 文件如“test.dll”，名称与** System.loadLibrary(“test”) <strong>中的名称一致<br>vc 的编译方法：<code>cl -I%java_home%\include -I%java_home%\include\win32 -LD com_hode_hodeframework_modelupdate_CheckFile.c -Fetest.dll</code><br>最后在运行时加参数</strong>-Djava.library.path&#x3D;[dll 存放的路径]**</li></ol><h2 id="28-new"><a href="#28-new" class="headerlink" title="28.new"></a>28.new</h2><blockquote><p>解释：新建<br>用法：创建对象时使用，当一看倒** new **关键字，意味着在内存的堆空间里开辟了一个空间，存放了相对应类型的对象出来。创建的对象由一个相对应类型的引用去指向访问，类似与 C 语言中指针的用法。<br>格式如下：<code>类名 引用名 = new 类名 ()</code>。<br><strong>new</strong> 关键字用于创建类的新实例。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-type">Float</span> <span class="hljs-variable">fVal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float</span>(<span class="hljs-number">0.15</span>);<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>new</strong> 关键字后面的参数必须是类名，并且类名的后面必须是一组构造方法参数（必须带括号）。<br>参数集合必须与类的构造方法的签名匹配。<br>&#x3D; 左侧的变量的类型必须与要实例化的类或接口具有赋值兼容关系。</p></blockquote><h2 id="29-null"><a href="#29-null" class="headerlink" title="29.null"></a>29.null</h2><blockquote><p>解释：空<br>用法：对象的一种取值，称呼为：“null 值”，这时候我们理解成内存里面还没有得到这个对象空间。<br><strong>null</strong> 是 Java 的保留字，表示无值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i;<br>i = <span class="hljs-literal">null</span>;<br>String s;<br><span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span>)&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>将 <strong>null</strong> 赋给非原始变量相当于释放该变量先前所引用的对象。<br>不能将 <strong>null</strong> 赋给原始类型（<strong>byte、short、int、long、char、float、double、boolean</strong>）变量。</p></blockquote><h2 id="30-package"><a href="#30-package" class="headerlink" title="30.package"></a>30.package</h2><blockquote><p>解释：包裹，包<br>用法：为了防止同一个目录下面存在于两个相同名字的源文件，使用打包的用处和文件夹的作用是相似的。要注意，打包语句一定只能放在源文件的第一句话，并且不能在同一个源文件中出现两个或者两个以上的打包语句。包可以嵌套，通常来讲，第一个包称之为根包，后面的嵌套包称之为子包。<br><strong>package</strong> 关键字指定在 Java 源文件中声明的类所驻留的 Java 包。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mycompany;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>package</strong> 语句（如果出现）必须是 Java 源文件中的第一个非-注释-性文本。<br>在上面的**-示例-<strong>中，</strong>MyClass** 类的完全限定类名是 <strong>com.mycompany.MyClass</strong>。<br>如果 Java 源文件不包含 <strong>package</strong> 语句，在该文件中定义的类将位于“默认包”中。请注意，不能从非默认包中的类引用默认包中的类。</p></blockquote><h2 id="31-private"><a href="#31-private" class="headerlink" title="31.private"></a>31.private</h2><blockquote><p>解释：访问权限修饰符的一种，私有的意思。<br>用法：用来修饰属性，方法。只能类的内部本身才能够访问，不能修饰类。<br><strong>private</strong> 关键字是访问控制修饰符，可以应用于方法或字段（在类中声明的变量）。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPublicClass</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrivateClass</span>&#123;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>只能在声明 <strong>private</strong>（内部）类、方法或字段的类中引用这些类、方法或字段。在类的外部或者对于子类而言，它们是不可见的。<br>所有类成员的默认访问范围都是 <strong>package</strong> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></blockquote><h2 id="32-protected"><a href="#32-protected" class="headerlink" title="32.protected"></a>32.protected</h2><blockquote><p>解释：访问权限修饰符的一种，受保护的意思。<br>用法：用来修饰属性，方法。只能符合有包内友好关系，或者是父子友好的类才能够访问，不能修饰类。<br><strong>protected</strong> 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPublicClass</span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrivateClass</span>&#123;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>可以在声明 <strong>protected</strong> 类、方法或字段的类、同一个包中的其他任何类以及任何子类（无论子类是在哪个包中声明的）中引用这些类、方法或字段。<br>所有类成员的默认访问范围都是 <strong>package</strong> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></blockquote><h2 id="33-public"><a href="#33-public" class="headerlink" title="33.public"></a>33.public</h2><blockquote><p>解释：访问权限修饰符的一种，公开，公共的意思。<br>用法：用来修饰类，属性，方法。对于外部的任何类都能够访问。<br><strong>public</strong> 关键字是可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPublicClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrivateClass</span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>可能只会在其他任何类或包中引用 <strong>public</strong> 类、方法或字段。<br>所有类成员的默认访问范围都是 <strong>package</strong> 访问，也就是说，除非存在特定的访问控制修饰符，否则，可以从同一个包中的任何类访问类成员。</p></blockquote><h2 id="34-return"><a href="#34-return" class="headerlink" title="34.return"></a>34.return</h2><blockquote><p>用法：<strong>return</strong> 关键字会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myVoidMethod</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">myStringMethod</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;my response&quot;</span>;<br><span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">myIntMethod</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">return</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>如果方法具有非 <strong>void</strong> 的返回类型，<strong>return</strong> 语句必须具有相同或兼容类型的参数。<br>返回值两侧的括号是可选的。</p></blockquote><h2 id="35-short"><a href="#35-short" class="headerlink" title="35.short"></a>35.short</h2><blockquote><p>用法：<strong>short</strong> 是 Java 原始类型。<strong>short</strong> 变量可以存储 16 位带符号的整数。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">octalNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0077</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">hexNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xff</span>;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>Short</strong> 类是 <strong>short</strong> 原始类型的包装对象类。它定义代表此类型的值的范围的 <strong>MIN_VALUE</strong> 和 <strong>MAX_VALUE</strong> 常量。<br>Java 中的所有整数值都是 32 位的 <strong>int</strong> 值，除非值后面有 <strong>l</strong> 或 <strong>L</strong>（如 235L），这表示该值应解释为 <strong>long</strong>。</p></blockquote><h2 id="36-static"><a href="#36-static" class="headerlink" title="36.static"></a>36.static</h2><blockquote><p>解释：静态的<br>用法：修饰符的一种，能够用来修饰属性和方法。需要注意的是被修饰的属性和方法，不再属于对象所有，而是属于类，意味着，要访问这些属性和方法不再通过对象而是直接用类名来访问。另外，静态的方法不能够访问非静态属性，非静态的方法能够访问静态的属性。<br><strong>static</strong> 关键字可以应用于内部类（在另一个类中定义的类）、方法或字段（类的成员变量）。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPublicClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_OBJECTS</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">_numObjects</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStaticClass</span>&#123;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumObjects</span><span class="hljs-params">()</span>&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>通常，<strong>static</strong> 关键字意味着应用它的实体在声明该实体的类的任何特定实例外部可用。<br><strong>static</strong>（内部）类可以被其他类实例化和引用（即使它是顶级类）。在上面的**-示例-**中，另一个类中的代码可以实例化 <strong>MyStaticClass <strong>类，方法是用包含它的类名来限定其名称，如 <strong>MyClass.MyStaticClass</strong>。<br>static 字段（类的成员变量）在类的所有实例中只存在一次。<br>可以从类的外部调用 <strong>static</strong> 方法，而不用首先实例化该类。这样的引用始终包括类名作为方法调用的限定符。在上面的示例中，</strong>MyClass</strong> 类外部的代码以 <strong>MyClass.getNumObjects()</strong> 的形式调用 <strong>getNumObjects() static</strong> 方法。</p></blockquote><p><strong>模式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> &lt;type&gt; varName = &lt;value&gt;;<br></code></pre></td></tr></table></figure><blockquote><p>通常用于声明可以在类的外部使用的类常量。在引用这样的类常量时需要用类名加以限定。在上面的**-示例-**中，另一个类可以用 <strong>MyClass.MAX_OBJECTS</strong> 形式来引用 <strong>MAX_OBJECTS</strong> 常量。</p></blockquote><ol><li>通常在一个类中定义一个方法为** static**，就是说无须本类的对象就可以直接调用。</li><li>静态变量和静态方法类似。所有此类实例共享此静态变量，也就是说类装载时，只分配一块存储空间，所有此类的对象都可以操控此块存储空间，当然对于 final 就另当别论了。</li><li>static 定义的变量会优先于任何其他非** static **变量，不论其出现顺序如何。</li><li>**static{}<strong>着是用来显式的静态变量初始化，这段代码只会初始化一次，且在类被第一次装载时。<br>5&gt;在涉及到继承的时候，会先初始化父类的</strong> static **变量，然后是子类的。<br>6&gt;通常一个普通类不允许声明为静态的，只有一个内部类才可以。这时这个声明为静态的内部类可以直接作为一个普通类来使用，而不需要实例一个外部类。</li></ol><h2 id="37-super"><a href="#37-super" class="headerlink" title="37.super"></a>37.super</h2><blockquote><p>解释：上一级的，超级的<br>用法：代表了当前类中父类的对象。能够去调用父类的构造方法，属性，方法。但是需要注意，如果是在当前类的构造方法中去调用父类的构造方法，必须把调用语句写在本类构造方法的第一句上。<br><strong>super</strong> 关键字用于引用使用该关键字的类的超类。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyClass</span><span class="hljs-params">(String arg)</span>&#123;<br><span class="hljs-built_in">super</span>(arg);<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">myStringMethod</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.otherStringMethod();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>作为独立语句出现的 <strong>super</strong> 表示调用超类的构造方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.&lt;methodName&gt;()<br></code></pre></td></tr></table></figure><blockquote><p>表示调用超类的方法。只有在如下情况中才需要采用这种用法：要调用在该类中被重写的方法，以便指定应当调用在超类中的该方法。</p></blockquote><ol><li>在你的方法中的某个刑参名与当前对象的某个成员有相同的名字，这时为了不至于混淆，你便要明确使用** this <strong>关键字来指明你要使用某个成员，使用方法是</strong> this. 成员名<strong>，而不带</strong> this <strong>的那个便是</strong>形参<strong>。另外，还可以用</strong> this. 方法名<strong>来引用当前对象的某个方法，但这时</strong> this **就不是必须的了，你可以直接用方法名来访问那个方法。</li><li>当父类的方法被重写后可以用** super <strong>来调用父类的方法。如果父类的方法可以被子类调用，那你可以象使用</strong> this <strong>一样使用它，用</strong> super. 父类中的成员名**的方式来调用。</li><li>**super <strong>和</strong> this <strong>直接在其后跟上适当的参数，因此它的意义就有了变化。</strong>super <strong>后加参数的是用来调用父类中具有相同形式的构造函数，</strong>this **后加参数则调用的是当前具有相同参数的构造函数。</li><li>**this <strong>通常指代当前对象，</strong>super **通常指带父类。</li></ol><h2 id="38-switch"><a href="#38-switch" class="headerlink" title="38.switch"></a>38.switch</h2><blockquote><p>用法：switch 语句用于基于某个表达式选择执行多个代码块中的某一个。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> &lt;some value&gt;;<br><span class="hljs-keyword">switch</span> (arg)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-type">char</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> &lt;some value&gt;;<br><span class="hljs-keyword">switch</span> (arg)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;y&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Y&#x27;</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;n&#x27;</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;N&#x27;</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>&lt;statements&gt;<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>switch</strong> 条件的计算结果必须等于 <strong>byte</strong>、<strong>char</strong>、<strong>short</strong> 或 <strong>int</strong>。<br><strong>case</strong> 块没有隐式结束点。<strong>break</strong> 语句通常在每个 <strong>case</strong> 块末尾使用，用于退出 <strong>switch</strong> 语句。<br>如果没有 <strong>break</strong> 语句，执行流将进入所有后面的 <strong>case</strong> 和**<code>/</code>**或 <strong>default</strong> 块。</p></blockquote><h2 id="39-synchronized"><a href="#39-synchronized" class="headerlink" title="39.synchronized"></a>39.synchronized</h2><p>用法：<strong>synchronized</strong> 关键字可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码</p><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">mySyncStaticMethod</span><span class="hljs-params">()</span>&#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">mySyncMethod</span><span class="hljs-params">()</span>&#123;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyOtherClass</span>&#123;<br>Object someObj;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">synchronized</span> (someObj)&#123;<br>&lt;statements affecting someObj&gt;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>synchronized</strong> 关键字可防止代码的关键代码段一次被多个线程执行。<br>如果应用于静态方法（如上例中的 <strong>MySyncStaticMethod</strong>），那么，当该方法一次由一个线程执行时，整个类将被锁定。<br>如果应用于实例方法（如上例中的 <strong>MySyncMethod</strong>），那么，当该方法一次由一个线程访问时，该实例将被锁定。<br>如果应用于对象或数组，当关联的代码块一次由一个线程执行时，对象或数组将被锁定。<br><strong>synchronized</strong> 关键字，它包括两种用法：<strong>synchronized</strong> 方法和 <strong>synchronized</strong> 块。</p></blockquote><ol><li>synchronized 方法：通过在方法声明中加入 **synchronized **关键字来声明 **synchronized **方法。<br>如： 　<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accessVal</span><span class="hljs-params">(<span class="hljs-type">int</span> newVal)</span>;<br></code></pre></td></tr></table></figure><strong>synchronized</strong> 方法控制对类成员变量的访问：每个类实例对应一把锁，每个 <strong>synchronized</strong> 方法都必须获得调用该方法的类实例的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。这种机制确保了同一时刻对于每一个类实例，其所有声明为 <strong>synchronized</strong> 的成员函数中至多只有一个处于可执行状态（因为至多只有一个能够获得该类实例对应的锁），从而有效避免了类成员变量的访问冲突（只要所有可能访问类成员变量的方法均被声明为 <strong>synchronized</strong>）。<br>　在 Java 中，不光是类实例，每一个类也对应一把锁，这样我们也可将类的静态成员函数声明为 <strong>synchronized</strong>，以控制其对类的静态成员变量的访问。<br><strong>synchronized</strong> 方法的缺陷：若将一个大的方法声明为** synchronized** 将会大大影响效率，典型地，若将线程类的方法 run() 声明为 synchronized ，由于在线程的整个生命期内它一直在运行，因此将导致它对本类任何 <strong>synchronized</strong> 方法的调用都永远不会成功。当然我们可以通过将访问类成员变量的代码放到专门的方法中，将其声明为 <strong>synchronized</strong> ，并在主方法中调用来解决这一问题，但是 Java 为我们提供了更好的解决办法，那就是 <strong>synchronized</strong> 块。</li><li><strong>synchronized</strong> 块：通过 <strong>synchronized <strong>关键字来声明</strong> synchronized</strong> 块。语法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(syncObject) &#123;<br>　　<span class="hljs-comment">//允许访问控制的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><strong>synchronized <strong>块是这样一个代码块，其中的代码必须获得对象</strong> syncObject</strong> （如前所述，可以是类实例或类）的锁方能执行，具体机制同前所述。由于可以针对任意代码块，且可任意指定上锁的对象，故灵活性较高。<br>对** synchronized(this) <strong>的一些理解<br>一、当两个并发线程访问同一个对象</strong> object <strong>中的这个</strong> synchronized(this) <strong>同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。</strong>package ths;**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; synchronized loop &quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Thread1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread1</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">ta</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1, <span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">tb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1, <span class="hljs-string">&quot;B&quot;</span>);<br>ta.start();<br>tb.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><strong>结果：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">A <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">0</span><br>A <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">1</span><br>A <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">2</span><br>A <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">3</span><br>A <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">4</span><br>B <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">0</span><br>B <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">1</span><br>B <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">2</span><br>B <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">3</span><br>B <span class="hljs-keyword">synchronized</span> loop <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>二、然而，当一个线程访问 object 的一个** synchronized(this) <strong>同步代码块时，另一个线程仍然可以访问该</strong> object <strong>中的非</strong> synchronized(this) **同步代码块。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ths;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>( i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>( i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">Thread2</span> <span class="hljs-variable">myt2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread2</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  myt2.m4t1();  &#125;  &#125;, <span class="hljs-string">&quot;t1&quot;</span>  );<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123; myt2.m4t2();   &#125;  &#125;, <span class="hljs-string">&quot;t2&quot;</span>  );<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><strong>结果：</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">t1 : <span class="hljs-number">4</span><br>t2 : <span class="hljs-number">4</span><br>t1 : <span class="hljs-number">3</span><br>t2 : <span class="hljs-number">3</span><br>t1 : <span class="hljs-number">2</span><br>t2 : <span class="hljs-number">2</span><br>t1 : <span class="hljs-number">1</span><br>t2 : <span class="hljs-number">1</span><br>t1 : <span class="hljs-number">0</span><br>t2 : <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>三、尤其关键的是，当一个线程访问** object <strong>的一个</strong> synchronized(this) <strong>同步代码块时，其他线程对</strong> object <strong>中所有其它</strong> synchronized(this) **同步代码块的访问将被阻塞。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改 Thread2.m4t2() 方法：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>( i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">t1 : <span class="hljs-number">4</span><br>t1 : <span class="hljs-number">3</span><br>t1 : <span class="hljs-number">2</span><br>t1 : <span class="hljs-number">1</span><br>t1 : <span class="hljs-number">0</span><br>t2 : <span class="hljs-number">4</span><br>t2 : <span class="hljs-number">3</span><br>t2 : <span class="hljs-number">2</span><br>t2 : <span class="hljs-number">1</span><br>t2 : <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>四、第三个例子同样适用其它同步代码块。也就是说，当一个线程访问** object <strong>的一个</strong> synchronized(this) <strong>同步代码块时，它就获得了这个</strong> object <strong>的对象锁。结果，其它线程对该</strong> object **对象所有同步代码部分的访问都被暂时阻塞。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改 Thread2.m4t2() 方法如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>( i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : &quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>结果：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada">t1 : 4<br>t1 : 3<br>t1 : 2<br>t1 : 1<br>t1 : 0<br>t2 : 4<br>t2 : 3<br>t2 : 2<br>t2 : 1<br>t2 : 0<br></code></pre></td></tr></table></figure>五、以上规则对其它对象锁同样适用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread3</span> &#123;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>(i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : Inner.m4t1()=&quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span>(InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>(i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : Inner.m4t2()=&quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span>(InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t1</span><span class="hljs-params">(Inner inner)</span> &#123;<br><span class="hljs-keyword">synchronized</span>(inner) &#123; <span class="hljs-comment">//使用对象锁</span><br>inner.m4t1();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">(Inner inner)</span> &#123;<br>inner.m4t2();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">Thread3</span> <span class="hljs-variable">myt3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread3</span>();<br><span class="hljs-keyword">final</span> <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> myt3.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123; myt3.m4t1(inner);&#125; &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123; myt3.m4t2(inner);&#125; &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>结果：尽管线程 t1 获得了对 Inner 的对象锁，但由于线程 t2 访问的是同一个 Inner 中的非同步部分。所以两个线程互不干扰。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">t1 : Inner.m4t1()=<span class="hljs-number">4</span><br>t2 : Inner.m4t2()=<span class="hljs-number">4</span><br>t1 : Inner.m4t1()=<span class="hljs-number">3</span><br>t2 : Inner.m4t2()=<span class="hljs-number">3</span><br>t1 : Inner.m4t1()=<span class="hljs-number">2</span><br>t2 : Inner.m4t2()=<span class="hljs-number">2</span><br>t1 : Inner.m4t1()=<span class="hljs-number">1</span><br>t2 : Inner.m4t2()=<span class="hljs-number">1</span><br>t1 : Inner.m4t1()=<span class="hljs-number">0</span><br>t2 : Inner.m4t2()=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>现在在** Inner.m4t2() <strong>前面加上</strong> synchronized**：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4t2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">while</span>(i-- &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : Inner.m4t2()=&quot;</span> + i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">500</span>);<br>&#125; <span class="hljs-keyword">catch</span>(InterruptedException ie) &#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>结果：<br>尽管线程 t1 与 t2 访问了同一个 Inner 对象中两个毫不相关的部分，但因为 t1 先获得了对 Inner 的对象锁，所以 t2 对** Inner.m4t2() **的访问也被阻塞，因为 m4t2() 是 Inner 中的一个同步方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">t1 : Inner.m4t1()=<span class="hljs-number">4</span><br>t1 : Inner.m4t1()=<span class="hljs-number">3</span><br>t1 : Inner.m4t1()=<span class="hljs-number">2</span><br>t1 : Inner.m4t1()=<span class="hljs-number">1</span><br>t1 : Inner.m4t1()=<span class="hljs-number">0</span><br>t2 : Inner.m4t2()=<span class="hljs-number">4</span><br>t2 : Inner.m4t2()=<span class="hljs-number">3</span><br>t2 : Inner.m4t2()=<span class="hljs-number">2</span><br>t2 : Inner.m4t2()=<span class="hljs-number">1</span><br>t2 : Inner.m4t2()=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="40-this"><a href="#40-this" class="headerlink" title="40.this"></a>40.this</h2><blockquote><p>解释：这，这个<br>用法：指离它最近类的当前对象，他能够调用本类中的属性，方法，构造方法。需要注意的是在静态方法中不能使用** this **关键字。<br><strong>this</strong> 关键字用于引用当前实例。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-type">int</span> number;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyClass</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span>&#123;<br><span class="hljs-built_in">this</span>.number = number;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>当引用可能不明确时，可以使用 this 关键字来引用当前的实例。<br>在上面的**-示例-<strong>中，构造方法参数 <strong>number</strong> 与类的成员变量同名。</strong>this.number** 明确表示 <strong>MyClass</strong> 的该实例的 <strong>number</strong> 成员变量。</p></blockquote><ol><li>在你的方法中的某个刑参名与当前对象的某个成员有相同的名字，这时为了不至于混淆，你便要明确使用 this 关键字来指明你要使用某个成员，使用方法是 this. 成员名，而不带 this 的那个便是刑参。另外，还可以用 this. 方法名来引用当前对象的某个方法，但这时** this **就不是必须的了，你可以直接用方法名来访问那个方法。</li><li>当父类的方法被重写后可以用** super <strong>来调用父类的方法。如果父类的方法可以被子类调用，那你可以象使用 this 一样使用它，用</strong> super. 父类中的成员名**的方式来调用。</li><li>**super <strong>和</strong> this <strong>直接在其后跟上适当的参数，因此它的意义就有了变化。</strong>super <strong>后加参数的是用来调用父类中具有相同形式的构造函数，</strong>this **后加参数则调用的是当前具有相同参数的构造函数。</li><li>**this <strong>通常指代当前对象，</strong>super **通常指带父类。</li></ol><h2 id="41-throw"><a href="#41-throw" class="headerlink" title="41.throw"></a>41.throw</h2><blockquote><p>解释：抛出，扔<br>用法：用户自己人为的抛出一个异常。可以让本没有异常的代码中出现一个人造的异常出来。既然自己抛出一个异常那就要自己负责到底，自己用 catch 块去将这个异常给捕捉。其语法格式如下：<strong>throw</strong> 异常对象。</p></blockquote><p>throw 关键字用于引发异常。<br><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> method <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">if</span> (error)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error reading file&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>throw</strong> 语句将 <strong>java.lang.Throwable</strong> 作为参数。<strong>Throwable</strong> 在调用栈中向上传播，直到被适当的 <strong>catch</strong> 块捕获。<br>引发非 <strong>RuntimeException</strong> 异常的任何方法还必须在方法声明中使用 <strong>throws</strong> 修饰符来声明它引发的异常。</p></blockquote><h2 id="42-throws"><a href="#42-throws" class="headerlink" title="42.throws"></a>42.throws</h2><blockquote><p>解释：抛出，扔<br>用法：将方法体内产生的异常，自己不想再去负责捕捉，于是使用 throws 关键字将异常抛出方法体外部去。注意体内产生了什么类型的异常就应该抛出什么样的异常。并且抛出去之后总有一个人要负起这个责任，也就是谁调用了这个方法，谁去捕捉。<br><strong>throws</strong> 关键字可以应用于方法，以便指出方法引发了特定类型的异常。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> method <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">if</span> (error)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;error reading file&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>throws</strong> 关键字将逗号分隔的 <strong>java.lang.Throwables</strong> 列表作为参数。<br>引发非 RuntimeException 异常的任何方法还必须在方法声明中使用 <strong>throws</strong> 修饰符来声明它引发的异常。<br>要在 <strong>try-catch</strong> 块中包含带 <strong>throws</strong> 子句的方法的调用，必须提供该方法的调用者。</p></blockquote><h2 id="43-transient"><a href="#43-transient" class="headerlink" title="43.transient"></a>43.transient</h2><blockquote><p>用法：transient 关键字可以应用于类的成员变量，以便指出该成员变量不应 在包含它的类实例已序列化时被序列化。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>java 语言的关键字，变量修饰符，如果用** transient <strong>声明一个实例变量，当对象存储时，它的值不需要维持。<br>Java 的</strong> serialization <strong>提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用</strong> serialization <strong>机制来保存它。为了在一个特定对象的一个域上关闭</strong> serialization<strong>，可以在这个域前加上关键字</strong> transient**。<br>**transient <strong>是 Java 语言的关键字，用来表示一个域不是该对象串行化的一部分。当一个对象被串行化的时候，</strong>transient <strong>型变量的值不包括在串行化的表示中，然而非</strong> transient **型的变量是被包括进去的。</p></blockquote><h2 id="44-try"><a href="#44-try" class="headerlink" title="44.try"></a>44.try</h2><blockquote><p>解释：监视，考验，审问<br>用法：**try <strong>块用来监视所有又可能发生异常的代码，它可以和</strong> catch <strong>块组合，也可以和</strong> final <strong>块组合，也可以和</strong> catch <strong>块，</strong>final **块一起组合使用。<br><strong>try</strong> 关键字用于包含可能引发异常的语句块。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>&lt;可能引发异常的块&gt;<br>&#125;<br><span class="hljs-keyword">catch</span> (&lt;java.lang.Exception 或子类&gt; e)&#123;<br>&lt;处理异常 e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">try</span>&#123;<br>&lt;可能引发其他异常的块&gt;<br>&#125;<br><span class="hljs-keyword">catch</span> (FooException e)&#123;<br>&lt;处理 FooException e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">catch</span> (BarException e)&#123;<br>&lt;处理 BarException e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">try</span>&#123;<br>&lt;可能引发异常的块&gt;<br>&#125;<br><span class="hljs-keyword">catch</span> (&lt;java.lang.Exception 或子类&gt; e)&#123;<br>&lt;处理异常 e 的代码&gt;<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>&lt;有异常或无异常情况下都执行的语句&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>-注释-</strong><br>每个 <strong>try</strong> 块都必须至少有一个 <strong>catch</strong> 或 **finally **子句。<br>如果某个特定异常类未被任何 catch 子句处理，该异常将沿着调用栈递归地传播到下一个封闭 <strong>try</strong> 块。如果任何封闭 **try **块都未捕获到异常，Java 解释器将退出，并显示错误消息和堆栈跟踪信息。</p><h2 id="45-true"><a href="#45-true" class="headerlink" title="45.true"></a>45.true</h2><blockquote><p>解释：真，布尔型的字面值<br>用法：<strong>boolean <strong>类型的取值范围之一。<br><strong>true</strong> 关键字表示</strong> boolean</strong> 变量的两个合法值中的一个。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isComplete</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h2 id="46-void"><a href="#46-void" class="headerlink" title="46.void"></a>46.void</h2><blockquote><p>用法：<strong>void</strong> 关键字表示 <strong>null</strong> 类型。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span>&#123;<br>&lt;statements&gt;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br><strong>void</strong> 可以用作方法的返回类型，以指示该方法不返回值。</p></blockquote><h2 id="47-volatile"><a href="#47-volatile" class="headerlink" title="47.volatile"></a>47.volatile</h2><blockquote><p>用法：<strong>volatile</strong> 关键字用于表示可以被多个线程异步修改的成员变量。<br>注意：<strong>volatile</strong> 关键字在许多 Java 虚拟机中都没有实现。</p></blockquote><p><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&#123;<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> sharedValue;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>-注释-<br>**volatile <strong>的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。<br><strong>Volatile <strong>修饰的成员变量在每次被线程访问时，都强迫从主内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到主内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。<br>Java 语言规范中指出：为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比。<br>这样当多个线程同时与某个对象交互时，就必须要注意到要让线程及时的得到共享成员变量的变化。<br>而</strong> volatile <strong>关键字就是提示 VM：对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。<br>使用建议：在两个或者更多的线程访问的成员变量上使用</strong> volatile</strong>。当要访问的变量已在</strong> synchronized <strong>代码块中，或者为常量时，不必使用。<br>由于使用</strong> volatile **屏蔽掉了 VM 中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字。</p></blockquote><h2 id="48-while"><a href="#48-while" class="headerlink" title="48.while"></a>48.while</h2><p>用法：<strong>while</strong> 关键字用于指定一个只要条件为真就会重复的循环。<br><strong>-示例-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (!found)&#123;<br>&lt;statements&gt;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17.Java 异常处理</title>
    <link href="/posts/ac0f0b96.html"/>
    <url>/posts/ac0f0b96.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java-异常处理-捕获异常"><a href="#Java-异常处理-捕获异常" class="headerlink" title="Java 异常处理-捕获异常"></a>Java 异常处理-捕获异常</h2><ul><li>认识异常</li><li>处理异常</li><li>常见异常</li><li>throws 关键字</li><li>throw 关键字</li><li>自定义异常</li></ul><span id="more"></span><h3 id="认识异常"><a href="#认识异常" class="headerlink" title="认识异常"></a>认识异常</h3><ol><li>异常是导致程序中的运行的一种指令流，如果不对异常进行正确处理，则可能导致程序的中断执行，造成不必的损失。</li></ol><p><strong>异常格式</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    异常语句<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    捕获异常<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    一定执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Demo01</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exc</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo01</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> a/b;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>        System.out.println(temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><p><strong>正确代码 Demo01</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exc</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo01</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Exc</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exc</span>();<br>        temp = e.a/e.b;<br>        System.out.println(temp);<br>        System.out.println(<span class="hljs-string">&quot;程序退出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>错误代码 Demo02</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exc</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo03</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Exc</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//e = new Exc();</span><br>        System.out.println(temp);<br>        <span class="hljs-keyword">try</span>&#123;<br>            temp = e.a/e.b;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常&quot;</span> + e1);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;算数异常&quot;</span> + e2);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序退出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>错误代码 Demo03</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exc</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo03</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Exc</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//e = new Exc();</span><br>        System.out.println(temp);<br>        <span class="hljs-keyword">try</span>&#123;<br>            temp = e.a/e.b;<br><br>        &#125;<span class="hljs-keyword">catch</span>(Exception e1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常&quot;</span> + e1);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e1)&#123;<br>            System.out.println(<span class="hljs-string">&quot;算数异常&quot;</span> + e2);<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;程序退出&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>数组越界异常：ArrayIndexOutOfBoundsException</li><li>数组格式化异常：NumberFormatException</li><li>算数异常：ArithmeticException</li><li>空指针异常：NullPointerException</li></ol><h3 id="throws-关键字"><a href="#throws-关键字" class="headerlink" title="throws 关键字"></a>throws 关键字</h3><ol><li><p>在定义一个方法的时候可以使用 throws 关键字声明，使用 throws 声明的方法表示此方法不处理异常，抛给方法的调用者处理</p></li><li><p>格式：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Excepton&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>Demo02</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            tell(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        temp = i/j;<br>        System.out.println(temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Demo03</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo03</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>            tell(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        temp = i/j;<br>        System.out.println(temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="throw-关键字"><a href="#throw-关键字" class="headerlink" title="throw 关键字"></a>throw 关键字</h2><ol><li>throw 关键字抛出一个异常，抛出的时候直接抛出异常的实例化对象即可</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo03</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;实例化异常对象&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>自定义异常直接继承 Exception 就可以完成自定义异常类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-built_in">super</span>(mas);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo03</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;自定义异常&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(MyException e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15.Java 面向对象多态性</title>
    <link href="/posts/8dc68ecb.html"/>
    <url>/posts/8dc68ecb.html</url>
    
    <content type="html"><![CDATA[<ol><li>多态性</li><li>instanceof 关键字</li><li>抽象类的应用</li><li>接口的应用</li></ol><span id="more"></span><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol><li>多态性的体现<ul><li>方法的重载和重写</li><li>对象的多态性</li></ul></li><li>对象的多态性<ul><li>向上转型 : 程序会自动完成<ul><li>父类 父类对象 &#x3D; 子类实例</li></ul></li><li>向下转型 : 强制类型转换<ul><li>子类 子类对象 &#x3D; （子类）父类实例</li></ul></li></ul></li></ol><h3 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h3><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell2&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell3&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> b;<br>        <span class="hljs-comment">//A a = new B();</span><br>        a.tell1();<span class="hljs-comment">//重写的，调用的是 B 复写的方法</span><br>        a.tell2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">B--tell1<br>A--tell2<br></code></pre></td></tr></table></figure><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><blockquote><p>向下转型必须先发生想上转型，再发生向下转型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell2&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell3&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (B)a;<span class="hljs-comment">//向下转型</span><br>        b.tell1();<br>        b.tell2();<br>        b.tell3();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">B--tell1<br>A--tell2<br>B--tell3<br></code></pre></td></tr></table></figure><h2 id="多态性的应用"><a href="#多态性的应用" class="headerlink" title="多态性的应用"></a>多态性的应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell1&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell2&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;C--tell3&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//匿名对象调用</span><br>        say(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B1</span>());<br>        say(<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">(B1 b)</span>&#123;<br>        b.tell1();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">(C1 c)</span>&#123;<br>        c.tll1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">A--tell1<br></code></pre></td></tr></table></figure><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell1&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell2&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;C--tell3&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A1</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//匿名对象调用</span><br>        say(<span class="hljs-keyword">new</span> <span class="hljs-title class_">B1</span>());<br>        say(<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1</span>());<br>        say(<span class="hljs-keyword">new</span> <span class="hljs-title class_">D1</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">(A1 a)</span>&#123;<br>        a.tell1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">A--tell1<br></code></pre></td></tr></table></figure><h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>在 java 中可以使用<code>instanceof</code>关键字判断一个对象到底是不是一个类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;A--tell2&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;B--tell3&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(a <span class="hljs-keyword">instanceof</span> A);<br>        System.out.println(a <span class="hljs-keyword">instanceof</span> B);<br><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(a1 <span class="hljs-keyword">instanceof</span> A);<br>        System.out.println(a1 <span class="hljs-keyword">instanceof</span> B);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">true//a 是一个 A<br>false//a 不是一个 B<br>true//a1 是一个 A<br>true//a1 是一个 B<br></code></pre></td></tr></table></figure><h2 id="抽象类的应用"><a href="#抽象类的应用" class="headerlink" title="抽象类的应用"></a>抽象类的应用</h2><p>抽象类由<code>abstract</code>修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//构造方法，和类名相同的方法，用于初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">want</span><span class="hljs-params">()</span>; <span class="hljs-comment">//一个未实现的方法，抽象方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>  <br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name, <span class="hljs-type">int</span> score)</span>&#123;<br>        <span class="hljs-built_in">super</span>(age,name);<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>  <br>    <span class="hljs-comment">//需要复写父类中的抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">want</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+getName()+<span class="hljs-string">&quot;年龄：&quot;</span>+getAge()+<span class="hljs-string">&quot;成绩：&quot;</span>+getScore());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> moneny;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> moneny;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>  <br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name, <span class="hljs-type">int</span> money)</span>&#123;<br>        <span class="hljs-built_in">super</span>(age,name);<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>  <br>    <span class="hljs-comment">//需要复写父类中的抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">want</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>+getName()+<span class="hljs-string">&quot;年龄：&quot;</span>+getAge()+<span class="hljs-string">&quot;工资：&quot;</span>+getMoney());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">99</span>);<br>        stu.want();<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">wor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-number">35</span>, <span class="hljs-string">&quot;老王&quot;</span>, <span class="hljs-number">5000</span>);<br>        wor.want();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>类用** class **修饰，后面没有括号<br>方法后面有括号</p></blockquote><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">(USB u)</span>&#123;<br>        u.start();<br>        System.out.println(<span class="hljs-string">&quot;工作中&quot;</span>);<br>        u.stop();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">USBDisk</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;U 盘开始工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;U 盘停止工作&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Printer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打印机开始工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打印机停止工作&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        C.work(<span class="hljs-keyword">new</span> <span class="hljs-title class_">USBDisk</span>());<br>        C.work(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Printer</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">U 盘开始工作<br>工作中<br>U 盘停止工作<br>打印机开始工作<br>工作中<br>打印机停止工作<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.Java-String 字符串详解</title>
    <link href="/posts/6750e8fa.html"/>
    <url>/posts/6750e8fa.html</url>
    
    <content type="html"><![CDATA[<h2 id="Java-字符串"><a href="#Java-字符串" class="headerlink" title="Java 字符串"></a>Java 字符串</h2><h3 id="String-字符串详解"><a href="#String-字符串详解" class="headerlink" title="String 字符串详解"></a>String 字符串详解</h3><ol><li>实例化<code>String</code>对象<br>直接赋值<br>使用关键字<code>new</code></li><li><code>String</code>的内容比较</li><li>字符串的内容不可更改<span id="more"></span></li></ol><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//String str = &quot;Hello&quot;;//第一种，直接赋值，使用这种更合理一些</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<span class="hljs-comment">//第二种实例化方式，同时开辟两个空间，堆顶的空间是垃圾空间，等待被回收的。</span><br>        System.out.println(str);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内容比较"><a href="#内容比较" class="headerlink" title="内容比较"></a>内容比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a == b);<span class="hljs-comment">//true</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.out.println(str1 == str2);<span class="hljs-comment">//false,&quot;==&quot;比较的是地址</span><br>        System.out.println(str1.equals(str2));<span class="hljs-comment">//true,&quot;equals&quot;比较的内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="不可更改"><a href="#不可更改" class="headerlink" title="不可更改"></a>不可更改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo03</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Str1</span> <span class="hljs-operator">=</span> Str+<span class="hljs-string">&quot;World&quot;</span>;<br>        <span class="hljs-comment">//str = str+&quot;World&quot;;//改变的是堆内存地址的指向</span><br>        System.out.println(str1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String-字符串常用方法"><a href="#String-字符串常用方法" class="headerlink" title="String 字符串常用方法"></a>String 字符串常用方法</h3><ol><li>字符串长度：<code>length()</code>方法</li><li>字符串转换数组：<code>toCharArray()</code>方法</li><li>从字符串中取出指定的字符：<code>charAt()</code>方法</li><li>字符串与<code>byte</code>数组的转换：<code>getBytes()</code>方法</li><li>过滤字符串中存在的字符：<code>indexOf()</code>方法</li><li>去掉字符串的亲厚空格：<code>trim()</code>方法</li><li>从字符串中取出子字符串：<code>subString()</code>方法</li><li>大小写转换：<code>toLowerCsae()</code> <code>getUpperCsae()</code>方法</li><li>判断字符串的开头结尾字符：<code>endsWith()</code> <code>startWith()</code>方法</li><li>替换 String 字符串中的一个字符：<code>replace()</code>方法</li></ol><blockquote><p>eclipse 整理代码快捷键<code>ctrl+shift+F</code></p></blockquote><h4 id="1-length-方法"><a href="#1-length-方法" class="headerlink" title="1.length() 方法"></a>1.length() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo04</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jikexueyuan&quot;</span>;<br>        System.out.println(str.length());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-toCharArray-方法"><a href="#2-toCharArray-方法" class="headerlink" title="2.toCharArray() 方法"></a>2.toCharArray() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo05</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jikexueyuan&quot;</span>;<br>        <span class="hljs-type">char</span> data[] = str.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= data.length; i++)&#123;<br>            System.out.println(data[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">j i k e x u e y u a n<br></code></pre></td></tr></table></figure><h4 id="3-charAt-方法"><a href="#3-charAt-方法" class="headerlink" title="3.charAt() 方法"></a>3.charAt() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo06</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jikexueyuan&quot;</span>;<br>        System.out.println(str.charAt(<span class="hljs-number">7</span>));<span class="hljs-comment">//取出的是第 8 个字符</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-getBytes-方法"><a href="#4-getBytes-方法" class="headerlink" title="4.getBytes() 方法"></a>4.getBytes() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo07</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jikexueyuan&quot;</span>;<br>        <span class="hljs-type">byte</span> bytes[] = str.getBytes();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes)+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-indexOf-方法"><a href="#5-indexOf-方法" class="headerlink" title="5.indexOf() 方法"></a>5.indexOf() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo08</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jikexueyuan@163.com&quot;</span>;<br>        System.out.println(str.indexOf(<span class="hljs-string">&quot;@&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现结果：</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">11<br></code></pre></td></tr></table></figure><h4 id="6-trim-方法"><a href="#6-trim-方法" class="headerlink" title="6.trim() 方法"></a>6.trim() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo08</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;     jikexueyuan@163.com&quot;</span>;<br>        System.out.println(str.trim());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h3><ol><li>认识<code>StringBuffer</code>:<br>缓冲区，本身也是操作字符串，但是与<code>String</code>不同，<code>StringBuffer</code>是可以被更改的<br><code>StringBuffer</code>是一个操作类，所以必须通过实例化操作</li><li>StringBuffer 常用方法：<br><code>append()</code>: <code>//追加</code><br><code>insert()</code>:<code>//插入</code><br><code>replace()</code>: <code>//替换</code><br><code>indexOf()</code>: <code>//过滤字符串中存在的字符</code></li><li><code>StringBuffer</code>类的应用</li></ol><h4 id="1-实例化操作"><a href="#1-实例化操作" class="headerlink" title="1. 实例化操作"></a>1. 实例化操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb.append(<span class="hljs-string">&quot;jikexueyuan&quot;</span>);<br>        System.out.println(sb.toString());<br>        tell(sb);<br>        System.out.println(sb.toString());<br>        <span class="hljs-comment">//System.out.println(sb.toString());//转换成 String 类型</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">(StringBuffer s)</span>&#123;<br>        s.append(<span class="hljs-string">&quot;i love jikexueyuan&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">jikexueyuan<br>jikexueyuani love jikexueyuan<br></code></pre></td></tr></table></figure><h4 id="复原"><a href="#复原" class="headerlink" title="复原"></a>复原</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        System.out.println(sb.toString());<br>        tell(sb);<br>        System.out.println(sb.toString());<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">(String s)</span>&#123;<br>        s.append(<span class="hljs-string">&quot;i love jikexueyuan&quot;</span>);<br>        s = <span class="hljs-string">&quot;helloii&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Hello<br></code></pre></td></tr></table></figure><h4 id="2-append-和-insert-方法"><a href="#2-append-和-insert-方法" class="headerlink" title="2.append() 和 insert() 方法"></a>2.append() 和 insert() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sbf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sbf.append(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        sbf.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;i love&quot;</span>);<br>        Syetem.out.println(sbf.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">i loveHello<br></code></pre></td></tr></table></figure><h4 id="3-replace-方法"><a href="#3-replace-方法" class="headerlink" title="3.replace() 方法"></a>3.replace() 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBufferDemo01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sbf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sbf.append(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        sbf.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;i love&quot;</span>);<br>        Syetem.out.println(sbf.toString());<br>        sbf.replace(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;wwtliu&quot;</span>);<br>        Syetem.out.println(sbf.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>实现效果：</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">i loveHello<br>iwwtliuoveHello<br></code></pre></td></tr></table></figure><h4 id="4-StringBuffer-应用"><a href="#4-StringBuffer-应用" class="headerlink" title="4.StringBuffer 应用"></a>4.StringBuffer 应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo05</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-comment">//String str = &quot;jikexueyuan&quot;;//非常耗资源</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<span class="hljs-comment">//这个代码快很多</span><br>        str.append(<span class="hljs-string">&quot;jikexueyuan&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>            <span class="hljs-comment">//str = str +i;//String 追加</span><br>            str = append(i);<span class="hljs-comment">//StringBuffer 追加</span><br>        &#125;<br>        Syetem.out.println(str);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="StringBuider-用法"><a href="#StringBuider-用法" class="headerlink" title="StringBuider 用法"></a>StringBuider 用法</h3><ol><li>一个可变的字符序列，该类被设计作用 StringBuffer 的一个简单替换，用在字符缓冲区被单个线程使用的时候。建议优先考虑该类，速度比 StringBuffer 要快。</li><li>但是如果涉及到线程安全方面，建议使用 StringBuffer。</li><li>使用方法：<br><code>append()</code><br><code>insert()</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13.Java 面向对象-抽象类与接口</title>
    <link href="/posts/3fdb9d75.html"/>
    <url>/posts/3fdb9d75.html</url>
    
    <content type="html"><![CDATA[<h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><ol><li><code>final</code>关键字在 java 中被称为完结器，表示最终的意思</li><li><code>final</code>声明类、方法、属性：<br>使用<code>final</code>声明的类不能被继承<br>使用<code>final</code>声明的方法不能被重写<br>使用<code>final</code>声明的变量变成常量，常量是不能被修改的<span id="more"></span></li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>概念：<br>包含一个抽象方法的类就是抽象类</li><li>什么是抽象方法：<br>声明而未被实现的方法，抽象方法必须使用<code>abstract</code>关键字声明</li><li>抽象类被子类继承，子类（如果不是抽象类）必须重写抽象类中的所有方法</li><li>定义格式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">className</span>&#123;<br>属性<br>方法<br>抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><ol><li>不能直接对抽象类进行实例化，要通过其子类进行实例化</li></ol></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abs</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>    setAge(<span class="hljs-type">int</span> age)&#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br>getAge()&#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abs</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-built_in">this</span>.getAge());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbsDemo01</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//Abs a = new Abs();//错误，抽象类不能被实例化</span><br><span class="hljs-type">AbsDemo</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbsDemo</span>();<br>a.setAge(<span class="hljs-number">20</span>);<br>a.say();<br>a.print();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li>接口是 Java 中最重要的概念，接口可以理解为一种特殊的类，里面全部是由全局常量和公共的抽象方法所组成。</li><li>接口格式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">interfaceName</span>&#123;<br>全局常量<br>抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>接口的实现也必须通过子类，使用关键字<code>implements</code>，而且接口也可以多实现的。</li><li>一个类可以同时继承抽象类和实现接口</li><li>一个接口不能继承一个抽象类，但是却可以通过<code>extends</code>关键字同时继承多个接口，实现接口的多继承</li></ol><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter1</span>&#123;<br><span class="hljs-comment">//全局常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">AGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-comment">//抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Abs1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Abs1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Inter1</span>,Inter2&#123;<br><span class="hljs-comment">//子类实现接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tell</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">tnter3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inter1</span>,Inter2&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterDemo01</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//Inter i = new Inter();//错误，接口无法被直接实例化</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>a.tell();<br>System.out.println(Inter1.AGE);<span class="hljs-comment">//类名调用</span><br>a.say();<br>a.print();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.Java 面向对象中类与对象的概念和使用</title>
    <link href="/posts/d4c145c6.html"/>
    <url>/posts/d4c145c6.html</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><ol><li>方法的定义</li><li>方法的重载</li><li>掌握方法的递归调用</li><li>了解面向对象</li><li>面向对象的三大特征</li><li>掌握类的定义、声明及调用</li><li>了解类与对象的关系</li><li>内存的划分<span id="more"></span></li></ol><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ol><li>方法就是一段可重复调用的代码</li><li>定义格式</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">访问修饰符 返回值类型 方法名 ()&#123;<br>    方法主体<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ol><li>方法的重载：方法名称相同，但是参数类型和个数不同，通过传递参数的个数和类型的不同来完成不同的功能。</li></ol><h3 id="类的定义、声明及使用"><a href="#类的定义、声明及使用" class="headerlink" title="类的定义、声明及使用"></a>类的定义、声明及使用</h3><p>定义格式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">class 类名称&#123;<br>    属性<br>    方法<br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个类需要通过一个关键字<code>class</code></p><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ol><li>类是对某一类事物的描写，是抽象的、概念上的意义，对象是实际存在的该类事物的每一个个体，也被称为实例。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//声明</span><br>per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>;<span class="hljs-comment">//实例化操作</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//声明并实例化</span><br></code></pre></td></tr></table></figure><h2 id="内存的划分"><a href="#内存的划分" class="headerlink" title="内存的划分"></a>内存的划分</h2><p><img src="http://oay5ngsv9.bkt.clouddn.com/09.Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8-1.jpg" alt="x"></p><ol><li>对象。属性&#x2F;&#x2F;赋值</li><li>对象。方法&#x2F;&#x2F;调用</li></ol>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.java 类方法详解</title>
    <link href="/posts/d79ea70e.html"/>
    <url>/posts/d79ea70e.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>笔记创建时间：May 26, 2016 2:05 AM</p></blockquote><h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><ul><li>类方法</li><li>静态变量<span id="more"></span></li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>由 static 修饰的方法称为类方法或静态方法。</p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><ol><li>由 static 修饰的变量称为类变量或静态变量。</li><li>静态变量的定义位置要在所有方法之外。</li><li>静态变量与静态方法都是在类从磁盘加载至内存后被创建，与类同时存在，同时消亡。</li><li>静态变量又称为类的成员变量，在类中是全局变量，可以被类中的所有方法调用。</li><li>静态变量的值由 JVM 自动初始化。</li></ol><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>键盘输入一个人的姓名、年龄、身高、性格，然后让该人向大家自我介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span>&#123;<br>    <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> age;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">float</span> height;<br>    <span class="hljs-keyword">static</span> String type;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>);<br>        name = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span>);<br>        sex = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span>);<br>        age = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;身高：&quot;</span>);<br>        height = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性格：&quot;</span>);<br>        type = sanner.next();<br>        System.out.print(<span class="hljs-string">&quot;嗨，大家好，我叫：&quot;</span>+name);<br>        System.out.print(<span class="hljs-string">&quot;，今年&quot;</span>+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;，身高&quot;</span>+height);<br>        System.out.print(<span class="hljs-string">&quot;，我的性格&quot;</span>+type);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义无参构造方法"><a href="#定义无参构造方法" class="headerlink" title="定义无参构造方法"></a>定义无参构造方法</h2><ol><li>什么是方法</li><li>定义无参方法</li><li>为什么使用方法</li></ol><h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><p>方法代表一段代码，java 的代码通常封装在方法中。<br>例如我们使用的<code>main</code>方法，是 java 规定的每个类的代码运行的入口、</p><h3 id="定义无参方法"><a href="#定义无参方法" class="headerlink" title="定义无参方法"></a>定义无参方法</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名 ()&#123;<br>    方法体-方法中的代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么使用方法"><a href="#为什么使用方法" class="headerlink" title="为什么使用方法"></a>为什么使用方法</h3><ol><li>java 的代码通常要在方法中编写，即代码封装在方法中。</li><li>模块化编程：将具有某种功能的代码块封装在一个方法中，不同的代码块由不同的方法封装，利于程序的管理和维护。</li><li>将具复用价值的代码封装在方法中，调用该代码块时，只需调用方法名，这样能有效的减少程序的冗余。</li></ol><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test02</span>&#123;<br>    <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> age;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">float</span> height;<br>    <span class="hljs-keyword">static</span> String type;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        inut();<br>        System.out.print(<span class="hljs-string">&quot;嗨，大家好，我叫：&quot;</span>+name);<br>        System.out.print(<span class="hljs-string">&quot;，今年&quot;</span>+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;，身高&quot;</span>+height);<br>        System.out.print(<span class="hljs-string">&quot;，我的性格&quot;</span>+type);<br>        inut();<br>        System.out.print(<span class="hljs-string">&quot;嗨，大家好，我叫：&quot;</span>+name);<br>        System.out.print(<span class="hljs-string">&quot;，今年&quot;</span>+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;，身高&quot;</span>+height);<br>        System.out.print(<span class="hljs-string">&quot;，我的性格&quot;</span>+type);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>);<br>        name = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span>);<br>        sex = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span>);<br>        age = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;身高：&quot;</span>);<br>        height = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性格：&quot;</span>);<br>        type = sanner.next();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义有参方法"><a href="#定义有参方法" class="headerlink" title="定义有参方法"></a>定义有参方法</h2><ol><li>定义格式</li><li>为什么使用带参方法</li></ol><h3 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名（类型 <span class="hljs-number">1</span> 变量 <span class="hljs-number">1</span>, 类型 <span class="hljs-number">2</span> 变量 <span class="hljs-number">2.</span>..)&#123;<br>    方法体-方法中的代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么使用带参方法"><a href="#为什么使用带参方法" class="headerlink" title="为什么使用带参方法"></a>为什么使用带参方法</h3><p>带参方法可以接收外界传递的数据，方法能处理更急复杂的问题，具有更灵活的功能。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span>&#123;<br>    <span class="hljs-keyword">static</span> String name;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> sex;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> age;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">float</span> height;<br>    <span class="hljs-keyword">static</span> String type;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        inut();<br>        System.out.print(<span class="hljs-string">&quot;嗨，大家好，我叫：&quot;</span>+name);<br>        System.out.print(<span class="hljs-string">&quot;，今年&quot;</span>+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;，身高&quot;</span>+height);<br>        System.out.print(<span class="hljs-string">&quot;，我的性格&quot;</span>+type);<br>        feeling(<span class="hljs-string">&quot;我中了五百万&quot;</span>,<span class="hljs-string">&quot;哈哈哈&quot;</span>);<br>        inut();<br>        System.out.print(<span class="hljs-string">&quot;嗨，大家好，我叫：&quot;</span>+name);<br>        System.out.print(<span class="hljs-string">&quot;，今年&quot;</span>+age+<span class="hljs-string">&quot;岁&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;，身高&quot;</span>+height);<br>        System.out.print(<span class="hljs-string">&quot;，我的性格&quot;</span>+type);<br>        feeling(<span class="hljs-string">&quot;我失恋类&quot;</span>,<span class="hljs-string">&quot;呜呜呜呜&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feeling</span><span class="hljs-params">(String cause,String content)</span>&#123;<br>        System.out.println(cause);<br>        System.out.println(content);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>);<br>        name = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span>);<br>        sex = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span>);<br>        age = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;身高：&quot;</span>);<br>        height = sanner.next();<br>        System.out.println(<span class="hljs-string">&quot;性格：&quot;</span>);<br>        type = sanner.next();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义带返回值的方法"><a href="#定义带返回值的方法" class="headerlink" title="定义带返回值的方法"></a>定义带返回值的方法</h2><ol><li>为什么使用带返回值方法</li><li>定义格式</li></ol><h3 id="为什么使用带返回值方法"><a href="#为什么使用带返回值方法" class="headerlink" title="为什么使用带返回值方法"></a>为什么使用带返回值方法</h3><ol><li><p>在 java 中 Math 类中定义类许多具有运算功能的方法，这些方法也称为函数。<br>例如：<code>double Math.sqrt(double value)</code></p></li><li><p>java 允许程序员自定义这种具有计算并返回结果的方法。</p></li></ol><h3 id="定义格式-1"><a href="#定义格式-1" class="headerlink" title="定义格式"></a>定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> 返回值类型 方法名（类型 <span class="hljs-number">1</span> 变量 <span class="hljs-number">1</span>, 类型 <span class="hljs-number">2</span> 变量 <span class="hljs-number">2.</span>..)&#123;<br>    方法体-方法中的代码<br>    <span class="hljs-keyword">return</span> 返回的数据；<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例 4"></a>实例 4</h3><p>定义一个能保留小数点后任意位的方法 pround，在 main 方法中调用该方法，保留小数点后任意位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;3.758 保留小数点后 2 位&quot;</span>);<br>        pround(<span class="hljs-number">3.758</span>,<span class="hljs-number">2</span>)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">pround</span><span class="hljs-params">(<span class="hljs-type">double</span> value,<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">pow10</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">10</span>,n);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> value*pow10;<br>        result = Math.round(result);<br>        result /=pow10;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.Java 语言 switch 语句详解</title>
    <link href="/posts/e4d05c03.html"/>
    <url>/posts/e4d05c03.html</url>
    
    <content type="html"><![CDATA[<h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><blockquote><p>笔记创建时间：May 26, 2016 12:47 AM</p></blockquote><ol><li>switch 语句称为情况选择语句，又称为开关语句</li><li>switch 是分支语句的一种，用于对多种情况惊喜不同处理的语句。</li><li>JDK1.7 之前的 switch 语句限定对整型数据进行判断。<span id="more"></span></li></ol><h3 id="switch-语句定义格式"><a href="#switch-语句定义格式" class="headerlink" title="switch 语句定义格式"></a>switch 语句定义格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>（表达式）&#123;<br>    <span class="hljs-keyword">case</span> 常量值 <span class="hljs-number">1</span>:<br>        代码块 <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 常量值 <span class="hljs-number">2</span>:<br>        代码块 <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>        ......<br>    <span class="hljs-keyword">default</span>:<br>        以上常量值均不是时，执行本代码。<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h4><p>判断 int 类型的数据<br>键盘输入一个 5 分制的分数，根据以下频分标准给出成绩的等级<br>5 分：优秀<br>4 分：优良<br>3 分：及格<br>0~2 分：不及格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入 5 分制数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">switch</span>(score)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;良好&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入的分数不是 5 分制的分数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h4><p>switch 语句的“贯穿”现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-keyword">switch</span>(score)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        score++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        score++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        score++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        score++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        score++;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        score++;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(score);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于没有<code>break</code>，从<code>case 4:</code>一直贯穿到<code>default</code>语句。</p></blockquote><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h3><p>键盘输入优、良、中、差，给出相应的分数 5、4、3、2。<br>解题步骤：</p><ol><li>创建 Scanner 对象；</li><li>通过键盘接收一个 char 类型的数据-&gt;grade</li><li>用 switch 对 grade 的值进行判断，根据不同的等级显示不同的分数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test06</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入分制等级&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">switch</span>(score)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;优&#x27;</span>:<br>                System.out.println(<span class="hljs-number">5</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;良&#x27;</span>:<br>                System.out.println(<span class="hljs-number">4</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;中&#x27;</span>:<br>                System.out.println(<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;差&#x27;</span>:<br>                System.out.println(<span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入的分数等级错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例 4"></a>实例 4</h3><p>显示指定月天数。不考虑闰年 2 月份的情况。</p><ol><li>创建 Scanner 对象；</li><li>通过键盘接收一个 int 类型的数据-&gt;month，代表月份值；</li><li>用 switch 对 month 的值进行判断，根据月份显示相应的天数。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;输入月份&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">switch</span>(month)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                System.out.println(<span class="hljs-string">&quot;31&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;28&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(<span class="hljs-string">&quot;30&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入的月份错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to use Hexo</title>
    <link href="/posts/b127c048.html"/>
    <url>/posts/b127c048.html</url>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>命令行中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo new <span class="hljs-string">&quot;new article&quot;</span><br></code></pre></td></tr></table></figure><p>之后在 <code>source/_posts</code> 目录下面，多了一个 <code>new-article.md</code> 的文件。</p><p>打开之后我们会看到：<span id="more"></span></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">title: new article<br>date: 2014-11-01 20:10:33<br><span class="hljs-section">tags:</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>文件的开头是属性，采用统一的 yaml 格式，用三条短横线分隔。下面是文章正文。</p><p>文章的正文支持 markdown 格式，建议你先学习一下它的语法。markdown 不像 html 似的一大堆标签，很简单，只有几个符号。</p><p>新建、删除或修改文章后，不需要重启 hexo server，刷新一下即可预览。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>文章可以拥有如下属性：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">Setting Description Default<br>layout    Layout    post 或 page<br>title    文章的标题<br>date    创建日期    文件的创建日期<br>updated    修改日期    文件的修改日期<br>comments    是否开启评论    true<br>tags    标签<br>categories    分类<br>permalink    url 中的名字    文件名<br></code></pre></td></tr></table></figure><p>动态博客中通过发布文章页面设置的各种属性，在 hexo 里要这样设置。</p><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>例如：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">categories:<br><span class="hljs-bullet">-</span> 日记<br>tags:<br><span class="hljs-bullet">-</span> Hexo<br><span class="hljs-bullet">-</span> node.js<br></code></pre></td></tr></table></figure><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>同 wordpress 一样， <code>&lt;!--more--&gt;</code> 之上的内容为摘要。</p><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>如果你修改了 <strong>layout</strong>，<strong>scaffolds</strong> 文件夹里一定要有名字对应的模版文件，否则会采用默认模版。</p><h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><p>在配置文件中的 new_post_name 项可以设置文件名，默认为<code>:title</code>，也就是你在命令行输入的名字。</p><p>文件名可以为下面几个变量和字符串常量的任意组合：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Variable Description<br>:title    Escaped title (lower case and replace spaces with dash)<br>:year    Created year (4-digit)<br>:month    Created month (2-digit)<br>:i_month    Created month (Without leading zeros)<br>:day    Created day (2-digit)<br>:i_day    Created day (Without leading zeros)<br></code></pre></td></tr></table></figure><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>草稿相当于很多博客都有的“私密文章”功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo new draft <span class="hljs-string">&quot;new draft&quot;</span><br></code></pre></td></tr></table></figure><p>会在<code>source/_drafts</code>目录下生成一个** new-draft.md <strong>文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到</strong>_drafts **目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">render<span class="hljs-emphasis">_drafts: true</span><br></code></pre></td></tr></table></figure><p>或者，如下方式启动 server：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo server --drafts<br></code></pre></td></tr></table></figure><p>下面这条命令可以把草稿变成文章，或者页面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自用笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
